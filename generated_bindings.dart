// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  DiplomatWriteable diplomat_simple_writeable(
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
  ) {
    return _diplomat_simple_writeable(
      buf,
      buf_size,
    );
  }

  late final _diplomat_simple_writeablePtr = _lookup<
      ffi.NativeFunction<
          DiplomatWriteable Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('diplomat_simple_writeable');
  late final _diplomat_simple_writeable = _diplomat_simple_writeablePtr
      .asFunction<DiplomatWriteable Function(ffi.Pointer<ffi.Char>, int)>();

  void CodePointRangeIteratorResult_destroy(
    ffi.Pointer<CodePointRangeIteratorResult> self,
  ) {
    return _CodePointRangeIteratorResult_destroy(
      self,
    );
  }

  late final _CodePointRangeIteratorResult_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CodePointRangeIteratorResult>)>>(
      'CodePointRangeIteratorResult_destroy');
  late final _CodePointRangeIteratorResult_destroy =
      _CodePointRangeIteratorResult_destroyPtr.asFunction<
          void Function(ffi.Pointer<CodePointRangeIteratorResult>)>();

  CodePointRangeIteratorResult CodePointRangeIterator_next(
    ffi.Pointer<CodePointRangeIterator> self,
  ) {
    return _CodePointRangeIterator_next(
      self,
    );
  }

  late final _CodePointRangeIterator_nextPtr = _lookup<
          ffi.NativeFunction<
              CodePointRangeIteratorResult Function(
                  ffi.Pointer<CodePointRangeIterator>)>>(
      'CodePointRangeIterator_next');
  late final _CodePointRangeIterator_next =
      _CodePointRangeIterator_nextPtr.asFunction<
          CodePointRangeIteratorResult Function(
              ffi.Pointer<CodePointRangeIterator>)>();

  void CodePointRangeIterator_destroy(
    ffi.Pointer<CodePointRangeIterator> self,
  ) {
    return _CodePointRangeIterator_destroy(
      self,
    );
  }

  late final _CodePointRangeIterator_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CodePointRangeIterator>)>>(
      'CodePointRangeIterator_destroy');
  late final _CodePointRangeIterator_destroy =
      _CodePointRangeIterator_destroyPtr.asFunction<
          void Function(ffi.Pointer<CodePointRangeIterator>)>();

  void ICU4XError_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XError_destroy(
      self,
    );
  }

  late final _ICU4XError_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XError_destroy');
  late final _ICU4XError_destroy = _ICU4XError_destroyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XLocaleFallbackPriority_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XLocaleFallbackPriority_destroy(
      self,
    );
  }

  late final _ICU4XLocaleFallbackPriority_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XLocaleFallbackPriority_destroy');
  late final _ICU4XLocaleFallbackPriority_destroy =
      _ICU4XLocaleFallbackPriority_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XLocaleFallbackConfig_destroy(
    ffi.Pointer<ICU4XLocaleFallbackConfig> self,
  ) {
    return _ICU4XLocaleFallbackConfig_destroy(
      self,
    );
  }

  late final _ICU4XLocaleFallbackConfig_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLocaleFallbackConfig>)>>(
      'ICU4XLocaleFallbackConfig_destroy');
  late final _ICU4XLocaleFallbackConfig_destroy =
      _ICU4XLocaleFallbackConfig_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLocaleFallbackConfig>)>();

  diplomat_result_box_ICU4XLocaleFallbacker_ICU4XError
      ICU4XLocaleFallbacker_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XLocaleFallbacker_create(
      provider,
    );
  }

  late final _ICU4XLocaleFallbacker_createPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XLocaleFallbacker_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>>('ICU4XLocaleFallbacker_create');
  late final _ICU4XLocaleFallbacker_create =
      _ICU4XLocaleFallbacker_createPtr.asFunction<
          diplomat_result_box_ICU4XLocaleFallbacker_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  ffi.Pointer<ICU4XLocaleFallbacker>
      ICU4XLocaleFallbacker_create_without_data() {
    return _ICU4XLocaleFallbacker_create_without_data();
  }

  late final _ICU4XLocaleFallbacker_create_without_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ICU4XLocaleFallbacker> Function()>>(
      'ICU4XLocaleFallbacker_create_without_data');
  late final _ICU4XLocaleFallbacker_create_without_data =
      _ICU4XLocaleFallbacker_create_without_dataPtr.asFunction<
          ffi.Pointer<ICU4XLocaleFallbacker> Function()>();

  diplomat_result_box_ICU4XLocaleFallbackerWithConfig_ICU4XError
      ICU4XLocaleFallbacker_for_config(
    ffi.Pointer<ICU4XLocaleFallbacker> self,
    ICU4XLocaleFallbackConfig config,
  ) {
    return _ICU4XLocaleFallbacker_for_config(
      self,
      config,
    );
  }

  late final _ICU4XLocaleFallbacker_for_configPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XLocaleFallbackerWithConfig_ICU4XError Function(
              ffi.Pointer<ICU4XLocaleFallbacker>,
              ICU4XLocaleFallbackConfig)>>('ICU4XLocaleFallbacker_for_config');
  late final _ICU4XLocaleFallbacker_for_config =
      _ICU4XLocaleFallbacker_for_configPtr.asFunction<
          diplomat_result_box_ICU4XLocaleFallbackerWithConfig_ICU4XError Function(
              ffi.Pointer<ICU4XLocaleFallbacker>, ICU4XLocaleFallbackConfig)>();

  void ICU4XLocaleFallbacker_destroy(
    ffi.Pointer<ICU4XLocaleFallbacker> self,
  ) {
    return _ICU4XLocaleFallbacker_destroy(
      self,
    );
  }

  late final _ICU4XLocaleFallbacker_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLocaleFallbacker>)>>(
      'ICU4XLocaleFallbacker_destroy');
  late final _ICU4XLocaleFallbacker_destroy = _ICU4XLocaleFallbacker_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XLocaleFallbacker>)>();

  diplomat_result_box_ICU4XDataProvider_ICU4XError ICU4XDataProvider_create_fs(
    ffi.Pointer<ffi.Char> path_data,
    int path_len,
  ) {
    return _ICU4XDataProvider_create_fs(
      path_data,
      path_len,
    );
  }

  late final _ICU4XDataProvider_create_fsPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XDataProvider_ICU4XError Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('ICU4XDataProvider_create_fs');
  late final _ICU4XDataProvider_create_fs =
      _ICU4XDataProvider_create_fsPtr.asFunction<
          diplomat_result_box_ICU4XDataProvider_ICU4XError Function(
              ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ICU4XDataProvider> ICU4XDataProvider_create_test() {
    return _ICU4XDataProvider_create_test();
  }

  late final _ICU4XDataProvider_create_testPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XDataProvider> Function()>>(
          'ICU4XDataProvider_create_test');
  late final _ICU4XDataProvider_create_test = _ICU4XDataProvider_create_testPtr
      .asFunction<ffi.Pointer<ICU4XDataProvider> Function()>();

  diplomat_result_box_ICU4XDataProvider_ICU4XError
      ICU4XDataProvider_create_from_byte_slice(
    ffi.Pointer<ffi.Uint8> blob_data,
    int blob_len,
  ) {
    return _ICU4XDataProvider_create_from_byte_slice(
      blob_data,
      blob_len,
    );
  }

  late final _ICU4XDataProvider_create_from_byte_slicePtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XDataProvider_ICU4XError Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('ICU4XDataProvider_create_from_byte_slice');
  late final _ICU4XDataProvider_create_from_byte_slice =
      _ICU4XDataProvider_create_from_byte_slicePtr.asFunction<
          diplomat_result_box_ICU4XDataProvider_ICU4XError Function(
              ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ICU4XDataProvider> ICU4XDataProvider_create_empty() {
    return _ICU4XDataProvider_create_empty();
  }

  late final _ICU4XDataProvider_create_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XDataProvider> Function()>>(
          'ICU4XDataProvider_create_empty');
  late final _ICU4XDataProvider_create_empty =
      _ICU4XDataProvider_create_emptyPtr.asFunction<
          ffi.Pointer<ICU4XDataProvider> Function()>();

  diplomat_result_void_ICU4XError ICU4XDataProvider_fork_by_key(
    ffi.Pointer<ICU4XDataProvider> self,
    ffi.Pointer<ICU4XDataProvider> other,
  ) {
    return _ICU4XDataProvider_fork_by_key(
      self,
      other,
    );
  }

  late final _ICU4XDataProvider_fork_by_keyPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XDataProvider_fork_by_key');
  late final _ICU4XDataProvider_fork_by_key =
      _ICU4XDataProvider_fork_by_keyPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError ICU4XDataProvider_fork_by_locale(
    ffi.Pointer<ICU4XDataProvider> self,
    ffi.Pointer<ICU4XDataProvider> other,
  ) {
    return _ICU4XDataProvider_fork_by_locale(
      self,
      other,
    );
  }

  late final _ICU4XDataProvider_fork_by_localePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XDataProvider_fork_by_locale');
  late final _ICU4XDataProvider_fork_by_locale =
      _ICU4XDataProvider_fork_by_localePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError ICU4XDataProvider_enable_locale_fallback(
    ffi.Pointer<ICU4XDataProvider> self,
  ) {
    return _ICU4XDataProvider_enable_locale_fallback(
      self,
    );
  }

  late final _ICU4XDataProvider_enable_locale_fallbackPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XDataProvider_enable_locale_fallback');
  late final _ICU4XDataProvider_enable_locale_fallback =
      _ICU4XDataProvider_enable_locale_fallbackPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError ICU4XDataProvider_enable_locale_fallback_with(
    ffi.Pointer<ICU4XDataProvider> self,
    ffi.Pointer<ICU4XLocaleFallbacker> fallbacker,
  ) {
    return _ICU4XDataProvider_enable_locale_fallback_with(
      self,
      fallbacker,
    );
  }

  late final _ICU4XDataProvider_enable_locale_fallback_withPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XLocaleFallbacker>)>>(
      'ICU4XDataProvider_enable_locale_fallback_with');
  late final _ICU4XDataProvider_enable_locale_fallback_with =
      _ICU4XDataProvider_enable_locale_fallback_withPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocaleFallbacker>)>();

  void ICU4XDataProvider_destroy(
    ffi.Pointer<ICU4XDataProvider> self,
  ) {
    return _ICU4XDataProvider_destroy(
      self,
    );
  }

  late final _ICU4XDataProvider_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XDataProvider>)>>('ICU4XDataProvider_destroy');
  late final _ICU4XDataProvider_destroy = _ICU4XDataProvider_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XDataProvider>)>();

  bool ICU4XCodePointSetData_contains(
    ffi.Pointer<ICU4XCodePointSetData> self,
    int cp,
  ) {
    return _ICU4XCodePointSetData_contains(
      self,
      cp,
    );
  }

  late final _ICU4XCodePointSetData_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ICU4XCodePointSetData>,
              char32_t)>>('ICU4XCodePointSetData_contains');
  late final _ICU4XCodePointSetData_contains =
      _ICU4XCodePointSetData_containsPtr.asFunction<
          bool Function(ffi.Pointer<ICU4XCodePointSetData>, int)>();

  bool ICU4XCodePointSetData_contains32(
    ffi.Pointer<ICU4XCodePointSetData> self,
    int cp,
  ) {
    return _ICU4XCodePointSetData_contains32(
      self,
      cp,
    );
  }

  late final _ICU4XCodePointSetData_contains32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ICU4XCodePointSetData>,
              ffi.Uint32)>>('ICU4XCodePointSetData_contains32');
  late final _ICU4XCodePointSetData_contains32 =
      _ICU4XCodePointSetData_contains32Ptr.asFunction<
          bool Function(ffi.Pointer<ICU4XCodePointSetData>, int)>();

  ffi.Pointer<CodePointRangeIterator> ICU4XCodePointSetData_iter_ranges(
    ffi.Pointer<ICU4XCodePointSetData> self,
  ) {
    return _ICU4XCodePointSetData_iter_ranges(
      self,
    );
  }

  late final _ICU4XCodePointSetData_iter_rangesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CodePointRangeIterator> Function(
                  ffi.Pointer<ICU4XCodePointSetData>)>>(
      'ICU4XCodePointSetData_iter_ranges');
  late final _ICU4XCodePointSetData_iter_ranges =
      _ICU4XCodePointSetData_iter_rangesPtr.asFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointSetData>)>();

  ffi.Pointer<CodePointRangeIterator>
      ICU4XCodePointSetData_iter_ranges_complemented(
    ffi.Pointer<ICU4XCodePointSetData> self,
  ) {
    return _ICU4XCodePointSetData_iter_ranges_complemented(
      self,
    );
  }

  late final _ICU4XCodePointSetData_iter_ranges_complementedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CodePointRangeIterator> Function(
                  ffi.Pointer<ICU4XCodePointSetData>)>>(
      'ICU4XCodePointSetData_iter_ranges_complemented');
  late final _ICU4XCodePointSetData_iter_ranges_complemented =
      _ICU4XCodePointSetData_iter_ranges_complementedPtr.asFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointSetData>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_for_general_category_group(
    ffi.Pointer<ICU4XDataProvider> provider,
    int group,
  ) {
    return _ICU4XCodePointSetData_load_for_general_category_group(
      provider,
      group,
    );
  }

  late final _ICU4XCodePointSetData_load_for_general_category_groupPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                      ffi.Pointer<ICU4XDataProvider>, ffi.Uint32)>>(
          'ICU4XCodePointSetData_load_for_general_category_group');
  late final _ICU4XCodePointSetData_load_for_general_category_group =
      _ICU4XCodePointSetData_load_for_general_category_groupPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, int)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_ascii_hex_digit(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_ascii_hex_digit(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_ascii_hex_digitPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_ascii_hex_digit');
  late final _ICU4XCodePointSetData_load_ascii_hex_digit =
      _ICU4XCodePointSetData_load_ascii_hex_digitPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_alnum(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_alnum(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_alnumPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_alnum');
  late final _ICU4XCodePointSetData_load_alnum =
      _ICU4XCodePointSetData_load_alnumPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_alphabetic(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_alphabetic(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_alphabeticPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_alphabetic');
  late final _ICU4XCodePointSetData_load_alphabetic =
      _ICU4XCodePointSetData_load_alphabeticPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_bidi_control(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_bidi_control(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_bidi_controlPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_bidi_control');
  late final _ICU4XCodePointSetData_load_bidi_control =
      _ICU4XCodePointSetData_load_bidi_controlPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_bidi_mirrored(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_bidi_mirrored(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_bidi_mirroredPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_bidi_mirrored');
  late final _ICU4XCodePointSetData_load_bidi_mirrored =
      _ICU4XCodePointSetData_load_bidi_mirroredPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_blank(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_blank(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_blankPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_blank');
  late final _ICU4XCodePointSetData_load_blank =
      _ICU4XCodePointSetData_load_blankPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_cased(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_cased(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_casedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_cased');
  late final _ICU4XCodePointSetData_load_cased =
      _ICU4XCodePointSetData_load_casedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_case_ignorable(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_case_ignorable(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_case_ignorablePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_case_ignorable');
  late final _ICU4XCodePointSetData_load_case_ignorable =
      _ICU4XCodePointSetData_load_case_ignorablePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_full_composition_exclusion(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_full_composition_exclusion(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_full_composition_exclusionPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                      ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XCodePointSetData_load_full_composition_exclusion');
  late final _ICU4XCodePointSetData_load_full_composition_exclusion =
      _ICU4XCodePointSetData_load_full_composition_exclusionPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_changes_when_casefolded(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_changes_when_casefolded(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_changes_when_casefoldedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_changes_when_casefolded');
  late final _ICU4XCodePointSetData_load_changes_when_casefolded =
      _ICU4XCodePointSetData_load_changes_when_casefoldedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_changes_when_casemapped(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_changes_when_casemapped(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_changes_when_casemappedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_changes_when_casemapped');
  late final _ICU4XCodePointSetData_load_changes_when_casemapped =
      _ICU4XCodePointSetData_load_changes_when_casemappedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_changes_when_nfkc_casefolded(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_changes_when_nfkc_casefolded(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_changes_when_nfkc_casefoldedPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                      ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XCodePointSetData_load_changes_when_nfkc_casefolded');
  late final _ICU4XCodePointSetData_load_changes_when_nfkc_casefolded =
      _ICU4XCodePointSetData_load_changes_when_nfkc_casefoldedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_changes_when_lowercased(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_changes_when_lowercased(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_changes_when_lowercasedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_changes_when_lowercased');
  late final _ICU4XCodePointSetData_load_changes_when_lowercased =
      _ICU4XCodePointSetData_load_changes_when_lowercasedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_changes_when_titlecased(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_changes_when_titlecased(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_changes_when_titlecasedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_changes_when_titlecased');
  late final _ICU4XCodePointSetData_load_changes_when_titlecased =
      _ICU4XCodePointSetData_load_changes_when_titlecasedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_changes_when_uppercased(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_changes_when_uppercased(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_changes_when_uppercasedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_changes_when_uppercased');
  late final _ICU4XCodePointSetData_load_changes_when_uppercased =
      _ICU4XCodePointSetData_load_changes_when_uppercasedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_dash(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_dash(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_dashPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_dash');
  late final _ICU4XCodePointSetData_load_dash =
      _ICU4XCodePointSetData_load_dashPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_deprecated(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_deprecated(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_deprecatedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_deprecated');
  late final _ICU4XCodePointSetData_load_deprecated =
      _ICU4XCodePointSetData_load_deprecatedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_default_ignorable_code_point(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_default_ignorable_code_point(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_default_ignorable_code_pointPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                      ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XCodePointSetData_load_default_ignorable_code_point');
  late final _ICU4XCodePointSetData_load_default_ignorable_code_point =
      _ICU4XCodePointSetData_load_default_ignorable_code_pointPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_diacritic(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_diacritic(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_diacriticPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_diacritic');
  late final _ICU4XCodePointSetData_load_diacritic =
      _ICU4XCodePointSetData_load_diacriticPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_emoji_modifier_base(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_emoji_modifier_base(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_emoji_modifier_basePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_emoji_modifier_base');
  late final _ICU4XCodePointSetData_load_emoji_modifier_base =
      _ICU4XCodePointSetData_load_emoji_modifier_basePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_emoji_component(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_emoji_component(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_emoji_componentPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_emoji_component');
  late final _ICU4XCodePointSetData_load_emoji_component =
      _ICU4XCodePointSetData_load_emoji_componentPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_emoji_modifier(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_emoji_modifier(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_emoji_modifierPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_emoji_modifier');
  late final _ICU4XCodePointSetData_load_emoji_modifier =
      _ICU4XCodePointSetData_load_emoji_modifierPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_emoji(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_emoji(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_emojiPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_emoji');
  late final _ICU4XCodePointSetData_load_emoji =
      _ICU4XCodePointSetData_load_emojiPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_emoji_presentation(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_emoji_presentation(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_emoji_presentationPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_emoji_presentation');
  late final _ICU4XCodePointSetData_load_emoji_presentation =
      _ICU4XCodePointSetData_load_emoji_presentationPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_extender(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_extender(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_extenderPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_extender');
  late final _ICU4XCodePointSetData_load_extender =
      _ICU4XCodePointSetData_load_extenderPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_extended_pictographic(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_extended_pictographic(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_extended_pictographicPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_extended_pictographic');
  late final _ICU4XCodePointSetData_load_extended_pictographic =
      _ICU4XCodePointSetData_load_extended_pictographicPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_graph(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_graph(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_graphPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_graph');
  late final _ICU4XCodePointSetData_load_graph =
      _ICU4XCodePointSetData_load_graphPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_grapheme_base(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_grapheme_base(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_grapheme_basePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_grapheme_base');
  late final _ICU4XCodePointSetData_load_grapheme_base =
      _ICU4XCodePointSetData_load_grapheme_basePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_grapheme_extend(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_grapheme_extend(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_grapheme_extendPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_grapheme_extend');
  late final _ICU4XCodePointSetData_load_grapheme_extend =
      _ICU4XCodePointSetData_load_grapheme_extendPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_grapheme_link(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_grapheme_link(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_grapheme_linkPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_grapheme_link');
  late final _ICU4XCodePointSetData_load_grapheme_link =
      _ICU4XCodePointSetData_load_grapheme_linkPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_hex_digit(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_hex_digit(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_hex_digitPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_hex_digit');
  late final _ICU4XCodePointSetData_load_hex_digit =
      _ICU4XCodePointSetData_load_hex_digitPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_hyphen(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_hyphen(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_hyphenPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_hyphen');
  late final _ICU4XCodePointSetData_load_hyphen =
      _ICU4XCodePointSetData_load_hyphenPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_id_continue(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_id_continue(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_id_continuePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_id_continue');
  late final _ICU4XCodePointSetData_load_id_continue =
      _ICU4XCodePointSetData_load_id_continuePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_ideographic(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_ideographic(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_ideographicPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_ideographic');
  late final _ICU4XCodePointSetData_load_ideographic =
      _ICU4XCodePointSetData_load_ideographicPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_id_start(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_id_start(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_id_startPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_id_start');
  late final _ICU4XCodePointSetData_load_id_start =
      _ICU4XCodePointSetData_load_id_startPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_ids_binary_operator(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_ids_binary_operator(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_ids_binary_operatorPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_ids_binary_operator');
  late final _ICU4XCodePointSetData_load_ids_binary_operator =
      _ICU4XCodePointSetData_load_ids_binary_operatorPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_ids_trinary_operator(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_ids_trinary_operator(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_ids_trinary_operatorPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_ids_trinary_operator');
  late final _ICU4XCodePointSetData_load_ids_trinary_operator =
      _ICU4XCodePointSetData_load_ids_trinary_operatorPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_join_control(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_join_control(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_join_controlPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_join_control');
  late final _ICU4XCodePointSetData_load_join_control =
      _ICU4XCodePointSetData_load_join_controlPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_logical_order_exception(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_logical_order_exception(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_logical_order_exceptionPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_logical_order_exception');
  late final _ICU4XCodePointSetData_load_logical_order_exception =
      _ICU4XCodePointSetData_load_logical_order_exceptionPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_lowercase(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_lowercase(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_lowercasePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_lowercase');
  late final _ICU4XCodePointSetData_load_lowercase =
      _ICU4XCodePointSetData_load_lowercasePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_math(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_math(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_mathPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_math');
  late final _ICU4XCodePointSetData_load_math =
      _ICU4XCodePointSetData_load_mathPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_noncharacter_code_point(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_noncharacter_code_point(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_noncharacter_code_pointPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_noncharacter_code_point');
  late final _ICU4XCodePointSetData_load_noncharacter_code_point =
      _ICU4XCodePointSetData_load_noncharacter_code_pointPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_nfc_inert(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_nfc_inert(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_nfc_inertPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_nfc_inert');
  late final _ICU4XCodePointSetData_load_nfc_inert =
      _ICU4XCodePointSetData_load_nfc_inertPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_nfd_inert(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_nfd_inert(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_nfd_inertPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_nfd_inert');
  late final _ICU4XCodePointSetData_load_nfd_inert =
      _ICU4XCodePointSetData_load_nfd_inertPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_nfkc_inert(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_nfkc_inert(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_nfkc_inertPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_nfkc_inert');
  late final _ICU4XCodePointSetData_load_nfkc_inert =
      _ICU4XCodePointSetData_load_nfkc_inertPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_nfkd_inert(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_nfkd_inert(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_nfkd_inertPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_nfkd_inert');
  late final _ICU4XCodePointSetData_load_nfkd_inert =
      _ICU4XCodePointSetData_load_nfkd_inertPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_pattern_syntax(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_pattern_syntax(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_pattern_syntaxPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_pattern_syntax');
  late final _ICU4XCodePointSetData_load_pattern_syntax =
      _ICU4XCodePointSetData_load_pattern_syntaxPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_pattern_white_space(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_pattern_white_space(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_pattern_white_spacePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_pattern_white_space');
  late final _ICU4XCodePointSetData_load_pattern_white_space =
      _ICU4XCodePointSetData_load_pattern_white_spacePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_prepended_concatenation_mark(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_prepended_concatenation_mark(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_prepended_concatenation_markPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                      ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XCodePointSetData_load_prepended_concatenation_mark');
  late final _ICU4XCodePointSetData_load_prepended_concatenation_mark =
      _ICU4XCodePointSetData_load_prepended_concatenation_markPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_print(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_print(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_printPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_print');
  late final _ICU4XCodePointSetData_load_print =
      _ICU4XCodePointSetData_load_printPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_quotation_mark(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_quotation_mark(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_quotation_markPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_quotation_mark');
  late final _ICU4XCodePointSetData_load_quotation_mark =
      _ICU4XCodePointSetData_load_quotation_markPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_radical(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_radical(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_radicalPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_radical');
  late final _ICU4XCodePointSetData_load_radical =
      _ICU4XCodePointSetData_load_radicalPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_regional_indicator(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_regional_indicator(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_regional_indicatorPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_regional_indicator');
  late final _ICU4XCodePointSetData_load_regional_indicator =
      _ICU4XCodePointSetData_load_regional_indicatorPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_soft_dotted(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_soft_dotted(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_soft_dottedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_soft_dotted');
  late final _ICU4XCodePointSetData_load_soft_dotted =
      _ICU4XCodePointSetData_load_soft_dottedPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_segment_starter(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_segment_starter(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_segment_starterPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_segment_starter');
  late final _ICU4XCodePointSetData_load_segment_starter =
      _ICU4XCodePointSetData_load_segment_starterPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_case_sensitive(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_case_sensitive(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_case_sensitivePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_case_sensitive');
  late final _ICU4XCodePointSetData_load_case_sensitive =
      _ICU4XCodePointSetData_load_case_sensitivePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_sentence_terminal(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_sentence_terminal(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_sentence_terminalPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_sentence_terminal');
  late final _ICU4XCodePointSetData_load_sentence_terminal =
      _ICU4XCodePointSetData_load_sentence_terminalPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_terminal_punctuation(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_terminal_punctuation(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_terminal_punctuationPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_terminal_punctuation');
  late final _ICU4XCodePointSetData_load_terminal_punctuation =
      _ICU4XCodePointSetData_load_terminal_punctuationPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_unified_ideograph(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_unified_ideograph(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_unified_ideographPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_unified_ideograph');
  late final _ICU4XCodePointSetData_load_unified_ideograph =
      _ICU4XCodePointSetData_load_unified_ideographPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_uppercase(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_uppercase(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_uppercasePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_uppercase');
  late final _ICU4XCodePointSetData_load_uppercase =
      _ICU4XCodePointSetData_load_uppercasePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_variation_selector(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_variation_selector(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_variation_selectorPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_variation_selector');
  late final _ICU4XCodePointSetData_load_variation_selector =
      _ICU4XCodePointSetData_load_variation_selectorPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_white_space(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_white_space(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_white_spacePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_white_space');
  late final _ICU4XCodePointSetData_load_white_space =
      _ICU4XCodePointSetData_load_white_spacePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_xdigit(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_xdigit(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_xdigitPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_xdigit');
  late final _ICU4XCodePointSetData_load_xdigit =
      _ICU4XCodePointSetData_load_xdigitPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_xid_continue(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_xid_continue(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_xid_continuePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_xid_continue');
  late final _ICU4XCodePointSetData_load_xid_continue =
      _ICU4XCodePointSetData_load_xid_continuePtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_xid_start(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointSetData_load_xid_start(
      provider,
    );
  }

  late final _ICU4XCodePointSetData_load_xid_startPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointSetData_load_xid_start');
  late final _ICU4XCodePointSetData_load_xid_start =
      _ICU4XCodePointSetData_load_xid_startPtr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointSetData_ICU4XError
      ICU4XCodePointSetData_load_for_ecma262(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ffi.Char> property_name_data,
    int property_name_len,
  ) {
    return _ICU4XCodePointSetData_load_for_ecma262(
      provider,
      property_name_data,
      property_name_len,
    );
  }

  late final _ICU4XCodePointSetData_load_for_ecma262Ptr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XCodePointSetData_load_for_ecma262');
  late final _ICU4XCodePointSetData_load_for_ecma262 =
      _ICU4XCodePointSetData_load_for_ecma262Ptr.asFunction<
          diplomat_result_box_ICU4XCodePointSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ffi.Char>, int)>();

  void ICU4XCodePointSetData_destroy(
    ffi.Pointer<ICU4XCodePointSetData> self,
  ) {
    return _ICU4XCodePointSetData_destroy(
      self,
    );
  }

  late final _ICU4XCodePointSetData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCodePointSetData>)>>(
      'ICU4XCodePointSetData_destroy');
  late final _ICU4XCodePointSetData_destroy = _ICU4XCodePointSetData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XCodePointSetData>)>();

  void ICU4XOrdering_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XOrdering_destroy(
      self,
    );
  }

  late final _ICU4XOrdering_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XOrdering_destroy');
  late final _ICU4XOrdering_destroy = _ICU4XOrdering_destroyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  diplomat_result_box_ICU4XLocale_ICU4XError ICU4XLocale_create_from_string(
    ffi.Pointer<ffi.Char> name_data,
    int name_len,
  ) {
    return _ICU4XLocale_create_from_string(
      name_data,
      name_len,
    );
  }

  late final _ICU4XLocale_create_from_stringPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XLocale_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XLocale_create_from_string');
  late final _ICU4XLocale_create_from_string =
      _ICU4XLocale_create_from_stringPtr.asFunction<
          diplomat_result_box_ICU4XLocale_ICU4XError Function(
              ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ICU4XLocale> ICU4XLocale_create_und() {
    return _ICU4XLocale_create_und();
  }

  late final _ICU4XLocale_create_undPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XLocale> Function()>>(
          'ICU4XLocale_create_und');
  late final _ICU4XLocale_create_und = _ICU4XLocale_create_undPtr.asFunction<
      ffi.Pointer<ICU4XLocale> Function()>();

  ffi.Pointer<ICU4XLocale> ICU4XLocale_clone(
    ffi.Pointer<ICU4XLocale> self,
  ) {
    return _ICU4XLocale_clone(
      self,
    );
  }

  late final _ICU4XLocale_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XLocale> Function(
              ffi.Pointer<ICU4XLocale>)>>('ICU4XLocale_clone');
  late final _ICU4XLocale_clone = _ICU4XLocale_clonePtr.asFunction<
      ffi.Pointer<ICU4XLocale> Function(ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_void_ICU4XError ICU4XLocale_basename(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XLocale_basename(
      self,
      write,
    );
  }

  late final _ICU4XLocale_basenamePtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XLocale_basename');
  late final _ICU4XLocale_basename = _ICU4XLocale_basenamePtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XLocale>, ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XLocale_get_unicode_extension(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<ffi.Char> bytes_data,
    int bytes_len,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XLocale_get_unicode_extension(
      self,
      bytes_data,
      bytes_len,
      write,
    );
  }

  late final _ICU4XLocale_get_unicode_extensionPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XLocale>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XLocale_get_unicode_extension');
  late final _ICU4XLocale_get_unicode_extension =
      _ICU4XLocale_get_unicode_extensionPtr.asFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XLocale_language(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XLocale_language(
      self,
      write,
    );
  }

  late final _ICU4XLocale_languagePtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XLocale_language');
  late final _ICU4XLocale_language = _ICU4XLocale_languagePtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XLocale>, ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XLocale_set_language(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<ffi.Char> bytes_data,
    int bytes_len,
  ) {
    return _ICU4XLocale_set_language(
      self,
      bytes_data,
      bytes_len,
    );
  }

  late final _ICU4XLocale_set_languagePtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('ICU4XLocale_set_language');
  late final _ICU4XLocale_set_language =
      _ICU4XLocale_set_languagePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XLocale>, ffi.Pointer<ffi.Char>, int)>();

  diplomat_result_void_ICU4XError ICU4XLocale_region(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XLocale_region(
      self,
      write,
    );
  }

  late final _ICU4XLocale_regionPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XLocale_region');
  late final _ICU4XLocale_region = _ICU4XLocale_regionPtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XLocale>, ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XLocale_set_region(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<ffi.Char> bytes_data,
    int bytes_len,
  ) {
    return _ICU4XLocale_set_region(
      self,
      bytes_data,
      bytes_len,
    );
  }

  late final _ICU4XLocale_set_regionPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('ICU4XLocale_set_region');
  late final _ICU4XLocale_set_region = _ICU4XLocale_set_regionPtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XLocale>, ffi.Pointer<ffi.Char>, int)>();

  diplomat_result_void_ICU4XError ICU4XLocale_script(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XLocale_script(
      self,
      write,
    );
  }

  late final _ICU4XLocale_scriptPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XLocale_script');
  late final _ICU4XLocale_script = _ICU4XLocale_scriptPtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XLocale>, ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XLocale_set_script(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<ffi.Char> bytes_data,
    int bytes_len,
  ) {
    return _ICU4XLocale_set_script(
      self,
      bytes_data,
      bytes_len,
    );
  }

  late final _ICU4XLocale_set_scriptPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('ICU4XLocale_set_script');
  late final _ICU4XLocale_set_script = _ICU4XLocale_set_scriptPtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XLocale>, ffi.Pointer<ffi.Char>, int)>();

  diplomat_result_void_ICU4XError ICU4XLocale_canonicalize(
    ffi.Pointer<ffi.Char> bytes_data,
    int bytes_len,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XLocale_canonicalize(
      bytes_data,
      bytes_len,
      write,
    );
  }

  late final _ICU4XLocale_canonicalizePtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XLocale_canonicalize');
  late final _ICU4XLocale_canonicalize =
      _ICU4XLocale_canonicalizePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XLocale_to_string(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XLocale_to_string(
      self,
      write,
    );
  }

  late final _ICU4XLocale_to_stringPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XLocale_to_string');
  late final _ICU4XLocale_to_string = _ICU4XLocale_to_stringPtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XLocale>, ffi.Pointer<DiplomatWriteable>)>();

  bool ICU4XLocale_normalizing_eq(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<ffi.Char> other_data,
    int other_len,
  ) {
    return _ICU4XLocale_normalizing_eq(
      self,
      other_data,
      other_len,
    );
  }

  late final _ICU4XLocale_normalizing_eqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ICU4XLocale>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XLocale_normalizing_eq');
  late final _ICU4XLocale_normalizing_eq =
      _ICU4XLocale_normalizing_eqPtr.asFunction<
          bool Function(
              ffi.Pointer<ICU4XLocale>, ffi.Pointer<ffi.Char>, int)>();

  int ICU4XLocale_strict_cmp(
    ffi.Pointer<ICU4XLocale> self,
    ffi.Pointer<ffi.Char> other_data,
    int other_len,
  ) {
    return _ICU4XLocale_strict_cmp(
      self,
      other_data,
      other_len,
    );
  }

  late final _ICU4XLocale_strict_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ICU4XLocale>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XLocale_strict_cmp');
  late final _ICU4XLocale_strict_cmp = _ICU4XLocale_strict_cmpPtr.asFunction<
      int Function(ffi.Pointer<ICU4XLocale>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ICU4XLocale> ICU4XLocale_create_en() {
    return _ICU4XLocale_create_en();
  }

  late final _ICU4XLocale_create_enPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XLocale> Function()>>(
          'ICU4XLocale_create_en');
  late final _ICU4XLocale_create_en = _ICU4XLocale_create_enPtr.asFunction<
      ffi.Pointer<ICU4XLocale> Function()>();

  ffi.Pointer<ICU4XLocale> ICU4XLocale_create_bn() {
    return _ICU4XLocale_create_bn();
  }

  late final _ICU4XLocale_create_bnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XLocale> Function()>>(
          'ICU4XLocale_create_bn');
  late final _ICU4XLocale_create_bn = _ICU4XLocale_create_bnPtr.asFunction<
      ffi.Pointer<ICU4XLocale> Function()>();

  void ICU4XLocale_destroy(
    ffi.Pointer<ICU4XLocale> self,
  ) {
    return _ICU4XLocale_destroy(
      self,
    );
  }

  late final _ICU4XLocale_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XLocale>)>>(
          'ICU4XLocale_destroy');
  late final _ICU4XLocale_destroy = _ICU4XLocale_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XLocale>)>();

  void ICU4XTransformResult_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XTransformResult_destroy(
      self,
    );
  }

  late final _ICU4XTransformResult_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XTransformResult_destroy');
  late final _ICU4XTransformResult_destroy = _ICU4XTransformResult_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  diplomat_result_box_ICU4XLocaleCanonicalizer_ICU4XError
      ICU4XLocaleCanonicalizer_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XLocaleCanonicalizer_create(
      provider,
    );
  }

  late final _ICU4XLocaleCanonicalizer_createPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLocaleCanonicalizer_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XLocaleCanonicalizer_create');
  late final _ICU4XLocaleCanonicalizer_create =
      _ICU4XLocaleCanonicalizer_createPtr.asFunction<
          diplomat_result_box_ICU4XLocaleCanonicalizer_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XLocaleCanonicalizer_ICU4XError
      ICU4XLocaleCanonicalizer_create_extended(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XLocaleCanonicalizer_create_extended(
      provider,
    );
  }

  late final _ICU4XLocaleCanonicalizer_create_extendedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLocaleCanonicalizer_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XLocaleCanonicalizer_create_extended');
  late final _ICU4XLocaleCanonicalizer_create_extended =
      _ICU4XLocaleCanonicalizer_create_extendedPtr.asFunction<
          diplomat_result_box_ICU4XLocaleCanonicalizer_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  int ICU4XLocaleCanonicalizer_canonicalize(
    ffi.Pointer<ICU4XLocaleCanonicalizer> self,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XLocaleCanonicalizer_canonicalize(
      self,
      locale,
    );
  }

  late final _ICU4XLocaleCanonicalizer_canonicalizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XLocaleCanonicalizer>,
                  ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XLocaleCanonicalizer_canonicalize');
  late final _ICU4XLocaleCanonicalizer_canonicalize =
      _ICU4XLocaleCanonicalizer_canonicalizePtr.asFunction<
          int Function(ffi.Pointer<ICU4XLocaleCanonicalizer>,
              ffi.Pointer<ICU4XLocale>)>();

  void ICU4XLocaleCanonicalizer_destroy(
    ffi.Pointer<ICU4XLocaleCanonicalizer> self,
  ) {
    return _ICU4XLocaleCanonicalizer_destroy(
      self,
    );
  }

  late final _ICU4XLocaleCanonicalizer_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLocaleCanonicalizer>)>>(
      'ICU4XLocaleCanonicalizer_destroy');
  late final _ICU4XLocaleCanonicalizer_destroy =
      _ICU4XLocaleCanonicalizer_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLocaleCanonicalizer>)>();

  int ICU4XGraphemeClusterBreakIteratorUtf8_next(
    ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8> self,
  ) {
    return _ICU4XGraphemeClusterBreakIteratorUtf8_next(
      self,
    );
  }

  late final _ICU4XGraphemeClusterBreakIteratorUtf8_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8>)>>(
      'ICU4XGraphemeClusterBreakIteratorUtf8_next');
  late final _ICU4XGraphemeClusterBreakIteratorUtf8_next =
      _ICU4XGraphemeClusterBreakIteratorUtf8_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8>)>();

  void ICU4XGraphemeClusterBreakIteratorUtf8_destroy(
    ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8> self,
  ) {
    return _ICU4XGraphemeClusterBreakIteratorUtf8_destroy(
      self,
    );
  }

  late final _ICU4XGraphemeClusterBreakIteratorUtf8_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8>)>>(
      'ICU4XGraphemeClusterBreakIteratorUtf8_destroy');
  late final _ICU4XGraphemeClusterBreakIteratorUtf8_destroy =
      _ICU4XGraphemeClusterBreakIteratorUtf8_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8>)>();

  int ICU4XGraphemeClusterBreakIteratorUtf16_next(
    ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16> self,
  ) {
    return _ICU4XGraphemeClusterBreakIteratorUtf16_next(
      self,
    );
  }

  late final _ICU4XGraphemeClusterBreakIteratorUtf16_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16>)>>(
      'ICU4XGraphemeClusterBreakIteratorUtf16_next');
  late final _ICU4XGraphemeClusterBreakIteratorUtf16_next =
      _ICU4XGraphemeClusterBreakIteratorUtf16_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16>)>();

  void ICU4XGraphemeClusterBreakIteratorUtf16_destroy(
    ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16> self,
  ) {
    return _ICU4XGraphemeClusterBreakIteratorUtf16_destroy(
      self,
    );
  }

  late final _ICU4XGraphemeClusterBreakIteratorUtf16_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16>)>>(
      'ICU4XGraphemeClusterBreakIteratorUtf16_destroy');
  late final _ICU4XGraphemeClusterBreakIteratorUtf16_destroy =
      _ICU4XGraphemeClusterBreakIteratorUtf16_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16>)>();

  int ICU4XGraphemeClusterBreakIteratorLatin1_next(
    ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1> self,
  ) {
    return _ICU4XGraphemeClusterBreakIteratorLatin1_next(
      self,
    );
  }

  late final _ICU4XGraphemeClusterBreakIteratorLatin1_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1>)>>(
      'ICU4XGraphemeClusterBreakIteratorLatin1_next');
  late final _ICU4XGraphemeClusterBreakIteratorLatin1_next =
      _ICU4XGraphemeClusterBreakIteratorLatin1_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1>)>();

  void ICU4XGraphemeClusterBreakIteratorLatin1_destroy(
    ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1> self,
  ) {
    return _ICU4XGraphemeClusterBreakIteratorLatin1_destroy(
      self,
    );
  }

  late final _ICU4XGraphemeClusterBreakIteratorLatin1_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1>)>>(
      'ICU4XGraphemeClusterBreakIteratorLatin1_destroy');
  late final _ICU4XGraphemeClusterBreakIteratorLatin1_destroy =
      _ICU4XGraphemeClusterBreakIteratorLatin1_destroyPtr.asFunction<
          void Function(
              ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1>)>();

  diplomat_result_box_ICU4XGraphemeClusterSegmenter_ICU4XError
      ICU4XGraphemeClusterSegmenter_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XGraphemeClusterSegmenter_create(
      provider,
    );
  }

  late final _ICU4XGraphemeClusterSegmenter_createPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XGraphemeClusterSegmenter_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XGraphemeClusterSegmenter_create');
  late final _ICU4XGraphemeClusterSegmenter_create =
      _ICU4XGraphemeClusterSegmenter_createPtr.asFunction<
          diplomat_result_box_ICU4XGraphemeClusterSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8>
      ICU4XGraphemeClusterSegmenter_segment_utf8(
    ffi.Pointer<ICU4XGraphemeClusterSegmenter> self,
    ffi.Pointer<ffi.Char> input_data,
    int input_len,
  ) {
    return _ICU4XGraphemeClusterSegmenter_segment_utf8(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XGraphemeClusterSegmenter_segment_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8> Function(
              ffi.Pointer<ICU4XGraphemeClusterSegmenter>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XGraphemeClusterSegmenter_segment_utf8');
  late final _ICU4XGraphemeClusterSegmenter_segment_utf8 =
      _ICU4XGraphemeClusterSegmenter_segment_utf8Ptr.asFunction<
          ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf8> Function(
              ffi.Pointer<ICU4XGraphemeClusterSegmenter>,
              ffi.Pointer<ffi.Char>,
              int)>();

  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16>
      ICU4XGraphemeClusterSegmenter_segment_utf16(
    ffi.Pointer<ICU4XGraphemeClusterSegmenter> self,
    ffi.Pointer<ffi.Uint16> input_data,
    int input_len,
  ) {
    return _ICU4XGraphemeClusterSegmenter_segment_utf16(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XGraphemeClusterSegmenter_segment_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16> Function(
              ffi.Pointer<ICU4XGraphemeClusterSegmenter>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Size)>>('ICU4XGraphemeClusterSegmenter_segment_utf16');
  late final _ICU4XGraphemeClusterSegmenter_segment_utf16 =
      _ICU4XGraphemeClusterSegmenter_segment_utf16Ptr.asFunction<
          ffi.Pointer<ICU4XGraphemeClusterBreakIteratorUtf16> Function(
              ffi.Pointer<ICU4XGraphemeClusterSegmenter>,
              ffi.Pointer<ffi.Uint16>,
              int)>();

  ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1>
      ICU4XGraphemeClusterSegmenter_segment_latin1(
    ffi.Pointer<ICU4XGraphemeClusterSegmenter> self,
    ffi.Pointer<ffi.Uint8> input_data,
    int input_len,
  ) {
    return _ICU4XGraphemeClusterSegmenter_segment_latin1(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XGraphemeClusterSegmenter_segment_latin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1> Function(
              ffi.Pointer<ICU4XGraphemeClusterSegmenter>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('ICU4XGraphemeClusterSegmenter_segment_latin1');
  late final _ICU4XGraphemeClusterSegmenter_segment_latin1 =
      _ICU4XGraphemeClusterSegmenter_segment_latin1Ptr.asFunction<
          ffi.Pointer<ICU4XGraphemeClusterBreakIteratorLatin1> Function(
              ffi.Pointer<ICU4XGraphemeClusterSegmenter>,
              ffi.Pointer<ffi.Uint8>,
              int)>();

  void ICU4XGraphemeClusterSegmenter_destroy(
    ffi.Pointer<ICU4XGraphemeClusterSegmenter> self,
  ) {
    return _ICU4XGraphemeClusterSegmenter_destroy(
      self,
    );
  }

  late final _ICU4XGraphemeClusterSegmenter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XGraphemeClusterSegmenter>)>>(
      'ICU4XGraphemeClusterSegmenter_destroy');
  late final _ICU4XGraphemeClusterSegmenter_destroy =
      _ICU4XGraphemeClusterSegmenter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XGraphemeClusterSegmenter>)>();

  diplomat_result_box_ICU4XPluralOperands_ICU4XError
      ICU4XPluralOperands_create_from_string(
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
  ) {
    return _ICU4XPluralOperands_create_from_string(
      s_data,
      s_len,
    );
  }

  late final _ICU4XPluralOperands_create_from_stringPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XPluralOperands_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XPluralOperands_create_from_string');
  late final _ICU4XPluralOperands_create_from_string =
      _ICU4XPluralOperands_create_from_stringPtr.asFunction<
          diplomat_result_box_ICU4XPluralOperands_ICU4XError Function(
              ffi.Pointer<ffi.Char>, int)>();

  void ICU4XPluralOperands_destroy(
    ffi.Pointer<ICU4XPluralOperands> self,
  ) {
    return _ICU4XPluralOperands_destroy(
      self,
    );
  }

  late final _ICU4XPluralOperands_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XPluralOperands>)>>(
      'ICU4XPluralOperands_destroy');
  late final _ICU4XPluralOperands_destroy = _ICU4XPluralOperands_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XPluralOperands>)>();

  diplomat_result_ICU4XPluralCategory_void
      ICU4XPluralCategory_get_for_cldr_string(
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
  ) {
    return _ICU4XPluralCategory_get_for_cldr_string(
      s_data,
      s_len,
    );
  }

  late final _ICU4XPluralCategory_get_for_cldr_stringPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_ICU4XPluralCategory_void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XPluralCategory_get_for_cldr_string');
  late final _ICU4XPluralCategory_get_for_cldr_string =
      _ICU4XPluralCategory_get_for_cldr_stringPtr.asFunction<
          diplomat_result_ICU4XPluralCategory_void Function(
              ffi.Pointer<ffi.Char>, int)>();

  void ICU4XPluralCategory_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XPluralCategory_destroy(
      self,
    );
  }

  late final _ICU4XPluralCategory_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XPluralCategory_destroy');
  late final _ICU4XPluralCategory_destroy = _ICU4XPluralCategory_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XPluralCategories_destroy(
    ffi.Pointer<ICU4XPluralCategories> self,
  ) {
    return _ICU4XPluralCategories_destroy(
      self,
    );
  }

  late final _ICU4XPluralCategories_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XPluralCategories>)>>(
      'ICU4XPluralCategories_destroy');
  late final _ICU4XPluralCategories_destroy = _ICU4XPluralCategories_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XPluralCategories>)>();

  diplomat_result_box_ICU4XPluralRules_ICU4XError
      ICU4XPluralRules_create_cardinal(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XPluralRules_create_cardinal(
      provider,
      locale,
    );
  }

  late final _ICU4XPluralRules_create_cardinalPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XPluralRules_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>)>>('ICU4XPluralRules_create_cardinal');
  late final _ICU4XPluralRules_create_cardinal =
      _ICU4XPluralRules_create_cardinalPtr.asFunction<
          diplomat_result_box_ICU4XPluralRules_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_box_ICU4XPluralRules_ICU4XError
      ICU4XPluralRules_create_ordinal(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XPluralRules_create_ordinal(
      provider,
      locale,
    );
  }

  late final _ICU4XPluralRules_create_ordinalPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XPluralRules_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>)>>('ICU4XPluralRules_create_ordinal');
  late final _ICU4XPluralRules_create_ordinal =
      _ICU4XPluralRules_create_ordinalPtr.asFunction<
          diplomat_result_box_ICU4XPluralRules_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  int ICU4XPluralRules_category_for(
    ffi.Pointer<ICU4XPluralRules> self,
    ffi.Pointer<ICU4XPluralOperands> op,
  ) {
    return _ICU4XPluralRules_category_for(
      self,
      op,
    );
  }

  late final _ICU4XPluralRules_category_forPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XPluralRules>,
                  ffi.Pointer<ICU4XPluralOperands>)>>(
      'ICU4XPluralRules_category_for');
  late final _ICU4XPluralRules_category_for =
      _ICU4XPluralRules_category_forPtr.asFunction<
          int Function(ffi.Pointer<ICU4XPluralRules>,
              ffi.Pointer<ICU4XPluralOperands>)>();

  ICU4XPluralCategories ICU4XPluralRules_categories(
    ffi.Pointer<ICU4XPluralRules> self,
  ) {
    return _ICU4XPluralRules_categories(
      self,
    );
  }

  late final _ICU4XPluralRules_categoriesPtr = _lookup<
      ffi.NativeFunction<
          ICU4XPluralCategories Function(
              ffi.Pointer<ICU4XPluralRules>)>>('ICU4XPluralRules_categories');
  late final _ICU4XPluralRules_categories =
      _ICU4XPluralRules_categoriesPtr.asFunction<
          ICU4XPluralCategories Function(ffi.Pointer<ICU4XPluralRules>)>();

  void ICU4XPluralRules_destroy(
    ffi.Pointer<ICU4XPluralRules> self,
  ) {
    return _ICU4XPluralRules_destroy(
      self,
    );
  }

  late final _ICU4XPluralRules_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XPluralRules>)>>(
      'ICU4XPluralRules_destroy');
  late final _ICU4XPluralRules_destroy = _ICU4XPluralRules_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XPluralRules>)>();

  void ICU4XWeekRelativeUnit_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XWeekRelativeUnit_destroy(
      self,
    );
  }

  late final _ICU4XWeekRelativeUnit_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XWeekRelativeUnit_destroy');
  late final _ICU4XWeekRelativeUnit_destroy = _ICU4XWeekRelativeUnit_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XTimeLength_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XTimeLength_destroy(
      self,
    );
  }

  late final _ICU4XTimeLength_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XTimeLength_destroy');
  late final _ICU4XTimeLength_destroy = _ICU4XTimeLength_destroyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  diplomat_result_box_ICU4XMetazoneCalculator_ICU4XError
      ICU4XMetazoneCalculator_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XMetazoneCalculator_create(
      provider,
    );
  }

  late final _ICU4XMetazoneCalculator_createPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XMetazoneCalculator_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XMetazoneCalculator_create');
  late final _ICU4XMetazoneCalculator_create =
      _ICU4XMetazoneCalculator_createPtr.asFunction<
          diplomat_result_box_ICU4XMetazoneCalculator_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  void ICU4XMetazoneCalculator_destroy(
    ffi.Pointer<ICU4XMetazoneCalculator> self,
  ) {
    return _ICU4XMetazoneCalculator_destroy(
      self,
    );
  }

  late final _ICU4XMetazoneCalculator_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XMetazoneCalculator>)>>(
      'ICU4XMetazoneCalculator_destroy');
  late final _ICU4XMetazoneCalculator_destroy =
      _ICU4XMetazoneCalculator_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XMetazoneCalculator>)>();

  diplomat_result_ICU4XAnyCalendarKind_void ICU4XAnyCalendarKind_get_for_locale(
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XAnyCalendarKind_get_for_locale(
      locale,
    );
  }

  late final _ICU4XAnyCalendarKind_get_for_localePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_ICU4XAnyCalendarKind_void Function(
                  ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XAnyCalendarKind_get_for_locale');
  late final _ICU4XAnyCalendarKind_get_for_locale =
      _ICU4XAnyCalendarKind_get_for_localePtr.asFunction<
          diplomat_result_ICU4XAnyCalendarKind_void Function(
              ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_ICU4XAnyCalendarKind_void ICU4XAnyCalendarKind_get_for_bcp47(
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
  ) {
    return _ICU4XAnyCalendarKind_get_for_bcp47(
      s_data,
      s_len,
    );
  }

  late final _ICU4XAnyCalendarKind_get_for_bcp47Ptr = _lookup<
      ffi.NativeFunction<
          diplomat_result_ICU4XAnyCalendarKind_void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XAnyCalendarKind_get_for_bcp47');
  late final _ICU4XAnyCalendarKind_get_for_bcp47 =
      _ICU4XAnyCalendarKind_get_for_bcp47Ptr.asFunction<
          diplomat_result_ICU4XAnyCalendarKind_void Function(
              ffi.Pointer<ffi.Char>, int)>();

  diplomat_result_void_ICU4XError ICU4XAnyCalendarKind_bcp47(
    int self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XAnyCalendarKind_bcp47(
      self,
      write,
    );
  }

  late final _ICU4XAnyCalendarKind_bcp47Ptr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Int32,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XAnyCalendarKind_bcp47');
  late final _ICU4XAnyCalendarKind_bcp47 =
      _ICU4XAnyCalendarKind_bcp47Ptr.asFunction<
          diplomat_result_void_ICU4XError Function(
              int, ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XAnyCalendarKind_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XAnyCalendarKind_destroy(
      self,
    );
  }

  late final _ICU4XAnyCalendarKind_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XAnyCalendarKind_destroy');
  late final _ICU4XAnyCalendarKind_destroy = _ICU4XAnyCalendarKind_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  diplomat_result_box_ICU4XCalendar_ICU4XError ICU4XCalendar_create_for_locale(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XCalendar_create_for_locale(
      provider,
      locale,
    );
  }

  late final _ICU4XCalendar_create_for_localePtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XCalendar_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>)>>('ICU4XCalendar_create_for_locale');
  late final _ICU4XCalendar_create_for_locale =
      _ICU4XCalendar_create_for_localePtr.asFunction<
          diplomat_result_box_ICU4XCalendar_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_box_ICU4XCalendar_ICU4XError ICU4XCalendar_create_for_kind(
    ffi.Pointer<ICU4XDataProvider> provider,
    int kind,
  ) {
    return _ICU4XCalendar_create_for_kind(
      provider,
      kind,
    );
  }

  late final _ICU4XCalendar_create_for_kindPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XCalendar_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Int32)>>('ICU4XCalendar_create_for_kind');
  late final _ICU4XCalendar_create_for_kind =
      _ICU4XCalendar_create_for_kindPtr.asFunction<
          diplomat_result_box_ICU4XCalendar_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, int)>();

  int ICU4XCalendar_kind(
    ffi.Pointer<ICU4XCalendar> self,
  ) {
    return _ICU4XCalendar_kind(
      self,
    );
  }

  late final _ICU4XCalendar_kindPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ICU4XCalendar>)>>(
      'ICU4XCalendar_kind');
  late final _ICU4XCalendar_kind = _ICU4XCalendar_kindPtr.asFunction<
      int Function(ffi.Pointer<ICU4XCalendar>)>();

  void ICU4XCalendar_destroy(
    ffi.Pointer<ICU4XCalendar> self,
  ) {
    return _ICU4XCalendar_destroy(
      self,
    );
  }

  late final _ICU4XCalendar_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XCalendar>)>>(
      'ICU4XCalendar_destroy');
  late final _ICU4XCalendar_destroy = _ICU4XCalendar_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XCalendar>)>();

  void ICU4XIsoWeekday_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XIsoWeekday_destroy(
      self,
    );
  }

  late final _ICU4XIsoWeekday_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XIsoWeekday_destroy');
  late final _ICU4XIsoWeekday_destroy = _ICU4XIsoWeekday_destroyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  diplomat_result_box_ICU4XWeekCalculator_ICU4XError ICU4XWeekCalculator_create(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XWeekCalculator_create(
      provider,
      locale,
    );
  }

  late final _ICU4XWeekCalculator_createPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XWeekCalculator_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>)>>('ICU4XWeekCalculator_create');
  late final _ICU4XWeekCalculator_create =
      _ICU4XWeekCalculator_createPtr.asFunction<
          diplomat_result_box_ICU4XWeekCalculator_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  ffi.Pointer<ICU4XWeekCalculator>
      ICU4XWeekCalculator_create_from_first_day_of_week_and_min_week_days(
    int first_weekday,
    int min_week_days,
  ) {
    return _ICU4XWeekCalculator_create_from_first_day_of_week_and_min_week_days(
      first_weekday,
      min_week_days,
    );
  }

  late final _ICU4XWeekCalculator_create_from_first_day_of_week_and_min_week_daysPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ICU4XWeekCalculator> Function(
                      ffi.Int32, ffi.Uint8)>>(
          'ICU4XWeekCalculator_create_from_first_day_of_week_and_min_week_days');
  late final _ICU4XWeekCalculator_create_from_first_day_of_week_and_min_week_days =
      _ICU4XWeekCalculator_create_from_first_day_of_week_and_min_week_daysPtr
          .asFunction<ffi.Pointer<ICU4XWeekCalculator> Function(int, int)>();

  int ICU4XWeekCalculator_first_weekday(
    ffi.Pointer<ICU4XWeekCalculator> self,
  ) {
    return _ICU4XWeekCalculator_first_weekday(
      self,
    );
  }

  late final _ICU4XWeekCalculator_first_weekdayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XWeekCalculator>)>>(
      'ICU4XWeekCalculator_first_weekday');
  late final _ICU4XWeekCalculator_first_weekday =
      _ICU4XWeekCalculator_first_weekdayPtr.asFunction<
          int Function(ffi.Pointer<ICU4XWeekCalculator>)>();

  int ICU4XWeekCalculator_min_week_days(
    ffi.Pointer<ICU4XWeekCalculator> self,
  ) {
    return _ICU4XWeekCalculator_min_week_days(
      self,
    );
  }

  late final _ICU4XWeekCalculator_min_week_daysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ICU4XWeekCalculator>)>>(
      'ICU4XWeekCalculator_min_week_days');
  late final _ICU4XWeekCalculator_min_week_days =
      _ICU4XWeekCalculator_min_week_daysPtr.asFunction<
          int Function(ffi.Pointer<ICU4XWeekCalculator>)>();

  void ICU4XWeekCalculator_destroy(
    ffi.Pointer<ICU4XWeekCalculator> self,
  ) {
    return _ICU4XWeekCalculator_destroy(
      self,
    );
  }

  late final _ICU4XWeekCalculator_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XWeekCalculator>)>>(
      'ICU4XWeekCalculator_destroy');
  late final _ICU4XWeekCalculator_destroy = _ICU4XWeekCalculator_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XWeekCalculator>)>();

  void ICU4XWeekOf_destroy(
    ffi.Pointer<ICU4XWeekOf> self,
  ) {
    return _ICU4XWeekOf_destroy(
      self,
    );
  }

  late final _ICU4XWeekOf_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XWeekOf>)>>(
          'ICU4XWeekOf_destroy');
  late final _ICU4XWeekOf_destroy = _ICU4XWeekOf_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XWeekOf>)>();

  diplomat_result_box_ICU4XIsoDate_ICU4XError ICU4XIsoDate_create(
    int year,
    int month,
    int day,
  ) {
    return _ICU4XIsoDate_create(
      year,
      month,
      day,
    );
  }

  late final _ICU4XIsoDate_createPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XIsoDate_ICU4XError Function(
              ffi.Int32, ffi.Uint8, ffi.Uint8)>>('ICU4XIsoDate_create');
  late final _ICU4XIsoDate_create = _ICU4XIsoDate_createPtr.asFunction<
      diplomat_result_box_ICU4XIsoDate_ICU4XError Function(int, int, int)>();

  ffi.Pointer<ICU4XDate> ICU4XIsoDate_to_calendar(
    ffi.Pointer<ICU4XIsoDate> self,
    ffi.Pointer<ICU4XCalendar> calendar,
  ) {
    return _ICU4XIsoDate_to_calendar(
      self,
      calendar,
    );
  }

  late final _ICU4XIsoDate_to_calendarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XDate> Function(ffi.Pointer<ICU4XIsoDate>,
              ffi.Pointer<ICU4XCalendar>)>>('ICU4XIsoDate_to_calendar');
  late final _ICU4XIsoDate_to_calendar =
      _ICU4XIsoDate_to_calendarPtr.asFunction<
          ffi.Pointer<ICU4XDate> Function(
              ffi.Pointer<ICU4XIsoDate>, ffi.Pointer<ICU4XCalendar>)>();

  ffi.Pointer<ICU4XDate> ICU4XIsoDate_to_any(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_to_any(
      self,
    );
  }

  late final _ICU4XIsoDate_to_anyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XDate> Function(
              ffi.Pointer<ICU4XIsoDate>)>>('ICU4XIsoDate_to_any');
  late final _ICU4XIsoDate_to_any = _ICU4XIsoDate_to_anyPtr.asFunction<
      ffi.Pointer<ICU4XDate> Function(ffi.Pointer<ICU4XIsoDate>)>();

  int ICU4XIsoDate_day_of_month(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_day_of_month(
      self,
    );
  }

  late final _ICU4XIsoDate_day_of_monthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XIsoDate>)>>(
      'ICU4XIsoDate_day_of_month');
  late final _ICU4XIsoDate_day_of_month = _ICU4XIsoDate_day_of_monthPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDate>)>();

  int ICU4XIsoDate_day_of_week(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_day_of_week(
      self,
    );
  }

  late final _ICU4XIsoDate_day_of_weekPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ICU4XIsoDate>)>>(
      'ICU4XIsoDate_day_of_week');
  late final _ICU4XIsoDate_day_of_week = _ICU4XIsoDate_day_of_weekPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDate>)>();

  int ICU4XIsoDate_week_of_month(
    ffi.Pointer<ICU4XIsoDate> self,
    int first_weekday,
  ) {
    return _ICU4XIsoDate_week_of_month(
      self,
      first_weekday,
    );
  }

  late final _ICU4XIsoDate_week_of_monthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ICU4XIsoDate>,
              ffi.Int32)>>('ICU4XIsoDate_week_of_month');
  late final _ICU4XIsoDate_week_of_month = _ICU4XIsoDate_week_of_monthPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDate>, int)>();

  diplomat_result_ICU4XWeekOf_ICU4XError ICU4XIsoDate_week_of_year(
    ffi.Pointer<ICU4XIsoDate> self,
    ffi.Pointer<ICU4XWeekCalculator> calculator,
  ) {
    return _ICU4XIsoDate_week_of_year(
      self,
      calculator,
    );
  }

  late final _ICU4XIsoDate_week_of_yearPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_ICU4XWeekOf_ICU4XError Function(
              ffi.Pointer<ICU4XIsoDate>,
              ffi.Pointer<ICU4XWeekCalculator>)>>('ICU4XIsoDate_week_of_year');
  late final _ICU4XIsoDate_week_of_year =
      _ICU4XIsoDate_week_of_yearPtr.asFunction<
          diplomat_result_ICU4XWeekOf_ICU4XError Function(
              ffi.Pointer<ICU4XIsoDate>, ffi.Pointer<ICU4XWeekCalculator>)>();

  int ICU4XIsoDate_month(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_month(
      self,
    );
  }

  late final _ICU4XIsoDate_monthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XIsoDate>)>>(
      'ICU4XIsoDate_month');
  late final _ICU4XIsoDate_month = _ICU4XIsoDate_monthPtr.asFunction<
      int Function(ffi.Pointer<ICU4XIsoDate>)>();

  int ICU4XIsoDate_year(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_year(
      self,
    );
  }

  late final _ICU4XIsoDate_yearPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ICU4XIsoDate>)>>(
      'ICU4XIsoDate_year');
  late final _ICU4XIsoDate_year = _ICU4XIsoDate_yearPtr.asFunction<
      int Function(ffi.Pointer<ICU4XIsoDate>)>();

  int ICU4XIsoDate_months_in_year(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_months_in_year(
      self,
    );
  }

  late final _ICU4XIsoDate_months_in_yearPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XIsoDate>)>>(
      'ICU4XIsoDate_months_in_year');
  late final _ICU4XIsoDate_months_in_year = _ICU4XIsoDate_months_in_yearPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDate>)>();

  int ICU4XIsoDate_days_in_month(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_days_in_month(
      self,
    );
  }

  late final _ICU4XIsoDate_days_in_monthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XIsoDate>)>>(
      'ICU4XIsoDate_days_in_month');
  late final _ICU4XIsoDate_days_in_month = _ICU4XIsoDate_days_in_monthPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDate>)>();

  int ICU4XIsoDate_days_in_year(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_days_in_year(
      self,
    );
  }

  late final _ICU4XIsoDate_days_in_yearPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XIsoDate>)>>(
      'ICU4XIsoDate_days_in_year');
  late final _ICU4XIsoDate_days_in_year = _ICU4XIsoDate_days_in_yearPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDate>)>();

  void ICU4XIsoDate_destroy(
    ffi.Pointer<ICU4XIsoDate> self,
  ) {
    return _ICU4XIsoDate_destroy(
      self,
    );
  }

  late final _ICU4XIsoDate_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XIsoDate>)>>(
          'ICU4XIsoDate_destroy');
  late final _ICU4XIsoDate_destroy = _ICU4XIsoDate_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XIsoDate>)>();

  diplomat_result_box_ICU4XDate_ICU4XError
      ICU4XDate_create_from_iso_in_calendar(
    int year,
    int month,
    int day,
    ffi.Pointer<ICU4XCalendar> calendar,
  ) {
    return _ICU4XDate_create_from_iso_in_calendar(
      year,
      month,
      day,
      calendar,
    );
  }

  late final _ICU4XDate_create_from_iso_in_calendarPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XDate_ICU4XError Function(ffi.Int32,
                  ffi.Uint8, ffi.Uint8, ffi.Pointer<ICU4XCalendar>)>>(
      'ICU4XDate_create_from_iso_in_calendar');
  late final _ICU4XDate_create_from_iso_in_calendar =
      _ICU4XDate_create_from_iso_in_calendarPtr.asFunction<
          diplomat_result_box_ICU4XDate_ICU4XError Function(
              int, int, int, ffi.Pointer<ICU4XCalendar>)>();

  diplomat_result_box_ICU4XDate_ICU4XError
      ICU4XDate_create_from_codes_in_calendar(
    ffi.Pointer<ffi.Char> era_code_data,
    int era_code_len,
    int year,
    ffi.Pointer<ffi.Char> month_code_data,
    int month_code_len,
    int day,
    ffi.Pointer<ICU4XCalendar> calendar,
  ) {
    return _ICU4XDate_create_from_codes_in_calendar(
      era_code_data,
      era_code_len,
      year,
      month_code_data,
      month_code_len,
      day,
      calendar,
    );
  }

  late final _ICU4XDate_create_from_codes_in_calendarPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XDate_ICU4XError Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Int32,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Uint8,
                  ffi.Pointer<ICU4XCalendar>)>>(
      'ICU4XDate_create_from_codes_in_calendar');
  late final _ICU4XDate_create_from_codes_in_calendar =
      _ICU4XDate_create_from_codes_in_calendarPtr.asFunction<
          diplomat_result_box_ICU4XDate_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ICU4XCalendar>)>();

  ffi.Pointer<ICU4XDate> ICU4XDate_to_calendar(
    ffi.Pointer<ICU4XDate> self,
    ffi.Pointer<ICU4XCalendar> calendar,
  ) {
    return _ICU4XDate_to_calendar(
      self,
      calendar,
    );
  }

  late final _ICU4XDate_to_calendarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XDate> Function(ffi.Pointer<ICU4XDate>,
              ffi.Pointer<ICU4XCalendar>)>>('ICU4XDate_to_calendar');
  late final _ICU4XDate_to_calendar = _ICU4XDate_to_calendarPtr.asFunction<
      ffi.Pointer<ICU4XDate> Function(
          ffi.Pointer<ICU4XDate>, ffi.Pointer<ICU4XCalendar>)>();

  ffi.Pointer<ICU4XIsoDate> ICU4XDate_to_iso(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_to_iso(
      self,
    );
  }

  late final _ICU4XDate_to_isoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XIsoDate> Function(
              ffi.Pointer<ICU4XDate>)>>('ICU4XDate_to_iso');
  late final _ICU4XDate_to_iso = _ICU4XDate_to_isoPtr.asFunction<
      ffi.Pointer<ICU4XIsoDate> Function(ffi.Pointer<ICU4XDate>)>();

  int ICU4XDate_day_of_month(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_day_of_month(
      self,
    );
  }

  late final _ICU4XDate_day_of_monthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XDate>)>>(
          'ICU4XDate_day_of_month');
  late final _ICU4XDate_day_of_month = _ICU4XDate_day_of_monthPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDate>)>();

  int ICU4XDate_day_of_week(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_day_of_week(
      self,
    );
  }

  late final _ICU4XDate_day_of_weekPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ICU4XDate>)>>(
          'ICU4XDate_day_of_week');
  late final _ICU4XDate_day_of_week = _ICU4XDate_day_of_weekPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDate>)>();

  int ICU4XDate_week_of_month(
    ffi.Pointer<ICU4XDate> self,
    int first_weekday,
  ) {
    return _ICU4XDate_week_of_month(
      self,
      first_weekday,
    );
  }

  late final _ICU4XDate_week_of_monthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ICU4XDate>, ffi.Int32)>>('ICU4XDate_week_of_month');
  late final _ICU4XDate_week_of_month = _ICU4XDate_week_of_monthPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDate>, int)>();

  diplomat_result_ICU4XWeekOf_ICU4XError ICU4XDate_week_of_year(
    ffi.Pointer<ICU4XDate> self,
    ffi.Pointer<ICU4XWeekCalculator> calculator,
  ) {
    return _ICU4XDate_week_of_year(
      self,
      calculator,
    );
  }

  late final _ICU4XDate_week_of_yearPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_ICU4XWeekOf_ICU4XError Function(
              ffi.Pointer<ICU4XDate>,
              ffi.Pointer<ICU4XWeekCalculator>)>>('ICU4XDate_week_of_year');
  late final _ICU4XDate_week_of_year = _ICU4XDate_week_of_yearPtr.asFunction<
      diplomat_result_ICU4XWeekOf_ICU4XError Function(
          ffi.Pointer<ICU4XDate>, ffi.Pointer<ICU4XWeekCalculator>)>();

  int ICU4XDate_ordinal_month(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_ordinal_month(
      self,
    );
  }

  late final _ICU4XDate_ordinal_monthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XDate>)>>(
          'ICU4XDate_ordinal_month');
  late final _ICU4XDate_ordinal_month = _ICU4XDate_ordinal_monthPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDate>)>();

  diplomat_result_void_ICU4XError ICU4XDate_month_code(
    ffi.Pointer<ICU4XDate> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDate_month_code(
      self,
      write,
    );
  }

  late final _ICU4XDate_month_codePtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XDate>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XDate_month_code');
  late final _ICU4XDate_month_code = _ICU4XDate_month_codePtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XDate>, ffi.Pointer<DiplomatWriteable>)>();

  int ICU4XDate_year_in_era(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_year_in_era(
      self,
    );
  }

  late final _ICU4XDate_year_in_eraPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ICU4XDate>)>>(
          'ICU4XDate_year_in_era');
  late final _ICU4XDate_year_in_era = _ICU4XDate_year_in_eraPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDate>)>();

  diplomat_result_void_ICU4XError ICU4XDate_era(
    ffi.Pointer<ICU4XDate> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDate_era(
      self,
      write,
    );
  }

  late final _ICU4XDate_eraPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XDate>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XDate_era');
  late final _ICU4XDate_era = _ICU4XDate_eraPtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XDate>, ffi.Pointer<DiplomatWriteable>)>();

  int ICU4XDate_months_in_year(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_months_in_year(
      self,
    );
  }

  late final _ICU4XDate_months_in_yearPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XDate>)>>(
          'ICU4XDate_months_in_year');
  late final _ICU4XDate_months_in_year = _ICU4XDate_months_in_yearPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDate>)>();

  int ICU4XDate_days_in_month(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_days_in_month(
      self,
    );
  }

  late final _ICU4XDate_days_in_monthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XDate>)>>(
          'ICU4XDate_days_in_month');
  late final _ICU4XDate_days_in_month = _ICU4XDate_days_in_monthPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDate>)>();

  int ICU4XDate_days_in_year(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_days_in_year(
      self,
    );
  }

  late final _ICU4XDate_days_in_yearPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XDate>)>>(
          'ICU4XDate_days_in_year');
  late final _ICU4XDate_days_in_year = _ICU4XDate_days_in_yearPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDate>)>();

  ffi.Pointer<ICU4XCalendar> ICU4XDate_calendar(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_calendar(
      self,
    );
  }

  late final _ICU4XDate_calendarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XCalendar> Function(
              ffi.Pointer<ICU4XDate>)>>('ICU4XDate_calendar');
  late final _ICU4XDate_calendar = _ICU4XDate_calendarPtr.asFunction<
      ffi.Pointer<ICU4XCalendar> Function(ffi.Pointer<ICU4XDate>)>();

  void ICU4XDate_destroy(
    ffi.Pointer<ICU4XDate> self,
  ) {
    return _ICU4XDate_destroy(
      self,
    );
  }

  late final _ICU4XDate_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XDate>)>>(
          'ICU4XDate_destroy');
  late final _ICU4XDate_destroy =
      _ICU4XDate_destroyPtr.asFunction<void Function(ffi.Pointer<ICU4XDate>)>();

  int ICU4XSentenceBreakIteratorLatin1_next(
    ffi.Pointer<ICU4XSentenceBreakIteratorLatin1> self,
  ) {
    return _ICU4XSentenceBreakIteratorLatin1_next(
      self,
    );
  }

  late final _ICU4XSentenceBreakIteratorLatin1_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ICU4XSentenceBreakIteratorLatin1>)>>(
      'ICU4XSentenceBreakIteratorLatin1_next');
  late final _ICU4XSentenceBreakIteratorLatin1_next =
      _ICU4XSentenceBreakIteratorLatin1_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XSentenceBreakIteratorLatin1>)>();

  void ICU4XSentenceBreakIteratorLatin1_destroy(
    ffi.Pointer<ICU4XSentenceBreakIteratorLatin1> self,
  ) {
    return _ICU4XSentenceBreakIteratorLatin1_destroy(
      self,
    );
  }

  late final _ICU4XSentenceBreakIteratorLatin1_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XSentenceBreakIteratorLatin1>)>>(
      'ICU4XSentenceBreakIteratorLatin1_destroy');
  late final _ICU4XSentenceBreakIteratorLatin1_destroy =
      _ICU4XSentenceBreakIteratorLatin1_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XSentenceBreakIteratorLatin1>)>();

  void ICU4XDisplayNamesStyle_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XDisplayNamesStyle_destroy(
      self,
    );
  }

  late final _ICU4XDisplayNamesStyle_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XDisplayNamesStyle_destroy');
  late final _ICU4XDisplayNamesStyle_destroy =
      _ICU4XDisplayNamesStyle_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XDisplayNamesFallback_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XDisplayNamesFallback_destroy(
      self,
    );
  }

  late final _ICU4XDisplayNamesFallback_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XDisplayNamesFallback_destroy');
  late final _ICU4XDisplayNamesFallback_destroy =
      _ICU4XDisplayNamesFallback_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XLanguageDisplay_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XLanguageDisplay_destroy(
      self,
    );
  }

  late final _ICU4XLanguageDisplay_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XLanguageDisplay_destroy');
  late final _ICU4XLanguageDisplay_destroy = _ICU4XLanguageDisplay_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XDisplayNamesOptionsV1_destroy(
    ffi.Pointer<ICU4XDisplayNamesOptionsV1> self,
  ) {
    return _ICU4XDisplayNamesOptionsV1_destroy(
      self,
    );
  }

  late final _ICU4XDisplayNamesOptionsV1_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XDisplayNamesOptionsV1>)>>(
      'ICU4XDisplayNamesOptionsV1_destroy');
  late final _ICU4XDisplayNamesOptionsV1_destroy =
      _ICU4XDisplayNamesOptionsV1_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XDisplayNamesOptionsV1>)>();

  diplomat_result_box_ICU4XCanonicalCombiningClassMap_ICU4XError
      ICU4XCanonicalCombiningClassMap_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCanonicalCombiningClassMap_create(
      provider,
    );
  }

  late final _ICU4XCanonicalCombiningClassMap_createPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCanonicalCombiningClassMap_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCanonicalCombiningClassMap_create');
  late final _ICU4XCanonicalCombiningClassMap_create =
      _ICU4XCanonicalCombiningClassMap_createPtr.asFunction<
          diplomat_result_box_ICU4XCanonicalCombiningClassMap_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  int ICU4XCanonicalCombiningClassMap_get(
    ffi.Pointer<ICU4XCanonicalCombiningClassMap> self,
    int ch,
  ) {
    return _ICU4XCanonicalCombiningClassMap_get(
      self,
      ch,
    );
  }

  late final _ICU4XCanonicalCombiningClassMap_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ICU4XCanonicalCombiningClassMap>,
              char32_t)>>('ICU4XCanonicalCombiningClassMap_get');
  late final _ICU4XCanonicalCombiningClassMap_get =
      _ICU4XCanonicalCombiningClassMap_getPtr.asFunction<
          int Function(ffi.Pointer<ICU4XCanonicalCombiningClassMap>, int)>();

  int ICU4XCanonicalCombiningClassMap_get32(
    ffi.Pointer<ICU4XCanonicalCombiningClassMap> self,
    int ch,
  ) {
    return _ICU4XCanonicalCombiningClassMap_get32(
      self,
      ch,
    );
  }

  late final _ICU4XCanonicalCombiningClassMap_get32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ICU4XCanonicalCombiningClassMap>,
              ffi.Uint32)>>('ICU4XCanonicalCombiningClassMap_get32');
  late final _ICU4XCanonicalCombiningClassMap_get32 =
      _ICU4XCanonicalCombiningClassMap_get32Ptr.asFunction<
          int Function(ffi.Pointer<ICU4XCanonicalCombiningClassMap>, int)>();

  void ICU4XCanonicalCombiningClassMap_destroy(
    ffi.Pointer<ICU4XCanonicalCombiningClassMap> self,
  ) {
    return _ICU4XCanonicalCombiningClassMap_destroy(
      self,
    );
  }

  late final _ICU4XCanonicalCombiningClassMap_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCanonicalCombiningClassMap>)>>(
      'ICU4XCanonicalCombiningClassMap_destroy');
  late final _ICU4XCanonicalCombiningClassMap_destroy =
      _ICU4XCanonicalCombiningClassMap_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCanonicalCombiningClassMap>)>();

  void ICU4XDateLength_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XDateLength_destroy(
      self,
    );
  }

  late final _ICU4XDateLength_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XDateLength_destroy');
  late final _ICU4XDateLength_destroy = _ICU4XDateLength_destroyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  diplomat_result_box_ICU4XTime_ICU4XError ICU4XTime_create(
    int hour,
    int minute,
    int second,
    int nanosecond,
  ) {
    return _ICU4XTime_create(
      hour,
      minute,
      second,
      nanosecond,
    );
  }

  late final _ICU4XTime_createPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XTime_ICU4XError Function(ffi.Uint8,
              ffi.Uint8, ffi.Uint8, ffi.Uint32)>>('ICU4XTime_create');
  late final _ICU4XTime_create = _ICU4XTime_createPtr.asFunction<
      diplomat_result_box_ICU4XTime_ICU4XError Function(int, int, int, int)>();

  int ICU4XTime_hour(
    ffi.Pointer<ICU4XTime> self,
  ) {
    return _ICU4XTime_hour(
      self,
    );
  }

  late final _ICU4XTime_hourPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XTime>)>>(
          'ICU4XTime_hour');
  late final _ICU4XTime_hour =
      _ICU4XTime_hourPtr.asFunction<int Function(ffi.Pointer<ICU4XTime>)>();

  int ICU4XTime_minute(
    ffi.Pointer<ICU4XTime> self,
  ) {
    return _ICU4XTime_minute(
      self,
    );
  }

  late final _ICU4XTime_minutePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XTime>)>>(
          'ICU4XTime_minute');
  late final _ICU4XTime_minute =
      _ICU4XTime_minutePtr.asFunction<int Function(ffi.Pointer<ICU4XTime>)>();

  int ICU4XTime_second(
    ffi.Pointer<ICU4XTime> self,
  ) {
    return _ICU4XTime_second(
      self,
    );
  }

  late final _ICU4XTime_secondPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XTime>)>>(
          'ICU4XTime_second');
  late final _ICU4XTime_second =
      _ICU4XTime_secondPtr.asFunction<int Function(ffi.Pointer<ICU4XTime>)>();

  int ICU4XTime_nanosecond(
    ffi.Pointer<ICU4XTime> self,
  ) {
    return _ICU4XTime_nanosecond(
      self,
    );
  }

  late final _ICU4XTime_nanosecondPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XTime>)>>(
          'ICU4XTime_nanosecond');
  late final _ICU4XTime_nanosecond = _ICU4XTime_nanosecondPtr.asFunction<
      int Function(ffi.Pointer<ICU4XTime>)>();

  void ICU4XTime_destroy(
    ffi.Pointer<ICU4XTime> self,
  ) {
    return _ICU4XTime_destroy(
      self,
    );
  }

  late final _ICU4XTime_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XTime>)>>(
          'ICU4XTime_destroy');
  late final _ICU4XTime_destroy =
      _ICU4XTime_destroyPtr.asFunction<void Function(ffi.Pointer<ICU4XTime>)>();

  diplomat_result_box_ICU4XIsoDateTime_ICU4XError ICU4XIsoDateTime_create(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
    int nanosecond,
  ) {
    return _ICU4XIsoDateTime_create(
      year,
      month,
      day,
      hour,
      minute,
      second,
      nanosecond,
    );
  }

  late final _ICU4XIsoDateTime_createPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XIsoDateTime_ICU4XError Function(
              ffi.Int32,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint32)>>('ICU4XIsoDateTime_create');
  late final _ICU4XIsoDateTime_create = _ICU4XIsoDateTime_createPtr.asFunction<
      diplomat_result_box_ICU4XIsoDateTime_ICU4XError Function(
          int, int, int, int, int, int, int)>();

  ffi.Pointer<ICU4XIsoDateTime> ICU4XIsoDateTime_crate_from_date_and_time(
    ffi.Pointer<ICU4XIsoDate> date,
    ffi.Pointer<ICU4XTime> time,
  ) {
    return _ICU4XIsoDateTime_crate_from_date_and_time(
      date,
      time,
    );
  }

  late final _ICU4XIsoDateTime_crate_from_date_and_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ICU4XIsoDateTime> Function(
                  ffi.Pointer<ICU4XIsoDate>, ffi.Pointer<ICU4XTime>)>>(
      'ICU4XIsoDateTime_crate_from_date_and_time');
  late final _ICU4XIsoDateTime_crate_from_date_and_time =
      _ICU4XIsoDateTime_crate_from_date_and_timePtr.asFunction<
          ffi.Pointer<ICU4XIsoDateTime> Function(
              ffi.Pointer<ICU4XIsoDate>, ffi.Pointer<ICU4XTime>)>();

  ffi.Pointer<ICU4XIsoDateTime>
      ICU4XIsoDateTime_create_from_minutes_since_local_unix_epoch(
    int minutes,
  ) {
    return _ICU4XIsoDateTime_create_from_minutes_since_local_unix_epoch(
      minutes,
    );
  }

  late final _ICU4XIsoDateTime_create_from_minutes_since_local_unix_epochPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ICU4XIsoDateTime> Function(ffi.Int32)>>(
          'ICU4XIsoDateTime_create_from_minutes_since_local_unix_epoch');
  late final _ICU4XIsoDateTime_create_from_minutes_since_local_unix_epoch =
      _ICU4XIsoDateTime_create_from_minutes_since_local_unix_epochPtr
          .asFunction<ffi.Pointer<ICU4XIsoDateTime> Function(int)>();

  ffi.Pointer<ICU4XIsoDate> ICU4XIsoDateTime_date(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_date(
      self,
    );
  }

  late final _ICU4XIsoDateTime_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XIsoDate> Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_date');
  late final _ICU4XIsoDateTime_date = _ICU4XIsoDateTime_datePtr.asFunction<
      ffi.Pointer<ICU4XIsoDate> Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  ffi.Pointer<ICU4XTime> ICU4XIsoDateTime_time(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_time(
      self,
    );
  }

  late final _ICU4XIsoDateTime_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XTime> Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_time');
  late final _ICU4XIsoDateTime_time = _ICU4XIsoDateTime_timePtr.asFunction<
      ffi.Pointer<ICU4XTime> Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  ffi.Pointer<ICU4XDateTime> ICU4XIsoDateTime_to_any(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_to_any(
      self,
    );
  }

  late final _ICU4XIsoDateTime_to_anyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XDateTime> Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_to_any');
  late final _ICU4XIsoDateTime_to_any = _ICU4XIsoDateTime_to_anyPtr.asFunction<
      ffi.Pointer<ICU4XDateTime> Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_minutes_since_local_unix_epoch(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_minutes_since_local_unix_epoch(
      self,
    );
  }

  late final _ICU4XIsoDateTime_minutes_since_local_unix_epochPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XIsoDateTime>)>>(
      'ICU4XIsoDateTime_minutes_since_local_unix_epoch');
  late final _ICU4XIsoDateTime_minutes_since_local_unix_epoch =
      _ICU4XIsoDateTime_minutes_since_local_unix_epochPtr.asFunction<
          int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  ffi.Pointer<ICU4XDateTime> ICU4XIsoDateTime_to_calendar(
    ffi.Pointer<ICU4XIsoDateTime> self,
    ffi.Pointer<ICU4XCalendar> calendar,
  ) {
    return _ICU4XIsoDateTime_to_calendar(
      self,
      calendar,
    );
  }

  late final _ICU4XIsoDateTime_to_calendarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XDateTime> Function(ffi.Pointer<ICU4XIsoDateTime>,
              ffi.Pointer<ICU4XCalendar>)>>('ICU4XIsoDateTime_to_calendar');
  late final _ICU4XIsoDateTime_to_calendar =
      _ICU4XIsoDateTime_to_calendarPtr.asFunction<
          ffi.Pointer<ICU4XDateTime> Function(
              ffi.Pointer<ICU4XIsoDateTime>, ffi.Pointer<ICU4XCalendar>)>();

  int ICU4XIsoDateTime_hour(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_hour(
      self,
    );
  }

  late final _ICU4XIsoDateTime_hourPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_hour');
  late final _ICU4XIsoDateTime_hour = _ICU4XIsoDateTime_hourPtr.asFunction<
      int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_minute(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_minute(
      self,
    );
  }

  late final _ICU4XIsoDateTime_minutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_minute');
  late final _ICU4XIsoDateTime_minute = _ICU4XIsoDateTime_minutePtr.asFunction<
      int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_second(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_second(
      self,
    );
  }

  late final _ICU4XIsoDateTime_secondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_second');
  late final _ICU4XIsoDateTime_second = _ICU4XIsoDateTime_secondPtr.asFunction<
      int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_nanosecond(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_nanosecond(
      self,
    );
  }

  late final _ICU4XIsoDateTime_nanosecondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_nanosecond');
  late final _ICU4XIsoDateTime_nanosecond = _ICU4XIsoDateTime_nanosecondPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_day_of_month(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_day_of_month(
      self,
    );
  }

  late final _ICU4XIsoDateTime_day_of_monthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_day_of_month');
  late final _ICU4XIsoDateTime_day_of_month = _ICU4XIsoDateTime_day_of_monthPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_day_of_week(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_day_of_week(
      self,
    );
  }

  late final _ICU4XIsoDateTime_day_of_weekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_day_of_week');
  late final _ICU4XIsoDateTime_day_of_week = _ICU4XIsoDateTime_day_of_weekPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_week_of_month(
    ffi.Pointer<ICU4XIsoDateTime> self,
    int first_weekday,
  ) {
    return _ICU4XIsoDateTime_week_of_month(
      self,
      first_weekday,
    );
  }

  late final _ICU4XIsoDateTime_week_of_monthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ICU4XIsoDateTime>,
              ffi.Int32)>>('ICU4XIsoDateTime_week_of_month');
  late final _ICU4XIsoDateTime_week_of_month =
      _ICU4XIsoDateTime_week_of_monthPtr.asFunction<
          int Function(ffi.Pointer<ICU4XIsoDateTime>, int)>();

  diplomat_result_ICU4XWeekOf_ICU4XError ICU4XIsoDateTime_week_of_year(
    ffi.Pointer<ICU4XIsoDateTime> self,
    ffi.Pointer<ICU4XWeekCalculator> calculator,
  ) {
    return _ICU4XIsoDateTime_week_of_year(
      self,
      calculator,
    );
  }

  late final _ICU4XIsoDateTime_week_of_yearPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_ICU4XWeekOf_ICU4XError Function(
                  ffi.Pointer<ICU4XIsoDateTime>,
                  ffi.Pointer<ICU4XWeekCalculator>)>>(
      'ICU4XIsoDateTime_week_of_year');
  late final _ICU4XIsoDateTime_week_of_year =
      _ICU4XIsoDateTime_week_of_yearPtr.asFunction<
          diplomat_result_ICU4XWeekOf_ICU4XError Function(
              ffi.Pointer<ICU4XIsoDateTime>,
              ffi.Pointer<ICU4XWeekCalculator>)>();

  int ICU4XIsoDateTime_month(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_month(
      self,
    );
  }

  late final _ICU4XIsoDateTime_monthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_month');
  late final _ICU4XIsoDateTime_month = _ICU4XIsoDateTime_monthPtr.asFunction<
      int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_year(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_year(
      self,
    );
  }

  late final _ICU4XIsoDateTime_yearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_year');
  late final _ICU4XIsoDateTime_year = _ICU4XIsoDateTime_yearPtr.asFunction<
      int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_months_in_year(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_months_in_year(
      self,
    );
  }

  late final _ICU4XIsoDateTime_months_in_yearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ICU4XIsoDateTime>)>>(
      'ICU4XIsoDateTime_months_in_year');
  late final _ICU4XIsoDateTime_months_in_year =
      _ICU4XIsoDateTime_months_in_yearPtr.asFunction<
          int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_days_in_month(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_days_in_month(
      self,
    );
  }

  late final _ICU4XIsoDateTime_days_in_monthPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ICU4XIsoDateTime>)>>(
      'ICU4XIsoDateTime_days_in_month');
  late final _ICU4XIsoDateTime_days_in_month =
      _ICU4XIsoDateTime_days_in_monthPtr.asFunction<
          int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  int ICU4XIsoDateTime_days_in_year(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_days_in_year(
      self,
    );
  }

  late final _ICU4XIsoDateTime_days_in_yearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ICU4XIsoDateTime>)>>('ICU4XIsoDateTime_days_in_year');
  late final _ICU4XIsoDateTime_days_in_year = _ICU4XIsoDateTime_days_in_yearPtr
      .asFunction<int Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  void ICU4XIsoDateTime_destroy(
    ffi.Pointer<ICU4XIsoDateTime> self,
  ) {
    return _ICU4XIsoDateTime_destroy(
      self,
    );
  }

  late final _ICU4XIsoDateTime_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XIsoDateTime>)>>(
      'ICU4XIsoDateTime_destroy');
  late final _ICU4XIsoDateTime_destroy = _ICU4XIsoDateTime_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XIsoDateTime>)>();

  diplomat_result_box_ICU4XDateTime_ICU4XError
      ICU4XDateTime_create_from_iso_in_calendar(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
    int nanosecond,
    ffi.Pointer<ICU4XCalendar> calendar,
  ) {
    return _ICU4XDateTime_create_from_iso_in_calendar(
      year,
      month,
      day,
      hour,
      minute,
      second,
      nanosecond,
      calendar,
    );
  }

  late final _ICU4XDateTime_create_from_iso_in_calendarPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XDateTime_ICU4XError Function(
                  ffi.Int32,
                  ffi.Uint8,
                  ffi.Uint8,
                  ffi.Uint8,
                  ffi.Uint8,
                  ffi.Uint8,
                  ffi.Uint32,
                  ffi.Pointer<ICU4XCalendar>)>>(
      'ICU4XDateTime_create_from_iso_in_calendar');
  late final _ICU4XDateTime_create_from_iso_in_calendar =
      _ICU4XDateTime_create_from_iso_in_calendarPtr.asFunction<
          diplomat_result_box_ICU4XDateTime_ICU4XError Function(
              int, int, int, int, int, int, int, ffi.Pointer<ICU4XCalendar>)>();

  diplomat_result_box_ICU4XDateTime_ICU4XError
      ICU4XDateTime_create_from_codes_in_calendar(
    ffi.Pointer<ffi.Char> era_code_data,
    int era_code_len,
    int year,
    ffi.Pointer<ffi.Char> month_code_data,
    int month_code_len,
    int day,
    int hour,
    int minute,
    int second,
    int nanosecond,
    ffi.Pointer<ICU4XCalendar> calendar,
  ) {
    return _ICU4XDateTime_create_from_codes_in_calendar(
      era_code_data,
      era_code_len,
      year,
      month_code_data,
      month_code_len,
      day,
      hour,
      minute,
      second,
      nanosecond,
      calendar,
    );
  }

  late final _ICU4XDateTime_create_from_codes_in_calendarPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XDateTime_ICU4XError Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Int32,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Uint8,
                  ffi.Uint8,
                  ffi.Uint8,
                  ffi.Uint8,
                  ffi.Uint32,
                  ffi.Pointer<ICU4XCalendar>)>>(
      'ICU4XDateTime_create_from_codes_in_calendar');
  late final _ICU4XDateTime_create_from_codes_in_calendar =
      _ICU4XDateTime_create_from_codes_in_calendarPtr.asFunction<
          diplomat_result_box_ICU4XDateTime_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<ICU4XCalendar>)>();

  ffi.Pointer<ICU4XDateTime> ICU4XDateTime_create_from_date_and_time(
    ffi.Pointer<ICU4XDate> date,
    ffi.Pointer<ICU4XTime> time,
  ) {
    return _ICU4XDateTime_create_from_date_and_time(
      date,
      time,
    );
  }

  late final _ICU4XDateTime_create_from_date_and_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ICU4XDateTime> Function(
                  ffi.Pointer<ICU4XDate>, ffi.Pointer<ICU4XTime>)>>(
      'ICU4XDateTime_create_from_date_and_time');
  late final _ICU4XDateTime_create_from_date_and_time =
      _ICU4XDateTime_create_from_date_and_timePtr.asFunction<
          ffi.Pointer<ICU4XDateTime> Function(
              ffi.Pointer<ICU4XDate>, ffi.Pointer<ICU4XTime>)>();

  ffi.Pointer<ICU4XDate> ICU4XDateTime_date(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_date(
      self,
    );
  }

  late final _ICU4XDateTime_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XDate> Function(
              ffi.Pointer<ICU4XDateTime>)>>('ICU4XDateTime_date');
  late final _ICU4XDateTime_date = _ICU4XDateTime_datePtr.asFunction<
      ffi.Pointer<ICU4XDate> Function(ffi.Pointer<ICU4XDateTime>)>();

  ffi.Pointer<ICU4XTime> ICU4XDateTime_time(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_time(
      self,
    );
  }

  late final _ICU4XDateTime_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XTime> Function(
              ffi.Pointer<ICU4XDateTime>)>>('ICU4XDateTime_time');
  late final _ICU4XDateTime_time = _ICU4XDateTime_timePtr.asFunction<
      ffi.Pointer<ICU4XTime> Function(ffi.Pointer<ICU4XDateTime>)>();

  ffi.Pointer<ICU4XIsoDateTime> ICU4XDateTime_to_iso(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_to_iso(
      self,
    );
  }

  late final _ICU4XDateTime_to_isoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XIsoDateTime> Function(
              ffi.Pointer<ICU4XDateTime>)>>('ICU4XDateTime_to_iso');
  late final _ICU4XDateTime_to_iso = _ICU4XDateTime_to_isoPtr.asFunction<
      ffi.Pointer<ICU4XIsoDateTime> Function(ffi.Pointer<ICU4XDateTime>)>();

  ffi.Pointer<ICU4XDateTime> ICU4XDateTime_to_calendar(
    ffi.Pointer<ICU4XDateTime> self,
    ffi.Pointer<ICU4XCalendar> calendar,
  ) {
    return _ICU4XDateTime_to_calendar(
      self,
      calendar,
    );
  }

  late final _ICU4XDateTime_to_calendarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XDateTime> Function(ffi.Pointer<ICU4XDateTime>,
              ffi.Pointer<ICU4XCalendar>)>>('ICU4XDateTime_to_calendar');
  late final _ICU4XDateTime_to_calendar =
      _ICU4XDateTime_to_calendarPtr.asFunction<
          ffi.Pointer<ICU4XDateTime> Function(
              ffi.Pointer<ICU4XDateTime>, ffi.Pointer<ICU4XCalendar>)>();

  int ICU4XDateTime_hour(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_hour(
      self,
    );
  }

  late final _ICU4XDateTime_hourPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_hour');
  late final _ICU4XDateTime_hour = _ICU4XDateTime_hourPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDateTime>)>();

  int ICU4XDateTime_minute(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_minute(
      self,
    );
  }

  late final _ICU4XDateTime_minutePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_minute');
  late final _ICU4XDateTime_minute = _ICU4XDateTime_minutePtr.asFunction<
      int Function(ffi.Pointer<ICU4XDateTime>)>();

  int ICU4XDateTime_second(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_second(
      self,
    );
  }

  late final _ICU4XDateTime_secondPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_second');
  late final _ICU4XDateTime_second = _ICU4XDateTime_secondPtr.asFunction<
      int Function(ffi.Pointer<ICU4XDateTime>)>();

  int ICU4XDateTime_nanosecond(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_nanosecond(
      self,
    );
  }

  late final _ICU4XDateTime_nanosecondPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_nanosecond');
  late final _ICU4XDateTime_nanosecond = _ICU4XDateTime_nanosecondPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>)>();

  int ICU4XDateTime_day_of_month(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_day_of_month(
      self,
    );
  }

  late final _ICU4XDateTime_day_of_monthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_day_of_month');
  late final _ICU4XDateTime_day_of_month = _ICU4XDateTime_day_of_monthPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>)>();

  int ICU4XDateTime_day_of_week(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_day_of_week(
      self,
    );
  }

  late final _ICU4XDateTime_day_of_weekPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_day_of_week');
  late final _ICU4XDateTime_day_of_week = _ICU4XDateTime_day_of_weekPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>)>();

  int ICU4XDateTime_week_of_month(
    ffi.Pointer<ICU4XDateTime> self,
    int first_weekday,
  ) {
    return _ICU4XDateTime_week_of_month(
      self,
      first_weekday,
    );
  }

  late final _ICU4XDateTime_week_of_monthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ICU4XDateTime>,
              ffi.Int32)>>('ICU4XDateTime_week_of_month');
  late final _ICU4XDateTime_week_of_month = _ICU4XDateTime_week_of_monthPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>, int)>();

  diplomat_result_ICU4XWeekOf_ICU4XError ICU4XDateTime_week_of_year(
    ffi.Pointer<ICU4XDateTime> self,
    ffi.Pointer<ICU4XWeekCalculator> calculator,
  ) {
    return _ICU4XDateTime_week_of_year(
      self,
      calculator,
    );
  }

  late final _ICU4XDateTime_week_of_yearPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_ICU4XWeekOf_ICU4XError Function(
              ffi.Pointer<ICU4XDateTime>,
              ffi.Pointer<ICU4XWeekCalculator>)>>('ICU4XDateTime_week_of_year');
  late final _ICU4XDateTime_week_of_year =
      _ICU4XDateTime_week_of_yearPtr.asFunction<
          diplomat_result_ICU4XWeekOf_ICU4XError Function(
              ffi.Pointer<ICU4XDateTime>, ffi.Pointer<ICU4XWeekCalculator>)>();

  int ICU4XDateTime_ordinal_month(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_ordinal_month(
      self,
    );
  }

  late final _ICU4XDateTime_ordinal_monthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_ordinal_month');
  late final _ICU4XDateTime_ordinal_month = _ICU4XDateTime_ordinal_monthPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>)>();

  diplomat_result_void_ICU4XError ICU4XDateTime_month_code(
    ffi.Pointer<ICU4XDateTime> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDateTime_month_code(
      self,
      write,
    );
  }

  late final _ICU4XDateTime_month_codePtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XDateTime>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XDateTime_month_code');
  late final _ICU4XDateTime_month_code =
      _ICU4XDateTime_month_codePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDateTime>, ffi.Pointer<DiplomatWriteable>)>();

  int ICU4XDateTime_year_in_era(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_year_in_era(
      self,
    );
  }

  late final _ICU4XDateTime_year_in_eraPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_year_in_era');
  late final _ICU4XDateTime_year_in_era = _ICU4XDateTime_year_in_eraPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>)>();

  diplomat_result_void_ICU4XError ICU4XDateTime_era(
    ffi.Pointer<ICU4XDateTime> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDateTime_era(
      self,
      write,
    );
  }

  late final _ICU4XDateTime_eraPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(ffi.Pointer<ICU4XDateTime>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XDateTime_era');
  late final _ICU4XDateTime_era = _ICU4XDateTime_eraPtr.asFunction<
      diplomat_result_void_ICU4XError Function(
          ffi.Pointer<ICU4XDateTime>, ffi.Pointer<DiplomatWriteable>)>();

  int ICU4XDateTime_months_in_year(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_months_in_year(
      self,
    );
  }

  late final _ICU4XDateTime_months_in_yearPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_months_in_year');
  late final _ICU4XDateTime_months_in_year = _ICU4XDateTime_months_in_yearPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>)>();

  int ICU4XDateTime_days_in_month(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_days_in_month(
      self,
    );
  }

  late final _ICU4XDateTime_days_in_monthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_days_in_month');
  late final _ICU4XDateTime_days_in_month = _ICU4XDateTime_days_in_monthPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>)>();

  int ICU4XDateTime_days_in_year(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_days_in_year(
      self,
    );
  }

  late final _ICU4XDateTime_days_in_yearPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_days_in_year');
  late final _ICU4XDateTime_days_in_year = _ICU4XDateTime_days_in_yearPtr
      .asFunction<int Function(ffi.Pointer<ICU4XDateTime>)>();

  ffi.Pointer<ICU4XCalendar> ICU4XDateTime_calendar(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_calendar(
      self,
    );
  }

  late final _ICU4XDateTime_calendarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XCalendar> Function(
              ffi.Pointer<ICU4XDateTime>)>>('ICU4XDateTime_calendar');
  late final _ICU4XDateTime_calendar = _ICU4XDateTime_calendarPtr.asFunction<
      ffi.Pointer<ICU4XCalendar> Function(ffi.Pointer<ICU4XDateTime>)>();

  void ICU4XDateTime_destroy(
    ffi.Pointer<ICU4XDateTime> self,
  ) {
    return _ICU4XDateTime_destroy(
      self,
    );
  }

  late final _ICU4XDateTime_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XDateTime>)>>(
      'ICU4XDateTime_destroy');
  late final _ICU4XDateTime_destroy = _ICU4XDateTime_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XDateTime>)>();

  diplomat_result_box_ICU4XDateFormatter_ICU4XError
      ICU4XDateFormatter_create_with_length(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int date_length,
  ) {
    return _ICU4XDateFormatter_create_with_length(
      provider,
      locale,
      date_length,
    );
  }

  late final _ICU4XDateFormatter_create_with_lengthPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XDateFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32)>>('ICU4XDateFormatter_create_with_length');
  late final _ICU4XDateFormatter_create_with_length =
      _ICU4XDateFormatter_create_with_lengthPtr.asFunction<
          diplomat_result_box_ICU4XDateFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>, int)>();

  diplomat_result_void_ICU4XError ICU4XDateFormatter_format_date(
    ffi.Pointer<ICU4XDateFormatter> self,
    ffi.Pointer<ICU4XDate> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDateFormatter_format_date(
      self,
      value,
      write,
    );
  }

  late final _ICU4XDateFormatter_format_datePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDateFormatter>,
                  ffi.Pointer<ICU4XDate>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XDateFormatter_format_date');
  late final _ICU4XDateFormatter_format_date =
      _ICU4XDateFormatter_format_datePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDateFormatter>,
              ffi.Pointer<ICU4XDate>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XDateFormatter_format_iso_date(
    ffi.Pointer<ICU4XDateFormatter> self,
    ffi.Pointer<ICU4XIsoDate> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDateFormatter_format_iso_date(
      self,
      value,
      write,
    );
  }

  late final _ICU4XDateFormatter_format_iso_datePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDateFormatter>,
                  ffi.Pointer<ICU4XIsoDate>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XDateFormatter_format_iso_date');
  late final _ICU4XDateFormatter_format_iso_date =
      _ICU4XDateFormatter_format_iso_datePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDateFormatter>,
              ffi.Pointer<ICU4XIsoDate>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XDateFormatter_format_datetime(
    ffi.Pointer<ICU4XDateFormatter> self,
    ffi.Pointer<ICU4XDateTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDateFormatter_format_datetime(
      self,
      value,
      write,
    );
  }

  late final _ICU4XDateFormatter_format_datetimePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDateFormatter>,
                  ffi.Pointer<ICU4XDateTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XDateFormatter_format_datetime');
  late final _ICU4XDateFormatter_format_datetime =
      _ICU4XDateFormatter_format_datetimePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDateFormatter>,
              ffi.Pointer<ICU4XDateTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XDateFormatter_format_iso_datetime(
    ffi.Pointer<ICU4XDateFormatter> self,
    ffi.Pointer<ICU4XIsoDateTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDateFormatter_format_iso_datetime(
      self,
      value,
      write,
    );
  }

  late final _ICU4XDateFormatter_format_iso_datetimePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDateFormatter>,
                  ffi.Pointer<ICU4XIsoDateTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XDateFormatter_format_iso_datetime');
  late final _ICU4XDateFormatter_format_iso_datetime =
      _ICU4XDateFormatter_format_iso_datetimePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDateFormatter>,
              ffi.Pointer<ICU4XIsoDateTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XDateFormatter_destroy(
    ffi.Pointer<ICU4XDateFormatter> self,
  ) {
    return _ICU4XDateFormatter_destroy(
      self,
    );
  }

  late final _ICU4XDateFormatter_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XDateFormatter>)>>('ICU4XDateFormatter_destroy');
  late final _ICU4XDateFormatter_destroy = _ICU4XDateFormatter_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XDateFormatter>)>();

  void ICU4XCollatorStrength_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XCollatorStrength_destroy(
      self,
    );
  }

  late final _ICU4XCollatorStrength_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XCollatorStrength_destroy');
  late final _ICU4XCollatorStrength_destroy = _ICU4XCollatorStrength_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XCollatorAlternateHandling_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XCollatorAlternateHandling_destroy(
      self,
    );
  }

  late final _ICU4XCollatorAlternateHandling_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XCollatorAlternateHandling_destroy');
  late final _ICU4XCollatorAlternateHandling_destroy =
      _ICU4XCollatorAlternateHandling_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XCollatorCaseFirst_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XCollatorCaseFirst_destroy(
      self,
    );
  }

  late final _ICU4XCollatorCaseFirst_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XCollatorCaseFirst_destroy');
  late final _ICU4XCollatorCaseFirst_destroy =
      _ICU4XCollatorCaseFirst_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XCollatorMaxVariable_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XCollatorMaxVariable_destroy(
      self,
    );
  }

  late final _ICU4XCollatorMaxVariable_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XCollatorMaxVariable_destroy');
  late final _ICU4XCollatorMaxVariable_destroy =
      _ICU4XCollatorMaxVariable_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XCollatorCaseLevel_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XCollatorCaseLevel_destroy(
      self,
    );
  }

  late final _ICU4XCollatorCaseLevel_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XCollatorCaseLevel_destroy');
  late final _ICU4XCollatorCaseLevel_destroy =
      _ICU4XCollatorCaseLevel_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XCollatorNumeric_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XCollatorNumeric_destroy(
      self,
    );
  }

  late final _ICU4XCollatorNumeric_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XCollatorNumeric_destroy');
  late final _ICU4XCollatorNumeric_destroy = _ICU4XCollatorNumeric_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XCollatorBackwardSecondLevel_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XCollatorBackwardSecondLevel_destroy(
      self,
    );
  }

  late final _ICU4XCollatorBackwardSecondLevel_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XCollatorBackwardSecondLevel_destroy');
  late final _ICU4XCollatorBackwardSecondLevel_destroy =
      _ICU4XCollatorBackwardSecondLevel_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XCollatorOptionsV1_destroy(
    ffi.Pointer<ICU4XCollatorOptionsV1> self,
  ) {
    return _ICU4XCollatorOptionsV1_destroy(
      self,
    );
  }

  late final _ICU4XCollatorOptionsV1_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCollatorOptionsV1>)>>(
      'ICU4XCollatorOptionsV1_destroy');
  late final _ICU4XCollatorOptionsV1_destroy =
      _ICU4XCollatorOptionsV1_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCollatorOptionsV1>)>();

  int ICU4XGeneralCategoryNameToMaskMapper_get_strict(
    ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper> self,
    ffi.Pointer<ffi.Char> name_data,
    int name_len,
  ) {
    return _ICU4XGeneralCategoryNameToMaskMapper_get_strict(
      self,
      name_data,
      name_len,
    );
  }

  late final _ICU4XGeneralCategoryNameToMaskMapper_get_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XGeneralCategoryNameToMaskMapper_get_strict');
  late final _ICU4XGeneralCategoryNameToMaskMapper_get_strict =
      _ICU4XGeneralCategoryNameToMaskMapper_get_strictPtr.asFunction<
          int Function(ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper>,
              ffi.Pointer<ffi.Char>, int)>();

  int ICU4XGeneralCategoryNameToMaskMapper_get_loose(
    ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper> self,
    ffi.Pointer<ffi.Char> name_data,
    int name_len,
  ) {
    return _ICU4XGeneralCategoryNameToMaskMapper_get_loose(
      self,
      name_data,
      name_len,
    );
  }

  late final _ICU4XGeneralCategoryNameToMaskMapper_get_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XGeneralCategoryNameToMaskMapper_get_loose');
  late final _ICU4XGeneralCategoryNameToMaskMapper_get_loose =
      _ICU4XGeneralCategoryNameToMaskMapper_get_loosePtr.asFunction<
          int Function(ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper>,
              ffi.Pointer<ffi.Char>, int)>();

  diplomat_result_box_ICU4XGeneralCategoryNameToMaskMapper_ICU4XError
      ICU4XGeneralCategoryNameToMaskMapper_load(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XGeneralCategoryNameToMaskMapper_load(
      provider,
    );
  }

  late final _ICU4XGeneralCategoryNameToMaskMapper_loadPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XGeneralCategoryNameToMaskMapper_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XGeneralCategoryNameToMaskMapper_load');
  late final _ICU4XGeneralCategoryNameToMaskMapper_load =
      _ICU4XGeneralCategoryNameToMaskMapper_loadPtr.asFunction<
          diplomat_result_box_ICU4XGeneralCategoryNameToMaskMapper_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  void ICU4XGeneralCategoryNameToMaskMapper_destroy(
    ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper> self,
  ) {
    return _ICU4XGeneralCategoryNameToMaskMapper_destroy(
      self,
    );
  }

  late final _ICU4XGeneralCategoryNameToMaskMapper_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper>)>>(
      'ICU4XGeneralCategoryNameToMaskMapper_destroy');
  late final _ICU4XGeneralCategoryNameToMaskMapper_destroy =
      _ICU4XGeneralCategoryNameToMaskMapper_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper>)>();

  diplomat_result_box_ICU4XCanonicalComposition_ICU4XError
      ICU4XCanonicalComposition_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCanonicalComposition_create(
      provider,
    );
  }

  late final _ICU4XCanonicalComposition_createPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCanonicalComposition_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCanonicalComposition_create');
  late final _ICU4XCanonicalComposition_create =
      _ICU4XCanonicalComposition_createPtr.asFunction<
          diplomat_result_box_ICU4XCanonicalComposition_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  int ICU4XCanonicalComposition_compose(
    ffi.Pointer<ICU4XCanonicalComposition> self,
    int starter,
    int second,
  ) {
    return _ICU4XCanonicalComposition_compose(
      self,
      starter,
      second,
    );
  }

  late final _ICU4XCanonicalComposition_composePtr = _lookup<
      ffi.NativeFunction<
          char32_t Function(ffi.Pointer<ICU4XCanonicalComposition>, char32_t,
              char32_t)>>('ICU4XCanonicalComposition_compose');
  late final _ICU4XCanonicalComposition_compose =
      _ICU4XCanonicalComposition_composePtr.asFunction<
          int Function(ffi.Pointer<ICU4XCanonicalComposition>, int, int)>();

  void ICU4XCanonicalComposition_destroy(
    ffi.Pointer<ICU4XCanonicalComposition> self,
  ) {
    return _ICU4XCanonicalComposition_destroy(
      self,
    );
  }

  late final _ICU4XCanonicalComposition_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCanonicalComposition>)>>(
      'ICU4XCanonicalComposition_destroy');
  late final _ICU4XCanonicalComposition_destroy =
      _ICU4XCanonicalComposition_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCanonicalComposition>)>();

  void ICU4XIsoTimeZoneFormat_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XIsoTimeZoneFormat_destroy(
      self,
    );
  }

  late final _ICU4XIsoTimeZoneFormat_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XIsoTimeZoneFormat_destroy');
  late final _ICU4XIsoTimeZoneFormat_destroy =
      _ICU4XIsoTimeZoneFormat_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XIsoTimeZoneMinuteDisplay_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XIsoTimeZoneMinuteDisplay_destroy(
      self,
    );
  }

  late final _ICU4XIsoTimeZoneMinuteDisplay_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XIsoTimeZoneMinuteDisplay_destroy');
  late final _ICU4XIsoTimeZoneMinuteDisplay_destroy =
      _ICU4XIsoTimeZoneMinuteDisplay_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XIsoTimeZoneSecondDisplay_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XIsoTimeZoneSecondDisplay_destroy(
      self,
    );
  }

  late final _ICU4XIsoTimeZoneSecondDisplay_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XIsoTimeZoneSecondDisplay_destroy');
  late final _ICU4XIsoTimeZoneSecondDisplay_destroy =
      _ICU4XIsoTimeZoneSecondDisplay_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XIsoTimeZoneOptions_destroy(
    ffi.Pointer<ICU4XIsoTimeZoneOptions> self,
  ) {
    return _ICU4XIsoTimeZoneOptions_destroy(
      self,
    );
  }

  late final _ICU4XIsoTimeZoneOptions_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XIsoTimeZoneOptions>)>>(
      'ICU4XIsoTimeZoneOptions_destroy');
  late final _ICU4XIsoTimeZoneOptions_destroy =
      _ICU4XIsoTimeZoneOptions_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XIsoTimeZoneOptions>)>();

  diplomat_result_box_ICU4XCustomTimeZone_ICU4XError
      ICU4XCustomTimeZone_create_from_string(
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
  ) {
    return _ICU4XCustomTimeZone_create_from_string(
      s_data,
      s_len,
    );
  }

  late final _ICU4XCustomTimeZone_create_from_stringPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XCustomTimeZone_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XCustomTimeZone_create_from_string');
  late final _ICU4XCustomTimeZone_create_from_string =
      _ICU4XCustomTimeZone_create_from_stringPtr.asFunction<
          diplomat_result_box_ICU4XCustomTimeZone_ICU4XError Function(
              ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ICU4XCustomTimeZone> ICU4XCustomTimeZone_create_empty() {
    return _ICU4XCustomTimeZone_create_empty();
  }

  late final _ICU4XCustomTimeZone_create_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XCustomTimeZone> Function()>>(
          'ICU4XCustomTimeZone_create_empty');
  late final _ICU4XCustomTimeZone_create_empty =
      _ICU4XCustomTimeZone_create_emptyPtr.asFunction<
          ffi.Pointer<ICU4XCustomTimeZone> Function()>();

  ffi.Pointer<ICU4XCustomTimeZone> ICU4XCustomTimeZone_create_utc() {
    return _ICU4XCustomTimeZone_create_utc();
  }

  late final _ICU4XCustomTimeZone_create_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XCustomTimeZone> Function()>>(
          'ICU4XCustomTimeZone_create_utc');
  late final _ICU4XCustomTimeZone_create_utc =
      _ICU4XCustomTimeZone_create_utcPtr.asFunction<
          ffi.Pointer<ICU4XCustomTimeZone> Function()>();

  diplomat_result_void_ICU4XError
      ICU4XCustomTimeZone_try_set_gmt_offset_seconds(
    ffi.Pointer<ICU4XCustomTimeZone> self,
    int offset_seconds,
  ) {
    return _ICU4XCustomTimeZone_try_set_gmt_offset_seconds(
      self,
      offset_seconds,
    );
  }

  late final _ICU4XCustomTimeZone_try_set_gmt_offset_secondsPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Int32)>>('ICU4XCustomTimeZone_try_set_gmt_offset_seconds');
  late final _ICU4XCustomTimeZone_try_set_gmt_offset_seconds =
      _ICU4XCustomTimeZone_try_set_gmt_offset_secondsPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>, int)>();

  void ICU4XCustomTimeZone_clear_gmt_offset(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_clear_gmt_offset(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_clear_gmt_offsetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_clear_gmt_offset');
  late final _ICU4XCustomTimeZone_clear_gmt_offset =
      _ICU4XCustomTimeZone_clear_gmt_offsetPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_int32_t_ICU4XError ICU4XCustomTimeZone_gmt_offset_seconds(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_gmt_offset_seconds(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_gmt_offset_secondsPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_int32_t_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_gmt_offset_seconds');
  late final _ICU4XCustomTimeZone_gmt_offset_seconds =
      _ICU4XCustomTimeZone_gmt_offset_secondsPtr.asFunction<
          diplomat_result_int32_t_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_bool_ICU4XError ICU4XCustomTimeZone_is_gmt_offset_positive(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_is_gmt_offset_positive(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_is_gmt_offset_positivePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_bool_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_is_gmt_offset_positive');
  late final _ICU4XCustomTimeZone_is_gmt_offset_positive =
      _ICU4XCustomTimeZone_is_gmt_offset_positivePtr.asFunction<
          diplomat_result_bool_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_bool_ICU4XError ICU4XCustomTimeZone_is_gmt_offset_zero(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_is_gmt_offset_zero(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_is_gmt_offset_zeroPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_bool_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_is_gmt_offset_zero');
  late final _ICU4XCustomTimeZone_is_gmt_offset_zero =
      _ICU4XCustomTimeZone_is_gmt_offset_zeroPtr.asFunction<
          diplomat_result_bool_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_bool_ICU4XError ICU4XCustomTimeZone_gmt_offset_has_minutes(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_gmt_offset_has_minutes(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_gmt_offset_has_minutesPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_bool_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_gmt_offset_has_minutes');
  late final _ICU4XCustomTimeZone_gmt_offset_has_minutes =
      _ICU4XCustomTimeZone_gmt_offset_has_minutesPtr.asFunction<
          diplomat_result_bool_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_bool_ICU4XError ICU4XCustomTimeZone_gmt_offset_has_seconds(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_gmt_offset_has_seconds(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_gmt_offset_has_secondsPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_bool_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_gmt_offset_has_seconds');
  late final _ICU4XCustomTimeZone_gmt_offset_has_seconds =
      _ICU4XCustomTimeZone_gmt_offset_has_secondsPtr.asFunction<
          diplomat_result_bool_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_void_ICU4XError ICU4XCustomTimeZone_try_set_time_zone_id(
    ffi.Pointer<ICU4XCustomTimeZone> self,
    ffi.Pointer<ffi.Char> id_data,
    int id_len,
  ) {
    return _ICU4XCustomTimeZone_try_set_time_zone_id(
      self,
      id_data,
      id_len,
    );
  }

  late final _ICU4XCustomTimeZone_try_set_time_zone_idPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XCustomTimeZone_try_set_time_zone_id');
  late final _ICU4XCustomTimeZone_try_set_time_zone_id =
      _ICU4XCustomTimeZone_try_set_time_zone_idPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>, ffi.Pointer<ffi.Char>, int)>();

  void ICU4XCustomTimeZone_clear_time_zone_id(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_clear_time_zone_id(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_clear_time_zone_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_clear_time_zone_id');
  late final _ICU4XCustomTimeZone_clear_time_zone_id =
      _ICU4XCustomTimeZone_clear_time_zone_idPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_void_ICU4XError ICU4XCustomTimeZone_time_zone_id(
    ffi.Pointer<ICU4XCustomTimeZone> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XCustomTimeZone_time_zone_id(
      self,
      write,
    );
  }

  late final _ICU4XCustomTimeZone_time_zone_idPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XCustomTimeZone_time_zone_id');
  late final _ICU4XCustomTimeZone_time_zone_id =
      _ICU4XCustomTimeZone_time_zone_idPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XCustomTimeZone_try_set_metazone_id(
    ffi.Pointer<ICU4XCustomTimeZone> self,
    ffi.Pointer<ffi.Char> id_data,
    int id_len,
  ) {
    return _ICU4XCustomTimeZone_try_set_metazone_id(
      self,
      id_data,
      id_len,
    );
  }

  late final _ICU4XCustomTimeZone_try_set_metazone_idPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XCustomTimeZone_try_set_metazone_id');
  late final _ICU4XCustomTimeZone_try_set_metazone_id =
      _ICU4XCustomTimeZone_try_set_metazone_idPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>, ffi.Pointer<ffi.Char>, int)>();

  void ICU4XCustomTimeZone_clear_metazone_id(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_clear_metazone_id(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_clear_metazone_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_clear_metazone_id');
  late final _ICU4XCustomTimeZone_clear_metazone_id =
      _ICU4XCustomTimeZone_clear_metazone_idPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_void_ICU4XError ICU4XCustomTimeZone_metazone_id(
    ffi.Pointer<ICU4XCustomTimeZone> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XCustomTimeZone_metazone_id(
      self,
      write,
    );
  }

  late final _ICU4XCustomTimeZone_metazone_idPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XCustomTimeZone_metazone_id');
  late final _ICU4XCustomTimeZone_metazone_id =
      _ICU4XCustomTimeZone_metazone_idPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XCustomTimeZone_try_set_zone_variant(
    ffi.Pointer<ICU4XCustomTimeZone> self,
    ffi.Pointer<ffi.Char> id_data,
    int id_len,
  ) {
    return _ICU4XCustomTimeZone_try_set_zone_variant(
      self,
      id_data,
      id_len,
    );
  }

  late final _ICU4XCustomTimeZone_try_set_zone_variantPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XCustomTimeZone_try_set_zone_variant');
  late final _ICU4XCustomTimeZone_try_set_zone_variant =
      _ICU4XCustomTimeZone_try_set_zone_variantPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>, ffi.Pointer<ffi.Char>, int)>();

  void ICU4XCustomTimeZone_clear_zone_variant(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_clear_zone_variant(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_clear_zone_variantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_clear_zone_variant');
  late final _ICU4XCustomTimeZone_clear_zone_variant =
      _ICU4XCustomTimeZone_clear_zone_variantPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_void_ICU4XError ICU4XCustomTimeZone_zone_variant(
    ffi.Pointer<ICU4XCustomTimeZone> self,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XCustomTimeZone_zone_variant(
      self,
      write,
    );
  }

  late final _ICU4XCustomTimeZone_zone_variantPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XCustomTimeZone_zone_variant');
  late final _ICU4XCustomTimeZone_zone_variant =
      _ICU4XCustomTimeZone_zone_variantPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XCustomTimeZone_set_standard_time(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_set_standard_time(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_set_standard_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_set_standard_time');
  late final _ICU4XCustomTimeZone_set_standard_time =
      _ICU4XCustomTimeZone_set_standard_timePtr.asFunction<
          void Function(ffi.Pointer<ICU4XCustomTimeZone>)>();

  void ICU4XCustomTimeZone_set_daylight_time(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_set_daylight_time(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_set_daylight_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_set_daylight_time');
  late final _ICU4XCustomTimeZone_set_daylight_time =
      _ICU4XCustomTimeZone_set_daylight_timePtr.asFunction<
          void Function(ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_bool_ICU4XError ICU4XCustomTimeZone_is_standard_time(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_is_standard_time(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_is_standard_timePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_bool_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_is_standard_time');
  late final _ICU4XCustomTimeZone_is_standard_time =
      _ICU4XCustomTimeZone_is_standard_timePtr.asFunction<
          diplomat_result_bool_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_bool_ICU4XError ICU4XCustomTimeZone_is_daylight_time(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_is_daylight_time(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_is_daylight_timePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_bool_ICU4XError Function(
                  ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_is_daylight_time');
  late final _ICU4XCustomTimeZone_is_daylight_time =
      _ICU4XCustomTimeZone_is_daylight_timePtr.asFunction<
          diplomat_result_bool_ICU4XError Function(
              ffi.Pointer<ICU4XCustomTimeZone>)>();

  void ICU4XCustomTimeZone_maybe_calculate_metazone(
    ffi.Pointer<ICU4XCustomTimeZone> self,
    ffi.Pointer<ICU4XMetazoneCalculator> metazone_calculator,
    ffi.Pointer<ICU4XIsoDateTime> local_datetime,
  ) {
    return _ICU4XCustomTimeZone_maybe_calculate_metazone(
      self,
      metazone_calculator,
      local_datetime,
    );
  }

  late final _ICU4XCustomTimeZone_maybe_calculate_metazonePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XCustomTimeZone>,
                  ffi.Pointer<ICU4XMetazoneCalculator>,
                  ffi.Pointer<ICU4XIsoDateTime>)>>(
      'ICU4XCustomTimeZone_maybe_calculate_metazone');
  late final _ICU4XCustomTimeZone_maybe_calculate_metazone =
      _ICU4XCustomTimeZone_maybe_calculate_metazonePtr.asFunction<
          void Function(
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Pointer<ICU4XMetazoneCalculator>,
              ffi.Pointer<ICU4XIsoDateTime>)>();

  void ICU4XCustomTimeZone_destroy(
    ffi.Pointer<ICU4XCustomTimeZone> self,
  ) {
    return _ICU4XCustomTimeZone_destroy(
      self,
    );
  }

  late final _ICU4XCustomTimeZone_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCustomTimeZone>)>>(
      'ICU4XCustomTimeZone_destroy');
  late final _ICU4XCustomTimeZone_destroy = _ICU4XCustomTimeZone_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XCustomTimeZone>)>();

  diplomat_result_box_ICU4XZonedDateTimeFormatter_ICU4XError
      ICU4XZonedDateTimeFormatter_create_with_lengths(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int date_length,
    int time_length,
  ) {
    return _ICU4XZonedDateTimeFormatter_create_with_lengths(
      provider,
      locale,
      date_length,
      time_length,
    );
  }

  late final _ICU4XZonedDateTimeFormatter_create_with_lengthsPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XZonedDateTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32,
              ffi.Int32)>>('ICU4XZonedDateTimeFormatter_create_with_lengths');
  late final _ICU4XZonedDateTimeFormatter_create_with_lengths =
      _ICU4XZonedDateTimeFormatter_create_with_lengthsPtr.asFunction<
          diplomat_result_box_ICU4XZonedDateTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              int,
              int)>();

  diplomat_result_box_ICU4XZonedDateTimeFormatter_ICU4XError
      ICU4XZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallback(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int date_length,
    int time_length,
    ICU4XIsoTimeZoneOptions zone_options,
  ) {
    return _ICU4XZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallback(
      provider,
      locale,
      date_length,
      time_length,
      zone_options,
    );
  }

  late final _ICU4XZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallbackPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XZonedDateTimeFormatter_ICU4XError Function(
                      ffi.Pointer<ICU4XDataProvider>,
                      ffi.Pointer<ICU4XLocale>,
                      ffi.Int32,
                      ffi.Int32,
                      ICU4XIsoTimeZoneOptions)>>(
          'ICU4XZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallback');
  late final _ICU4XZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallback =
      _ICU4XZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallbackPtr
          .asFunction<
              diplomat_result_box_ICU4XZonedDateTimeFormatter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XLocale>,
                  int,
                  int,
                  ICU4XIsoTimeZoneOptions)>();

  diplomat_result_void_ICU4XError
      ICU4XZonedDateTimeFormatter_format_datetime_with_custom_time_zone(
    ffi.Pointer<ICU4XZonedDateTimeFormatter> self,
    ffi.Pointer<ICU4XDateTime> datetime,
    ffi.Pointer<ICU4XCustomTimeZone> time_zone,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XZonedDateTimeFormatter_format_datetime_with_custom_time_zone(
      self,
      datetime,
      time_zone,
      write,
    );
  }

  late final _ICU4XZonedDateTimeFormatter_format_datetime_with_custom_time_zonePtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_void_ICU4XError Function(
                      ffi.Pointer<ICU4XZonedDateTimeFormatter>,
                      ffi.Pointer<ICU4XDateTime>,
                      ffi.Pointer<ICU4XCustomTimeZone>,
                      ffi.Pointer<DiplomatWriteable>)>>(
          'ICU4XZonedDateTimeFormatter_format_datetime_with_custom_time_zone');
  late final _ICU4XZonedDateTimeFormatter_format_datetime_with_custom_time_zone =
      _ICU4XZonedDateTimeFormatter_format_datetime_with_custom_time_zonePtr
          .asFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XZonedDateTimeFormatter>,
                  ffi.Pointer<ICU4XDateTime>,
                  ffi.Pointer<ICU4XCustomTimeZone>,
                  ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError
      ICU4XZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zone(
    ffi.Pointer<ICU4XZonedDateTimeFormatter> self,
    ffi.Pointer<ICU4XIsoDateTime> datetime,
    ffi.Pointer<ICU4XCustomTimeZone> time_zone,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zone(
      self,
      datetime,
      time_zone,
      write,
    );
  }

  late final _ICU4XZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zonePtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_void_ICU4XError Function(
                      ffi.Pointer<ICU4XZonedDateTimeFormatter>,
                      ffi.Pointer<ICU4XIsoDateTime>,
                      ffi.Pointer<ICU4XCustomTimeZone>,
                      ffi.Pointer<DiplomatWriteable>)>>(
          'ICU4XZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zone');
  late final _ICU4XZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zone =
      _ICU4XZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zonePtr
          .asFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XZonedDateTimeFormatter>,
                  ffi.Pointer<ICU4XIsoDateTime>,
                  ffi.Pointer<ICU4XCustomTimeZone>,
                  ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XZonedDateTimeFormatter_destroy(
    ffi.Pointer<ICU4XZonedDateTimeFormatter> self,
  ) {
    return _ICU4XZonedDateTimeFormatter_destroy(
      self,
    );
  }

  late final _ICU4XZonedDateTimeFormatter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XZonedDateTimeFormatter>)>>(
      'ICU4XZonedDateTimeFormatter_destroy');
  late final _ICU4XZonedDateTimeFormatter_destroy =
      _ICU4XZonedDateTimeFormatter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XZonedDateTimeFormatter>)>();

  void ICU4XBidiDirection_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XBidiDirection_destroy(
      self,
    );
  }

  late final _ICU4XBidiDirection_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XBidiDirection_destroy');
  late final _ICU4XBidiDirection_destroy = _ICU4XBidiDirection_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  diplomat_result_void_ICU4XError ICU4XBidiParagraph_set_paragraph_in_text(
    ffi.Pointer<ICU4XBidiParagraph> self,
    int n,
  ) {
    return _ICU4XBidiParagraph_set_paragraph_in_text(
      self,
      n,
    );
  }

  late final _ICU4XBidiParagraph_set_paragraph_in_textPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XBidiParagraph>,
              ffi.Size)>>('ICU4XBidiParagraph_set_paragraph_in_text');
  late final _ICU4XBidiParagraph_set_paragraph_in_text =
      _ICU4XBidiParagraph_set_paragraph_in_textPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XBidiParagraph>, int)>();

  int ICU4XBidiParagraph_direction(
    ffi.Pointer<ICU4XBidiParagraph> self,
  ) {
    return _ICU4XBidiParagraph_direction(
      self,
    );
  }

  late final _ICU4XBidiParagraph_directionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XBidiParagraph>)>>(
      'ICU4XBidiParagraph_direction');
  late final _ICU4XBidiParagraph_direction = _ICU4XBidiParagraph_directionPtr
      .asFunction<int Function(ffi.Pointer<ICU4XBidiParagraph>)>();

  int ICU4XBidiParagraph_size(
    ffi.Pointer<ICU4XBidiParagraph> self,
  ) {
    return _ICU4XBidiParagraph_size(
      self,
    );
  }

  late final _ICU4XBidiParagraph_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ICU4XBidiParagraph>)>>('ICU4XBidiParagraph_size');
  late final _ICU4XBidiParagraph_size = _ICU4XBidiParagraph_sizePtr.asFunction<
      int Function(ffi.Pointer<ICU4XBidiParagraph>)>();

  int ICU4XBidiParagraph_range_start(
    ffi.Pointer<ICU4XBidiParagraph> self,
  ) {
    return _ICU4XBidiParagraph_range_start(
      self,
    );
  }

  late final _ICU4XBidiParagraph_range_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ICU4XBidiParagraph>)>>(
      'ICU4XBidiParagraph_range_start');
  late final _ICU4XBidiParagraph_range_start =
      _ICU4XBidiParagraph_range_startPtr.asFunction<
          int Function(ffi.Pointer<ICU4XBidiParagraph>)>();

  int ICU4XBidiParagraph_range_end(
    ffi.Pointer<ICU4XBidiParagraph> self,
  ) {
    return _ICU4XBidiParagraph_range_end(
      self,
    );
  }

  late final _ICU4XBidiParagraph_range_endPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ICU4XBidiParagraph>)>>(
      'ICU4XBidiParagraph_range_end');
  late final _ICU4XBidiParagraph_range_end = _ICU4XBidiParagraph_range_endPtr
      .asFunction<int Function(ffi.Pointer<ICU4XBidiParagraph>)>();

  diplomat_result_void_ICU4XError ICU4XBidiParagraph_reorder_line(
    ffi.Pointer<ICU4XBidiParagraph> self,
    int range_start,
    int range_end,
    ffi.Pointer<DiplomatWriteable> out,
  ) {
    return _ICU4XBidiParagraph_reorder_line(
      self,
      range_start,
      range_end,
      out,
    );
  }

  late final _ICU4XBidiParagraph_reorder_linePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XBidiParagraph>,
                  ffi.Size,
                  ffi.Size,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XBidiParagraph_reorder_line');
  late final _ICU4XBidiParagraph_reorder_line =
      _ICU4XBidiParagraph_reorder_linePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XBidiParagraph>,
              int,
              int,
              ffi.Pointer<DiplomatWriteable>)>();

  int ICU4XBidiParagraph_level_at(
    ffi.Pointer<ICU4XBidiParagraph> self,
    int pos,
  ) {
    return _ICU4XBidiParagraph_level_at(
      self,
      pos,
    );
  }

  late final _ICU4XBidiParagraph_level_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ICU4XBidiParagraph>,
              ffi.Size)>>('ICU4XBidiParagraph_level_at');
  late final _ICU4XBidiParagraph_level_at = _ICU4XBidiParagraph_level_atPtr
      .asFunction<int Function(ffi.Pointer<ICU4XBidiParagraph>, int)>();

  void ICU4XBidiParagraph_destroy(
    ffi.Pointer<ICU4XBidiParagraph> self,
  ) {
    return _ICU4XBidiParagraph_destroy(
      self,
    );
  }

  late final _ICU4XBidiParagraph_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XBidiParagraph>)>>('ICU4XBidiParagraph_destroy');
  late final _ICU4XBidiParagraph_destroy = _ICU4XBidiParagraph_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XBidiParagraph>)>();

  int ICU4XBidiInfo_paragraph_count(
    ffi.Pointer<ICU4XBidiInfo> self,
  ) {
    return _ICU4XBidiInfo_paragraph_count(
      self,
    );
  }

  late final _ICU4XBidiInfo_paragraph_countPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ICU4XBidiInfo>)>>(
      'ICU4XBidiInfo_paragraph_count');
  late final _ICU4XBidiInfo_paragraph_count = _ICU4XBidiInfo_paragraph_countPtr
      .asFunction<int Function(ffi.Pointer<ICU4XBidiInfo>)>();

  ffi.Pointer<ICU4XBidiParagraph> ICU4XBidiInfo_paragraph_at(
    ffi.Pointer<ICU4XBidiInfo> self,
    int n,
  ) {
    return _ICU4XBidiInfo_paragraph_at(
      self,
      n,
    );
  }

  late final _ICU4XBidiInfo_paragraph_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XBidiParagraph> Function(ffi.Pointer<ICU4XBidiInfo>,
              ffi.Size)>>('ICU4XBidiInfo_paragraph_at');
  late final _ICU4XBidiInfo_paragraph_at =
      _ICU4XBidiInfo_paragraph_atPtr.asFunction<
          ffi.Pointer<ICU4XBidiParagraph> Function(
              ffi.Pointer<ICU4XBidiInfo>, int)>();

  int ICU4XBidiInfo_size(
    ffi.Pointer<ICU4XBidiInfo> self,
  ) {
    return _ICU4XBidiInfo_size(
      self,
    );
  }

  late final _ICU4XBidiInfo_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ICU4XBidiInfo>)>>(
      'ICU4XBidiInfo_size');
  late final _ICU4XBidiInfo_size = _ICU4XBidiInfo_sizePtr.asFunction<
      int Function(ffi.Pointer<ICU4XBidiInfo>)>();

  int ICU4XBidiInfo_level_at(
    ffi.Pointer<ICU4XBidiInfo> self,
    int pos,
  ) {
    return _ICU4XBidiInfo_level_at(
      self,
      pos,
    );
  }

  late final _ICU4XBidiInfo_level_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ICU4XBidiInfo>, ffi.Size)>>('ICU4XBidiInfo_level_at');
  late final _ICU4XBidiInfo_level_at = _ICU4XBidiInfo_level_atPtr.asFunction<
      int Function(ffi.Pointer<ICU4XBidiInfo>, int)>();

  void ICU4XBidiInfo_destroy(
    ffi.Pointer<ICU4XBidiInfo> self,
  ) {
    return _ICU4XBidiInfo_destroy(
      self,
    );
  }

  late final _ICU4XBidiInfo_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XBidiInfo>)>>(
      'ICU4XBidiInfo_destroy');
  late final _ICU4XBidiInfo_destroy = _ICU4XBidiInfo_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XBidiInfo>)>();

  void ICU4XListLength_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XListLength_destroy(
      self,
    );
  }

  late final _ICU4XListLength_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XListLength_destroy');
  late final _ICU4XListLength_destroy = _ICU4XListLength_destroyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  int ICU4XLineBreakIteratorLatin1_next(
    ffi.Pointer<ICU4XLineBreakIteratorLatin1> self,
  ) {
    return _ICU4XLineBreakIteratorLatin1_next(
      self,
    );
  }

  late final _ICU4XLineBreakIteratorLatin1_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XLineBreakIteratorLatin1>)>>(
      'ICU4XLineBreakIteratorLatin1_next');
  late final _ICU4XLineBreakIteratorLatin1_next =
      _ICU4XLineBreakIteratorLatin1_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XLineBreakIteratorLatin1>)>();

  void ICU4XLineBreakIteratorLatin1_destroy(
    ffi.Pointer<ICU4XLineBreakIteratorLatin1> self,
  ) {
    return _ICU4XLineBreakIteratorLatin1_destroy(
      self,
    );
  }

  late final _ICU4XLineBreakIteratorLatin1_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLineBreakIteratorLatin1>)>>(
      'ICU4XLineBreakIteratorLatin1_destroy');
  late final _ICU4XLineBreakIteratorLatin1_destroy =
      _ICU4XLineBreakIteratorLatin1_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLineBreakIteratorLatin1>)>();

  void ICU4XLineBreakStrictness_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XLineBreakStrictness_destroy(
      self,
    );
  }

  late final _ICU4XLineBreakStrictness_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XLineBreakStrictness_destroy');
  late final _ICU4XLineBreakStrictness_destroy =
      _ICU4XLineBreakStrictness_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XLineBreakWordOption_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XLineBreakWordOption_destroy(
      self,
    );
  }

  late final _ICU4XLineBreakWordOption_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XLineBreakWordOption_destroy');
  late final _ICU4XLineBreakWordOption_destroy =
      _ICU4XLineBreakWordOption_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XLineBreakOptionsV1_destroy(
    ffi.Pointer<ICU4XLineBreakOptionsV1> self,
  ) {
    return _ICU4XLineBreakOptionsV1_destroy(
      self,
    );
  }

  late final _ICU4XLineBreakOptionsV1_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLineBreakOptionsV1>)>>(
      'ICU4XLineBreakOptionsV1_destroy');
  late final _ICU4XLineBreakOptionsV1_destroy =
      _ICU4XLineBreakOptionsV1_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLineBreakOptionsV1>)>();

  bool ICU4XLogger_init_simple_logger() {
    return _ICU4XLogger_init_simple_logger();
  }

  late final _ICU4XLogger_init_simple_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'ICU4XLogger_init_simple_logger');
  late final _ICU4XLogger_init_simple_logger =
      _ICU4XLogger_init_simple_loggerPtr.asFunction<bool Function()>();

  void ICU4XLogger_destroy(
    ffi.Pointer<ICU4XLogger> self,
  ) {
    return _ICU4XLogger_destroy(
      self,
    );
  }

  late final _ICU4XLogger_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XLogger>)>>(
          'ICU4XLogger_destroy');
  late final _ICU4XLogger_destroy = _ICU4XLogger_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XLogger>)>();

  bool ICU4XUnicodeSetData_contains(
    ffi.Pointer<ICU4XUnicodeSetData> self,
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
  ) {
    return _ICU4XUnicodeSetData_contains(
      self,
      s_data,
      s_len,
    );
  }

  late final _ICU4XUnicodeSetData_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ICU4XUnicodeSetData>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XUnicodeSetData_contains');
  late final _ICU4XUnicodeSetData_contains =
      _ICU4XUnicodeSetData_containsPtr.asFunction<
          bool Function(
              ffi.Pointer<ICU4XUnicodeSetData>, ffi.Pointer<ffi.Char>, int)>();

  bool ICU4XUnicodeSetData_contains_char(
    ffi.Pointer<ICU4XUnicodeSetData> self,
    int cp,
  ) {
    return _ICU4XUnicodeSetData_contains_char(
      self,
      cp,
    );
  }

  late final _ICU4XUnicodeSetData_contains_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ICU4XUnicodeSetData>,
              char32_t)>>('ICU4XUnicodeSetData_contains_char');
  late final _ICU4XUnicodeSetData_contains_char =
      _ICU4XUnicodeSetData_contains_charPtr.asFunction<
          bool Function(ffi.Pointer<ICU4XUnicodeSetData>, int)>();

  bool ICU4XUnicodeSetData_contains32(
    ffi.Pointer<ICU4XUnicodeSetData> self,
    int cp,
  ) {
    return _ICU4XUnicodeSetData_contains32(
      self,
      cp,
    );
  }

  late final _ICU4XUnicodeSetData_contains32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ICU4XUnicodeSetData>,
              ffi.Uint32)>>('ICU4XUnicodeSetData_contains32');
  late final _ICU4XUnicodeSetData_contains32 =
      _ICU4XUnicodeSetData_contains32Ptr.asFunction<
          bool Function(ffi.Pointer<ICU4XUnicodeSetData>, int)>();

  diplomat_result_box_ICU4XUnicodeSetData_ICU4XError
      ICU4XUnicodeSetData_load_basic_emoji(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XUnicodeSetData_load_basic_emoji(
      provider,
    );
  }

  late final _ICU4XUnicodeSetData_load_basic_emojiPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XUnicodeSetData_load_basic_emoji');
  late final _ICU4XUnicodeSetData_load_basic_emoji =
      _ICU4XUnicodeSetData_load_basic_emojiPtr.asFunction<
          diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XUnicodeSetData_ICU4XError
      ICU4XUnicodeSetData_load_exemplars_main(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XUnicodeSetData_load_exemplars_main(
      provider,
      locale,
    );
  }

  late final _ICU4XUnicodeSetData_load_exemplars_mainPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XUnicodeSetData_load_exemplars_main');
  late final _ICU4XUnicodeSetData_load_exemplars_main =
      _ICU4XUnicodeSetData_load_exemplars_mainPtr.asFunction<
          diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_box_ICU4XUnicodeSetData_ICU4XError
      ICU4XUnicodeSetData_load_exemplars_auxiliary(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XUnicodeSetData_load_exemplars_auxiliary(
      provider,
      locale,
    );
  }

  late final _ICU4XUnicodeSetData_load_exemplars_auxiliaryPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XUnicodeSetData_load_exemplars_auxiliary');
  late final _ICU4XUnicodeSetData_load_exemplars_auxiliary =
      _ICU4XUnicodeSetData_load_exemplars_auxiliaryPtr.asFunction<
          diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_box_ICU4XUnicodeSetData_ICU4XError
      ICU4XUnicodeSetData_load_exemplars_punctuation(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XUnicodeSetData_load_exemplars_punctuation(
      provider,
      locale,
    );
  }

  late final _ICU4XUnicodeSetData_load_exemplars_punctuationPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XUnicodeSetData_load_exemplars_punctuation');
  late final _ICU4XUnicodeSetData_load_exemplars_punctuation =
      _ICU4XUnicodeSetData_load_exemplars_punctuationPtr.asFunction<
          diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_box_ICU4XUnicodeSetData_ICU4XError
      ICU4XUnicodeSetData_load_exemplars_numbers(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XUnicodeSetData_load_exemplars_numbers(
      provider,
      locale,
    );
  }

  late final _ICU4XUnicodeSetData_load_exemplars_numbersPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XUnicodeSetData_load_exemplars_numbers');
  late final _ICU4XUnicodeSetData_load_exemplars_numbers =
      _ICU4XUnicodeSetData_load_exemplars_numbersPtr.asFunction<
          diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_box_ICU4XUnicodeSetData_ICU4XError
      ICU4XUnicodeSetData_load_exemplars_index(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XUnicodeSetData_load_exemplars_index(
      provider,
      locale,
    );
  }

  late final _ICU4XUnicodeSetData_load_exemplars_indexPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XUnicodeSetData_load_exemplars_index');
  late final _ICU4XUnicodeSetData_load_exemplars_index =
      _ICU4XUnicodeSetData_load_exemplars_indexPtr.asFunction<
          diplomat_result_box_ICU4XUnicodeSetData_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  void ICU4XUnicodeSetData_destroy(
    ffi.Pointer<ICU4XUnicodeSetData> self,
  ) {
    return _ICU4XUnicodeSetData_destroy(
      self,
    );
  }

  late final _ICU4XUnicodeSetData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XUnicodeSetData>)>>(
      'ICU4XUnicodeSetData_destroy');
  late final _ICU4XUnicodeSetData_destroy = _ICU4XUnicodeSetData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XUnicodeSetData>)>();

  int ICU4XSentenceBreakIteratorUtf16_next(
    ffi.Pointer<ICU4XSentenceBreakIteratorUtf16> self,
  ) {
    return _ICU4XSentenceBreakIteratorUtf16_next(
      self,
    );
  }

  late final _ICU4XSentenceBreakIteratorUtf16_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ICU4XSentenceBreakIteratorUtf16>)>>(
      'ICU4XSentenceBreakIteratorUtf16_next');
  late final _ICU4XSentenceBreakIteratorUtf16_next =
      _ICU4XSentenceBreakIteratorUtf16_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XSentenceBreakIteratorUtf16>)>();

  void ICU4XSentenceBreakIteratorUtf16_destroy(
    ffi.Pointer<ICU4XSentenceBreakIteratorUtf16> self,
  ) {
    return _ICU4XSentenceBreakIteratorUtf16_destroy(
      self,
    );
  }

  late final _ICU4XSentenceBreakIteratorUtf16_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XSentenceBreakIteratorUtf16>)>>(
      'ICU4XSentenceBreakIteratorUtf16_destroy');
  late final _ICU4XSentenceBreakIteratorUtf16_destroy =
      _ICU4XSentenceBreakIteratorUtf16_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XSentenceBreakIteratorUtf16>)>();

  ffi.Pointer<ICU4XLocale> ICU4XLocaleFallbackIterator_get(
    ffi.Pointer<ICU4XLocaleFallbackIterator> self,
  ) {
    return _ICU4XLocaleFallbackIterator_get(
      self,
    );
  }

  late final _ICU4XLocaleFallbackIterator_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ICU4XLocale> Function(
                  ffi.Pointer<ICU4XLocaleFallbackIterator>)>>(
      'ICU4XLocaleFallbackIterator_get');
  late final _ICU4XLocaleFallbackIterator_get =
      _ICU4XLocaleFallbackIterator_getPtr.asFunction<
          ffi.Pointer<ICU4XLocale> Function(
              ffi.Pointer<ICU4XLocaleFallbackIterator>)>();

  void ICU4XLocaleFallbackIterator_step(
    ffi.Pointer<ICU4XLocaleFallbackIterator> self,
  ) {
    return _ICU4XLocaleFallbackIterator_step(
      self,
    );
  }

  late final _ICU4XLocaleFallbackIterator_stepPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLocaleFallbackIterator>)>>(
      'ICU4XLocaleFallbackIterator_step');
  late final _ICU4XLocaleFallbackIterator_step =
      _ICU4XLocaleFallbackIterator_stepPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLocaleFallbackIterator>)>();

  void ICU4XLocaleFallbackIterator_destroy(
    ffi.Pointer<ICU4XLocaleFallbackIterator> self,
  ) {
    return _ICU4XLocaleFallbackIterator_destroy(
      self,
    );
  }

  late final _ICU4XLocaleFallbackIterator_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLocaleFallbackIterator>)>>(
      'ICU4XLocaleFallbackIterator_destroy');
  late final _ICU4XLocaleFallbackIterator_destroy =
      _ICU4XLocaleFallbackIterator_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLocaleFallbackIterator>)>();

  diplomat_result_box_ICU4XTimeFormatter_ICU4XError
      ICU4XTimeFormatter_create_with_length(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int length,
  ) {
    return _ICU4XTimeFormatter_create_with_length(
      provider,
      locale,
      length,
    );
  }

  late final _ICU4XTimeFormatter_create_with_lengthPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32)>>('ICU4XTimeFormatter_create_with_length');
  late final _ICU4XTimeFormatter_create_with_length =
      _ICU4XTimeFormatter_create_with_lengthPtr.asFunction<
          diplomat_result_box_ICU4XTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>, int)>();

  diplomat_result_void_ICU4XError ICU4XTimeFormatter_format_time(
    ffi.Pointer<ICU4XTimeFormatter> self,
    ffi.Pointer<ICU4XTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XTimeFormatter_format_time(
      self,
      value,
      write,
    );
  }

  late final _ICU4XTimeFormatter_format_timePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XTimeFormatter>,
                  ffi.Pointer<ICU4XTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XTimeFormatter_format_time');
  late final _ICU4XTimeFormatter_format_time =
      _ICU4XTimeFormatter_format_timePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeFormatter>,
              ffi.Pointer<ICU4XTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XTimeFormatter_format_datetime(
    ffi.Pointer<ICU4XTimeFormatter> self,
    ffi.Pointer<ICU4XDateTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XTimeFormatter_format_datetime(
      self,
      value,
      write,
    );
  }

  late final _ICU4XTimeFormatter_format_datetimePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XTimeFormatter>,
                  ffi.Pointer<ICU4XDateTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XTimeFormatter_format_datetime');
  late final _ICU4XTimeFormatter_format_datetime =
      _ICU4XTimeFormatter_format_datetimePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeFormatter>,
              ffi.Pointer<ICU4XDateTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XTimeFormatter_format_iso_datetime(
    ffi.Pointer<ICU4XTimeFormatter> self,
    ffi.Pointer<ICU4XIsoDateTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XTimeFormatter_format_iso_datetime(
      self,
      value,
      write,
    );
  }

  late final _ICU4XTimeFormatter_format_iso_datetimePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XTimeFormatter>,
                  ffi.Pointer<ICU4XIsoDateTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XTimeFormatter_format_iso_datetime');
  late final _ICU4XTimeFormatter_format_iso_datetime =
      _ICU4XTimeFormatter_format_iso_datetimePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeFormatter>,
              ffi.Pointer<ICU4XIsoDateTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XTimeFormatter_destroy(
    ffi.Pointer<ICU4XTimeFormatter> self,
  ) {
    return _ICU4XTimeFormatter_destroy(
      self,
    );
  }

  late final _ICU4XTimeFormatter_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XTimeFormatter>)>>('ICU4XTimeFormatter_destroy');
  late final _ICU4XTimeFormatter_destroy = _ICU4XTimeFormatter_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XTimeFormatter>)>();

  diplomat_result_box_ICU4XGregorianDateTimeFormatter_ICU4XError
      ICU4XGregorianDateTimeFormatter_create_with_lengths(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int date_length,
    int time_length,
  ) {
    return _ICU4XGregorianDateTimeFormatter_create_with_lengths(
      provider,
      locale,
      date_length,
      time_length,
    );
  }

  late final _ICU4XGregorianDateTimeFormatter_create_with_lengthsPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XGregorianDateTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32,
              ffi.Int32)>>('ICU4XGregorianDateTimeFormatter_create_with_lengths');
  late final _ICU4XGregorianDateTimeFormatter_create_with_lengths =
      _ICU4XGregorianDateTimeFormatter_create_with_lengthsPtr.asFunction<
          diplomat_result_box_ICU4XGregorianDateTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              int,
              int)>();

  diplomat_result_void_ICU4XError
      ICU4XGregorianDateTimeFormatter_format_iso_datetime(
    ffi.Pointer<ICU4XGregorianDateTimeFormatter> self,
    ffi.Pointer<ICU4XIsoDateTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XGregorianDateTimeFormatter_format_iso_datetime(
      self,
      value,
      write,
    );
  }

  late final _ICU4XGregorianDateTimeFormatter_format_iso_datetimePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XGregorianDateTimeFormatter>,
                  ffi.Pointer<ICU4XIsoDateTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XGregorianDateTimeFormatter_format_iso_datetime');
  late final _ICU4XGregorianDateTimeFormatter_format_iso_datetime =
      _ICU4XGregorianDateTimeFormatter_format_iso_datetimePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XGregorianDateTimeFormatter>,
              ffi.Pointer<ICU4XIsoDateTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XGregorianDateTimeFormatter_destroy(
    ffi.Pointer<ICU4XGregorianDateTimeFormatter> self,
  ) {
    return _ICU4XGregorianDateTimeFormatter_destroy(
      self,
    );
  }

  late final _ICU4XGregorianDateTimeFormatter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XGregorianDateTimeFormatter>)>>(
      'ICU4XGregorianDateTimeFormatter_destroy');
  late final _ICU4XGregorianDateTimeFormatter_destroy =
      _ICU4XGregorianDateTimeFormatter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XGregorianDateTimeFormatter>)>();

  void ICU4XSegmenterWordType_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XSegmenterWordType_destroy(
      self,
    );
  }

  late final _ICU4XSegmenterWordType_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XSegmenterWordType_destroy');
  late final _ICU4XSegmenterWordType_destroy =
      _ICU4XSegmenterWordType_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  int ICU4XWordBreakIteratorUtf8_next(
    ffi.Pointer<ICU4XWordBreakIteratorUtf8> self,
  ) {
    return _ICU4XWordBreakIteratorUtf8_next(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorUtf8_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XWordBreakIteratorUtf8>)>>(
      'ICU4XWordBreakIteratorUtf8_next');
  late final _ICU4XWordBreakIteratorUtf8_next =
      _ICU4XWordBreakIteratorUtf8_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XWordBreakIteratorUtf8>)>();

  int ICU4XWordBreakIteratorUtf8_word_type(
    ffi.Pointer<ICU4XWordBreakIteratorUtf8> self,
  ) {
    return _ICU4XWordBreakIteratorUtf8_word_type(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorUtf8_word_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XWordBreakIteratorUtf8>)>>(
      'ICU4XWordBreakIteratorUtf8_word_type');
  late final _ICU4XWordBreakIteratorUtf8_word_type =
      _ICU4XWordBreakIteratorUtf8_word_typePtr.asFunction<
          int Function(ffi.Pointer<ICU4XWordBreakIteratorUtf8>)>();

  bool ICU4XWordBreakIteratorUtf8_is_word_like(
    ffi.Pointer<ICU4XWordBreakIteratorUtf8> self,
  ) {
    return _ICU4XWordBreakIteratorUtf8_is_word_like(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorUtf8_is_word_likePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ICU4XWordBreakIteratorUtf8>)>>(
      'ICU4XWordBreakIteratorUtf8_is_word_like');
  late final _ICU4XWordBreakIteratorUtf8_is_word_like =
      _ICU4XWordBreakIteratorUtf8_is_word_likePtr.asFunction<
          bool Function(ffi.Pointer<ICU4XWordBreakIteratorUtf8>)>();

  void ICU4XWordBreakIteratorUtf8_destroy(
    ffi.Pointer<ICU4XWordBreakIteratorUtf8> self,
  ) {
    return _ICU4XWordBreakIteratorUtf8_destroy(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorUtf8_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XWordBreakIteratorUtf8>)>>(
      'ICU4XWordBreakIteratorUtf8_destroy');
  late final _ICU4XWordBreakIteratorUtf8_destroy =
      _ICU4XWordBreakIteratorUtf8_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XWordBreakIteratorUtf8>)>();

  int ICU4XWordBreakIteratorUtf16_next(
    ffi.Pointer<ICU4XWordBreakIteratorUtf16> self,
  ) {
    return _ICU4XWordBreakIteratorUtf16_next(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorUtf16_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XWordBreakIteratorUtf16>)>>(
      'ICU4XWordBreakIteratorUtf16_next');
  late final _ICU4XWordBreakIteratorUtf16_next =
      _ICU4XWordBreakIteratorUtf16_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XWordBreakIteratorUtf16>)>();

  int ICU4XWordBreakIteratorUtf16_word_type(
    ffi.Pointer<ICU4XWordBreakIteratorUtf16> self,
  ) {
    return _ICU4XWordBreakIteratorUtf16_word_type(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorUtf16_word_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XWordBreakIteratorUtf16>)>>(
      'ICU4XWordBreakIteratorUtf16_word_type');
  late final _ICU4XWordBreakIteratorUtf16_word_type =
      _ICU4XWordBreakIteratorUtf16_word_typePtr.asFunction<
          int Function(ffi.Pointer<ICU4XWordBreakIteratorUtf16>)>();

  bool ICU4XWordBreakIteratorUtf16_is_word_like(
    ffi.Pointer<ICU4XWordBreakIteratorUtf16> self,
  ) {
    return _ICU4XWordBreakIteratorUtf16_is_word_like(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorUtf16_is_word_likePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ICU4XWordBreakIteratorUtf16>)>>(
      'ICU4XWordBreakIteratorUtf16_is_word_like');
  late final _ICU4XWordBreakIteratorUtf16_is_word_like =
      _ICU4XWordBreakIteratorUtf16_is_word_likePtr.asFunction<
          bool Function(ffi.Pointer<ICU4XWordBreakIteratorUtf16>)>();

  void ICU4XWordBreakIteratorUtf16_destroy(
    ffi.Pointer<ICU4XWordBreakIteratorUtf16> self,
  ) {
    return _ICU4XWordBreakIteratorUtf16_destroy(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorUtf16_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XWordBreakIteratorUtf16>)>>(
      'ICU4XWordBreakIteratorUtf16_destroy');
  late final _ICU4XWordBreakIteratorUtf16_destroy =
      _ICU4XWordBreakIteratorUtf16_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XWordBreakIteratorUtf16>)>();

  int ICU4XWordBreakIteratorLatin1_next(
    ffi.Pointer<ICU4XWordBreakIteratorLatin1> self,
  ) {
    return _ICU4XWordBreakIteratorLatin1_next(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorLatin1_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XWordBreakIteratorLatin1>)>>(
      'ICU4XWordBreakIteratorLatin1_next');
  late final _ICU4XWordBreakIteratorLatin1_next =
      _ICU4XWordBreakIteratorLatin1_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XWordBreakIteratorLatin1>)>();

  int ICU4XWordBreakIteratorLatin1_word_type(
    ffi.Pointer<ICU4XWordBreakIteratorLatin1> self,
  ) {
    return _ICU4XWordBreakIteratorLatin1_word_type(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorLatin1_word_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XWordBreakIteratorLatin1>)>>(
      'ICU4XWordBreakIteratorLatin1_word_type');
  late final _ICU4XWordBreakIteratorLatin1_word_type =
      _ICU4XWordBreakIteratorLatin1_word_typePtr.asFunction<
          int Function(ffi.Pointer<ICU4XWordBreakIteratorLatin1>)>();

  bool ICU4XWordBreakIteratorLatin1_is_word_like(
    ffi.Pointer<ICU4XWordBreakIteratorLatin1> self,
  ) {
    return _ICU4XWordBreakIteratorLatin1_is_word_like(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorLatin1_is_word_likePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ICU4XWordBreakIteratorLatin1>)>>(
      'ICU4XWordBreakIteratorLatin1_is_word_like');
  late final _ICU4XWordBreakIteratorLatin1_is_word_like =
      _ICU4XWordBreakIteratorLatin1_is_word_likePtr.asFunction<
          bool Function(ffi.Pointer<ICU4XWordBreakIteratorLatin1>)>();

  void ICU4XWordBreakIteratorLatin1_destroy(
    ffi.Pointer<ICU4XWordBreakIteratorLatin1> self,
  ) {
    return _ICU4XWordBreakIteratorLatin1_destroy(
      self,
    );
  }

  late final _ICU4XWordBreakIteratorLatin1_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XWordBreakIteratorLatin1>)>>(
      'ICU4XWordBreakIteratorLatin1_destroy');
  late final _ICU4XWordBreakIteratorLatin1_destroy =
      _ICU4XWordBreakIteratorLatin1_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XWordBreakIteratorLatin1>)>();

  diplomat_result_box_ICU4XWordSegmenter_ICU4XError
      ICU4XWordSegmenter_create_auto(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XWordSegmenter_create_auto(
      provider,
    );
  }

  late final _ICU4XWordSegmenter_create_autoPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XWordSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XWordSegmenter_create_auto');
  late final _ICU4XWordSegmenter_create_auto =
      _ICU4XWordSegmenter_create_autoPtr.asFunction<
          diplomat_result_box_ICU4XWordSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XWordSegmenter_ICU4XError
      ICU4XWordSegmenter_create_lstm(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XWordSegmenter_create_lstm(
      provider,
    );
  }

  late final _ICU4XWordSegmenter_create_lstmPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XWordSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XWordSegmenter_create_lstm');
  late final _ICU4XWordSegmenter_create_lstm =
      _ICU4XWordSegmenter_create_lstmPtr.asFunction<
          diplomat_result_box_ICU4XWordSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XWordSegmenter_ICU4XError
      ICU4XWordSegmenter_create_dictionary(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XWordSegmenter_create_dictionary(
      provider,
    );
  }

  late final _ICU4XWordSegmenter_create_dictionaryPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XWordSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XWordSegmenter_create_dictionary');
  late final _ICU4XWordSegmenter_create_dictionary =
      _ICU4XWordSegmenter_create_dictionaryPtr.asFunction<
          diplomat_result_box_ICU4XWordSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  ffi.Pointer<ICU4XWordBreakIteratorUtf8> ICU4XWordSegmenter_segment_utf8(
    ffi.Pointer<ICU4XWordSegmenter> self,
    ffi.Pointer<ffi.Char> input_data,
    int input_len,
  ) {
    return _ICU4XWordSegmenter_segment_utf8(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XWordSegmenter_segment_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XWordBreakIteratorUtf8> Function(
              ffi.Pointer<ICU4XWordSegmenter>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XWordSegmenter_segment_utf8');
  late final _ICU4XWordSegmenter_segment_utf8 =
      _ICU4XWordSegmenter_segment_utf8Ptr.asFunction<
          ffi.Pointer<ICU4XWordBreakIteratorUtf8> Function(
              ffi.Pointer<ICU4XWordSegmenter>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ICU4XWordBreakIteratorUtf16> ICU4XWordSegmenter_segment_utf16(
    ffi.Pointer<ICU4XWordSegmenter> self,
    ffi.Pointer<ffi.Uint16> input_data,
    int input_len,
  ) {
    return _ICU4XWordSegmenter_segment_utf16(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XWordSegmenter_segment_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XWordBreakIteratorUtf16> Function(
              ffi.Pointer<ICU4XWordSegmenter>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Size)>>('ICU4XWordSegmenter_segment_utf16');
  late final _ICU4XWordSegmenter_segment_utf16 =
      _ICU4XWordSegmenter_segment_utf16Ptr.asFunction<
          ffi.Pointer<ICU4XWordBreakIteratorUtf16> Function(
              ffi.Pointer<ICU4XWordSegmenter>, ffi.Pointer<ffi.Uint16>, int)>();

  ffi.Pointer<ICU4XWordBreakIteratorLatin1> ICU4XWordSegmenter_segment_latin1(
    ffi.Pointer<ICU4XWordSegmenter> self,
    ffi.Pointer<ffi.Uint8> input_data,
    int input_len,
  ) {
    return _ICU4XWordSegmenter_segment_latin1(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XWordSegmenter_segment_latin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XWordBreakIteratorLatin1> Function(
              ffi.Pointer<ICU4XWordSegmenter>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('ICU4XWordSegmenter_segment_latin1');
  late final _ICU4XWordSegmenter_segment_latin1 =
      _ICU4XWordSegmenter_segment_latin1Ptr.asFunction<
          ffi.Pointer<ICU4XWordBreakIteratorLatin1> Function(
              ffi.Pointer<ICU4XWordSegmenter>, ffi.Pointer<ffi.Uint8>, int)>();

  void ICU4XWordSegmenter_destroy(
    ffi.Pointer<ICU4XWordSegmenter> self,
  ) {
    return _ICU4XWordSegmenter_destroy(
      self,
    );
  }

  late final _ICU4XWordSegmenter_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XWordSegmenter>)>>('ICU4XWordSegmenter_destroy');
  late final _ICU4XWordSegmenter_destroy = _ICU4XWordSegmenter_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XWordSegmenter>)>();

  void ICU4XDecomposed_destroy(
    ffi.Pointer<ICU4XDecomposed> self,
  ) {
    return _ICU4XDecomposed_destroy(
      self,
    );
  }

  late final _ICU4XDecomposed_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XDecomposed>)>>(
      'ICU4XDecomposed_destroy');
  late final _ICU4XDecomposed_destroy = _ICU4XDecomposed_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XDecomposed>)>();

  diplomat_result_box_ICU4XTimeZoneFormatter_ICU4XError
      ICU4XTimeZoneFormatter_create_with_localized_gmt_fallback(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XTimeZoneFormatter_create_with_localized_gmt_fallback(
      provider,
      locale,
    );
  }

  late final _ICU4XTimeZoneFormatter_create_with_localized_gmt_fallbackPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XTimeZoneFormatter_ICU4XError Function(
                      ffi.Pointer<ICU4XDataProvider>,
                      ffi.Pointer<ICU4XLocale>)>>(
          'ICU4XTimeZoneFormatter_create_with_localized_gmt_fallback');
  late final _ICU4XTimeZoneFormatter_create_with_localized_gmt_fallback =
      _ICU4XTimeZoneFormatter_create_with_localized_gmt_fallbackPtr.asFunction<
          diplomat_result_box_ICU4XTimeZoneFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_box_ICU4XTimeZoneFormatter_ICU4XError
      ICU4XTimeZoneFormatter_create_with_iso_8601_fallback(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    ICU4XIsoTimeZoneOptions options,
  ) {
    return _ICU4XTimeZoneFormatter_create_with_iso_8601_fallback(
      provider,
      locale,
      options,
    );
  }

  late final _ICU4XTimeZoneFormatter_create_with_iso_8601_fallbackPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XTimeZoneFormatter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XLocale>,
                  ICU4XIsoTimeZoneOptions)>>(
      'ICU4XTimeZoneFormatter_create_with_iso_8601_fallback');
  late final _ICU4XTimeZoneFormatter_create_with_iso_8601_fallback =
      _ICU4XTimeZoneFormatter_create_with_iso_8601_fallbackPtr.asFunction<
          diplomat_result_box_ICU4XTimeZoneFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ICU4XIsoTimeZoneOptions)>();

  diplomat_result_void_ICU4XError
      ICU4XTimeZoneFormatter_load_generic_non_location_long(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XTimeZoneFormatter_load_generic_non_location_long(
      self,
      provider,
    );
  }

  late final _ICU4XTimeZoneFormatter_load_generic_non_location_longPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_void_ICU4XError Function(
                      ffi.Pointer<ICU4XTimeZoneFormatter>,
                      ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XTimeZoneFormatter_load_generic_non_location_long');
  late final _ICU4XTimeZoneFormatter_load_generic_non_location_long =
      _ICU4XTimeZoneFormatter_load_generic_non_location_longPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeZoneFormatter>,
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError
      ICU4XTimeZoneFormatter_load_generic_non_location_short(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XTimeZoneFormatter_load_generic_non_location_short(
      self,
      provider,
    );
  }

  late final _ICU4XTimeZoneFormatter_load_generic_non_location_shortPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_void_ICU4XError Function(
                      ffi.Pointer<ICU4XTimeZoneFormatter>,
                      ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XTimeZoneFormatter_load_generic_non_location_short');
  late final _ICU4XTimeZoneFormatter_load_generic_non_location_short =
      _ICU4XTimeZoneFormatter_load_generic_non_location_shortPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeZoneFormatter>,
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError
      ICU4XTimeZoneFormatter_load_specific_non_location_long(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XTimeZoneFormatter_load_specific_non_location_long(
      self,
      provider,
    );
  }

  late final _ICU4XTimeZoneFormatter_load_specific_non_location_longPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_void_ICU4XError Function(
                      ffi.Pointer<ICU4XTimeZoneFormatter>,
                      ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XTimeZoneFormatter_load_specific_non_location_long');
  late final _ICU4XTimeZoneFormatter_load_specific_non_location_long =
      _ICU4XTimeZoneFormatter_load_specific_non_location_longPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeZoneFormatter>,
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError
      ICU4XTimeZoneFormatter_load_specific_non_location_short(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XTimeZoneFormatter_load_specific_non_location_short(
      self,
      provider,
    );
  }

  late final _ICU4XTimeZoneFormatter_load_specific_non_location_shortPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_void_ICU4XError Function(
                      ffi.Pointer<ICU4XTimeZoneFormatter>,
                      ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XTimeZoneFormatter_load_specific_non_location_short');
  late final _ICU4XTimeZoneFormatter_load_specific_non_location_short =
      _ICU4XTimeZoneFormatter_load_specific_non_location_shortPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeZoneFormatter>,
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError
      ICU4XTimeZoneFormatter_load_generic_location_format(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XTimeZoneFormatter_load_generic_location_format(
      self,
      provider,
    );
  }

  late final _ICU4XTimeZoneFormatter_load_generic_location_formatPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XTimeZoneFormatter>,
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XTimeZoneFormatter_load_generic_location_format');
  late final _ICU4XTimeZoneFormatter_load_generic_location_format =
      _ICU4XTimeZoneFormatter_load_generic_location_formatPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeZoneFormatter>,
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError
      ICU4XTimeZoneFormatter_load_localized_gmt_format(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
  ) {
    return _ICU4XTimeZoneFormatter_load_localized_gmt_format(
      self,
    );
  }

  late final _ICU4XTimeZoneFormatter_load_localized_gmt_formatPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XTimeZoneFormatter>)>>(
      'ICU4XTimeZoneFormatter_load_localized_gmt_format');
  late final _ICU4XTimeZoneFormatter_load_localized_gmt_format =
      _ICU4XTimeZoneFormatter_load_localized_gmt_formatPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeZoneFormatter>)>();

  diplomat_result_void_ICU4XError ICU4XTimeZoneFormatter_load_iso_8601_format(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
    ICU4XIsoTimeZoneOptions options,
  ) {
    return _ICU4XTimeZoneFormatter_load_iso_8601_format(
      self,
      options,
    );
  }

  late final _ICU4XTimeZoneFormatter_load_iso_8601_formatPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XTimeZoneFormatter>,
                  ICU4XIsoTimeZoneOptions)>>(
      'ICU4XTimeZoneFormatter_load_iso_8601_format');
  late final _ICU4XTimeZoneFormatter_load_iso_8601_format =
      _ICU4XTimeZoneFormatter_load_iso_8601_formatPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeZoneFormatter>, ICU4XIsoTimeZoneOptions)>();

  diplomat_result_void_ICU4XError
      ICU4XTimeZoneFormatter_format_custom_time_zone(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
    ffi.Pointer<ICU4XCustomTimeZone> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XTimeZoneFormatter_format_custom_time_zone(
      self,
      value,
      write,
    );
  }

  late final _ICU4XTimeZoneFormatter_format_custom_time_zonePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XTimeZoneFormatter>,
                  ffi.Pointer<ICU4XCustomTimeZone>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XTimeZoneFormatter_format_custom_time_zone');
  late final _ICU4XTimeZoneFormatter_format_custom_time_zone =
      _ICU4XTimeZoneFormatter_format_custom_time_zonePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XTimeZoneFormatter>,
              ffi.Pointer<ICU4XCustomTimeZone>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XTimeZoneFormatter_destroy(
    ffi.Pointer<ICU4XTimeZoneFormatter> self,
  ) {
    return _ICU4XTimeZoneFormatter_destroy(
      self,
    );
  }

  late final _ICU4XTimeZoneFormatter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XTimeZoneFormatter>)>>(
      'ICU4XTimeZoneFormatter_destroy');
  late final _ICU4XTimeZoneFormatter_destroy =
      _ICU4XTimeZoneFormatter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XTimeZoneFormatter>)>();

  int ICU4XPropertyValueNameToEnumMapper_get_strict(
    ffi.Pointer<ICU4XPropertyValueNameToEnumMapper> self,
    ffi.Pointer<ffi.Char> name_data,
    int name_len,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_get_strict(
      self,
      name_data,
      name_len,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_get_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ICU4XPropertyValueNameToEnumMapper>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XPropertyValueNameToEnumMapper_get_strict');
  late final _ICU4XPropertyValueNameToEnumMapper_get_strict =
      _ICU4XPropertyValueNameToEnumMapper_get_strictPtr.asFunction<
          int Function(ffi.Pointer<ICU4XPropertyValueNameToEnumMapper>,
              ffi.Pointer<ffi.Char>, int)>();

  int ICU4XPropertyValueNameToEnumMapper_get_loose(
    ffi.Pointer<ICU4XPropertyValueNameToEnumMapper> self,
    ffi.Pointer<ffi.Char> name_data,
    int name_len,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_get_loose(
      self,
      name_data,
      name_len,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_get_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ICU4XPropertyValueNameToEnumMapper>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XPropertyValueNameToEnumMapper_get_loose');
  late final _ICU4XPropertyValueNameToEnumMapper_get_loose =
      _ICU4XPropertyValueNameToEnumMapper_get_loosePtr.asFunction<
          int Function(ffi.Pointer<ICU4XPropertyValueNameToEnumMapper>,
              ffi.Pointer<ffi.Char>, int)>();

  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
      ICU4XPropertyValueNameToEnumMapper_load_general_category(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_load_general_category(
      provider,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_load_general_categoryPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                      Function(ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XPropertyValueNameToEnumMapper_load_general_category');
  late final _ICU4XPropertyValueNameToEnumMapper_load_general_category =
      _ICU4XPropertyValueNameToEnumMapper_load_general_categoryPtr.asFunction<
          diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
      ICU4XPropertyValueNameToEnumMapper_load_bidi_class(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_load_bidi_class(
      provider,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_load_bidi_classPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XPropertyValueNameToEnumMapper_load_bidi_class');
  late final _ICU4XPropertyValueNameToEnumMapper_load_bidi_class =
      _ICU4XPropertyValueNameToEnumMapper_load_bidi_classPtr.asFunction<
          diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
      ICU4XPropertyValueNameToEnumMapper_load_east_asian_width(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_load_east_asian_width(
      provider,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_load_east_asian_widthPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                      Function(ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XPropertyValueNameToEnumMapper_load_east_asian_width');
  late final _ICU4XPropertyValueNameToEnumMapper_load_east_asian_width =
      _ICU4XPropertyValueNameToEnumMapper_load_east_asian_widthPtr.asFunction<
          diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
      ICU4XPropertyValueNameToEnumMapper_load_line_break(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_load_line_break(
      provider,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_load_line_breakPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XPropertyValueNameToEnumMapper_load_line_break');
  late final _ICU4XPropertyValueNameToEnumMapper_load_line_break =
      _ICU4XPropertyValueNameToEnumMapper_load_line_breakPtr.asFunction<
          diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
      ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break(
      provider,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_breakPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                      Function(ffi.Pointer<ICU4XDataProvider>)>>(
          'ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break');
  late final _ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break =
      _ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_breakPtr
          .asFunction<
              diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
      ICU4XPropertyValueNameToEnumMapper_load_word_break(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_load_word_break(
      provider,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_load_word_breakPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XPropertyValueNameToEnumMapper_load_word_break');
  late final _ICU4XPropertyValueNameToEnumMapper_load_word_break =
      _ICU4XPropertyValueNameToEnumMapper_load_word_breakPtr.asFunction<
          diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
      ICU4XPropertyValueNameToEnumMapper_load_sentence_break(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_load_sentence_break(
      provider,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_load_sentence_breakPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XPropertyValueNameToEnumMapper_load_sentence_break');
  late final _ICU4XPropertyValueNameToEnumMapper_load_sentence_break =
      _ICU4XPropertyValueNameToEnumMapper_load_sentence_breakPtr.asFunction<
          diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
      ICU4XPropertyValueNameToEnumMapper_load_script(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_load_script(
      provider,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_load_scriptPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XPropertyValueNameToEnumMapper_load_script');
  late final _ICU4XPropertyValueNameToEnumMapper_load_script =
      _ICU4XPropertyValueNameToEnumMapper_load_scriptPtr.asFunction<
          diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
              Function(ffi.Pointer<ICU4XDataProvider>)>();

  void ICU4XPropertyValueNameToEnumMapper_destroy(
    ffi.Pointer<ICU4XPropertyValueNameToEnumMapper> self,
  ) {
    return _ICU4XPropertyValueNameToEnumMapper_destroy(
      self,
    );
  }

  late final _ICU4XPropertyValueNameToEnumMapper_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XPropertyValueNameToEnumMapper>)>>(
      'ICU4XPropertyValueNameToEnumMapper_destroy');
  late final _ICU4XPropertyValueNameToEnumMapper_destroy =
      _ICU4XPropertyValueNameToEnumMapper_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XPropertyValueNameToEnumMapper>)>();

  diplomat_result_box_ICU4XDataStruct_ICU4XError
      ICU4XDataStruct_create_decimal_symbols_v1(
    ffi.Pointer<ffi.Char> plus_sign_prefix_data,
    int plus_sign_prefix_len,
    ffi.Pointer<ffi.Char> plus_sign_suffix_data,
    int plus_sign_suffix_len,
    ffi.Pointer<ffi.Char> minus_sign_prefix_data,
    int minus_sign_prefix_len,
    ffi.Pointer<ffi.Char> minus_sign_suffix_data,
    int minus_sign_suffix_len,
    ffi.Pointer<ffi.Char> decimal_separator_data,
    int decimal_separator_len,
    ffi.Pointer<ffi.Char> grouping_separator_data,
    int grouping_separator_len,
    int primary_group_size,
    int secondary_group_size,
    int min_group_size,
    ffi.Pointer<char32_t> digits_data,
    int digits_len,
  ) {
    return _ICU4XDataStruct_create_decimal_symbols_v1(
      plus_sign_prefix_data,
      plus_sign_prefix_len,
      plus_sign_suffix_data,
      plus_sign_suffix_len,
      minus_sign_prefix_data,
      minus_sign_prefix_len,
      minus_sign_suffix_data,
      minus_sign_suffix_len,
      decimal_separator_data,
      decimal_separator_len,
      grouping_separator_data,
      grouping_separator_len,
      primary_group_size,
      secondary_group_size,
      min_group_size,
      digits_data,
      digits_len,
    );
  }

  late final _ICU4XDataStruct_create_decimal_symbols_v1Ptr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XDataStruct_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Pointer<char32_t>,
              ffi.Size)>>('ICU4XDataStruct_create_decimal_symbols_v1');
  late final _ICU4XDataStruct_create_decimal_symbols_v1 =
      _ICU4XDataStruct_create_decimal_symbols_v1Ptr.asFunction<
          diplomat_result_box_ICU4XDataStruct_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              int,
              ffi.Pointer<char32_t>,
              int)>();

  void ICU4XDataStruct_destroy(
    ffi.Pointer<ICU4XDataStruct> self,
  ) {
    return _ICU4XDataStruct_destroy(
      self,
    );
  }

  late final _ICU4XDataStruct_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XDataStruct>)>>(
      'ICU4XDataStruct_destroy');
  late final _ICU4XDataStruct_destroy = _ICU4XDataStruct_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XDataStruct>)>();

  diplomat_result_box_ICU4XLocaleExpander_ICU4XError ICU4XLocaleExpander_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XLocaleExpander_create(
      provider,
    );
  }

  late final _ICU4XLocaleExpander_createPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XLocaleExpander_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>>('ICU4XLocaleExpander_create');
  late final _ICU4XLocaleExpander_create =
      _ICU4XLocaleExpander_createPtr.asFunction<
          diplomat_result_box_ICU4XLocaleExpander_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XLocaleExpander_ICU4XError
      ICU4XLocaleExpander_create_extended(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XLocaleExpander_create_extended(
      provider,
    );
  }

  late final _ICU4XLocaleExpander_create_extendedPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLocaleExpander_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XLocaleExpander_create_extended');
  late final _ICU4XLocaleExpander_create_extended =
      _ICU4XLocaleExpander_create_extendedPtr.asFunction<
          diplomat_result_box_ICU4XLocaleExpander_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  int ICU4XLocaleExpander_maximize(
    ffi.Pointer<ICU4XLocaleExpander> self,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XLocaleExpander_maximize(
      self,
      locale,
    );
  }

  late final _ICU4XLocaleExpander_maximizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ICU4XLocaleExpander>,
              ffi.Pointer<ICU4XLocale>)>>('ICU4XLocaleExpander_maximize');
  late final _ICU4XLocaleExpander_maximize =
      _ICU4XLocaleExpander_maximizePtr.asFunction<
          int Function(
              ffi.Pointer<ICU4XLocaleExpander>, ffi.Pointer<ICU4XLocale>)>();

  int ICU4XLocaleExpander_minimize(
    ffi.Pointer<ICU4XLocaleExpander> self,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XLocaleExpander_minimize(
      self,
      locale,
    );
  }

  late final _ICU4XLocaleExpander_minimizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ICU4XLocaleExpander>,
              ffi.Pointer<ICU4XLocale>)>>('ICU4XLocaleExpander_minimize');
  late final _ICU4XLocaleExpander_minimize =
      _ICU4XLocaleExpander_minimizePtr.asFunction<
          int Function(
              ffi.Pointer<ICU4XLocaleExpander>, ffi.Pointer<ICU4XLocale>)>();

  void ICU4XLocaleExpander_destroy(
    ffi.Pointer<ICU4XLocaleExpander> self,
  ) {
    return _ICU4XLocaleExpander_destroy(
      self,
    );
  }

  late final _ICU4XLocaleExpander_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLocaleExpander>)>>(
      'ICU4XLocaleExpander_destroy');
  late final _ICU4XLocaleExpander_destroy = _ICU4XLocaleExpander_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XLocaleExpander>)>();

  int ICU4XCodePointMapData8_get(
    ffi.Pointer<ICU4XCodePointMapData8> self,
    int cp,
  ) {
    return _ICU4XCodePointMapData8_get(
      self,
      cp,
    );
  }

  late final _ICU4XCodePointMapData8_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ICU4XCodePointMapData8>,
              char32_t)>>('ICU4XCodePointMapData8_get');
  late final _ICU4XCodePointMapData8_get = _ICU4XCodePointMapData8_getPtr
      .asFunction<int Function(ffi.Pointer<ICU4XCodePointMapData8>, int)>();

  int ICU4XCodePointMapData8_get32(
    ffi.Pointer<ICU4XCodePointMapData8> self,
    int cp,
  ) {
    return _ICU4XCodePointMapData8_get32(
      self,
      cp,
    );
  }

  late final _ICU4XCodePointMapData8_get32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ICU4XCodePointMapData8>,
              ffi.Uint32)>>('ICU4XCodePointMapData8_get32');
  late final _ICU4XCodePointMapData8_get32 = _ICU4XCodePointMapData8_get32Ptr
      .asFunction<int Function(ffi.Pointer<ICU4XCodePointMapData8>, int)>();

  int ICU4XCodePointMapData8_general_category_to_mask(
    int gc,
  ) {
    return _ICU4XCodePointMapData8_general_category_to_mask(
      gc,
    );
  }

  late final _ICU4XCodePointMapData8_general_category_to_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint8)>>(
          'ICU4XCodePointMapData8_general_category_to_mask');
  late final _ICU4XCodePointMapData8_general_category_to_mask =
      _ICU4XCodePointMapData8_general_category_to_maskPtr.asFunction<
          int Function(int)>();

  ffi.Pointer<CodePointRangeIterator>
      ICU4XCodePointMapData8_iter_ranges_for_value(
    ffi.Pointer<ICU4XCodePointMapData8> self,
    int value,
  ) {
    return _ICU4XCodePointMapData8_iter_ranges_for_value(
      self,
      value,
    );
  }

  late final _ICU4XCodePointMapData8_iter_ranges_for_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointMapData8>,
              ffi.Uint8)>>('ICU4XCodePointMapData8_iter_ranges_for_value');
  late final _ICU4XCodePointMapData8_iter_ranges_for_value =
      _ICU4XCodePointMapData8_iter_ranges_for_valuePtr.asFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointMapData8>, int)>();

  ffi.Pointer<CodePointRangeIterator>
      ICU4XCodePointMapData8_iter_ranges_for_value_complemented(
    ffi.Pointer<ICU4XCodePointMapData8> self,
    int value,
  ) {
    return _ICU4XCodePointMapData8_iter_ranges_for_value_complemented(
      self,
      value,
    );
  }

  late final _ICU4XCodePointMapData8_iter_ranges_for_value_complementedPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CodePointRangeIterator> Function(
                      ffi.Pointer<ICU4XCodePointMapData8>, ffi.Uint8)>>(
          'ICU4XCodePointMapData8_iter_ranges_for_value_complemented');
  late final _ICU4XCodePointMapData8_iter_ranges_for_value_complemented =
      _ICU4XCodePointMapData8_iter_ranges_for_value_complementedPtr.asFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointMapData8>, int)>();

  ffi.Pointer<CodePointRangeIterator>
      ICU4XCodePointMapData8_iter_ranges_for_mask(
    ffi.Pointer<ICU4XCodePointMapData8> self,
    int mask,
  ) {
    return _ICU4XCodePointMapData8_iter_ranges_for_mask(
      self,
      mask,
    );
  }

  late final _ICU4XCodePointMapData8_iter_ranges_for_maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointMapData8>,
              ffi.Uint32)>>('ICU4XCodePointMapData8_iter_ranges_for_mask');
  late final _ICU4XCodePointMapData8_iter_ranges_for_mask =
      _ICU4XCodePointMapData8_iter_ranges_for_maskPtr.asFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointMapData8>, int)>();

  ffi.Pointer<ICU4XCodePointSetData> ICU4XCodePointMapData8_get_set_for_value(
    ffi.Pointer<ICU4XCodePointMapData8> self,
    int value,
  ) {
    return _ICU4XCodePointMapData8_get_set_for_value(
      self,
      value,
    );
  }

  late final _ICU4XCodePointMapData8_get_set_for_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XCodePointSetData> Function(
              ffi.Pointer<ICU4XCodePointMapData8>,
              ffi.Uint8)>>('ICU4XCodePointMapData8_get_set_for_value');
  late final _ICU4XCodePointMapData8_get_set_for_value =
      _ICU4XCodePointMapData8_get_set_for_valuePtr.asFunction<
          ffi.Pointer<ICU4XCodePointSetData> Function(
              ffi.Pointer<ICU4XCodePointMapData8>, int)>();

  diplomat_result_box_ICU4XCodePointMapData8_ICU4XError
      ICU4XCodePointMapData8_load_general_category(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointMapData8_load_general_category(
      provider,
    );
  }

  late final _ICU4XCodePointMapData8_load_general_categoryPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointMapData8_load_general_category');
  late final _ICU4XCodePointMapData8_load_general_category =
      _ICU4XCodePointMapData8_load_general_categoryPtr.asFunction<
          diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointMapData8_ICU4XError
      ICU4XCodePointMapData8_load_bidi_class(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointMapData8_load_bidi_class(
      provider,
    );
  }

  late final _ICU4XCodePointMapData8_load_bidi_classPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointMapData8_load_bidi_class');
  late final _ICU4XCodePointMapData8_load_bidi_class =
      _ICU4XCodePointMapData8_load_bidi_classPtr.asFunction<
          diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointMapData8_ICU4XError
      ICU4XCodePointMapData8_load_east_asian_width(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointMapData8_load_east_asian_width(
      provider,
    );
  }

  late final _ICU4XCodePointMapData8_load_east_asian_widthPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointMapData8_load_east_asian_width');
  late final _ICU4XCodePointMapData8_load_east_asian_width =
      _ICU4XCodePointMapData8_load_east_asian_widthPtr.asFunction<
          diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointMapData8_ICU4XError
      ICU4XCodePointMapData8_load_line_break(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointMapData8_load_line_break(
      provider,
    );
  }

  late final _ICU4XCodePointMapData8_load_line_breakPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointMapData8_load_line_break');
  late final _ICU4XCodePointMapData8_load_line_break =
      _ICU4XCodePointMapData8_load_line_breakPtr.asFunction<
          diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointMapData8_ICU4XError
      ICU4XCodePointMapData8_try_grapheme_cluster_break(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointMapData8_try_grapheme_cluster_break(
      provider,
    );
  }

  late final _ICU4XCodePointMapData8_try_grapheme_cluster_breakPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointMapData8_try_grapheme_cluster_break');
  late final _ICU4XCodePointMapData8_try_grapheme_cluster_break =
      _ICU4XCodePointMapData8_try_grapheme_cluster_breakPtr.asFunction<
          diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointMapData8_ICU4XError
      ICU4XCodePointMapData8_load_word_break(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointMapData8_load_word_break(
      provider,
    );
  }

  late final _ICU4XCodePointMapData8_load_word_breakPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointMapData8_load_word_break');
  late final _ICU4XCodePointMapData8_load_word_break =
      _ICU4XCodePointMapData8_load_word_breakPtr.asFunction<
          diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XCodePointMapData8_ICU4XError
      ICU4XCodePointMapData8_load_sentence_break(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointMapData8_load_sentence_break(
      provider,
    );
  }

  late final _ICU4XCodePointMapData8_load_sentence_breakPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointMapData8_load_sentence_break');
  late final _ICU4XCodePointMapData8_load_sentence_break =
      _ICU4XCodePointMapData8_load_sentence_breakPtr.asFunction<
          diplomat_result_box_ICU4XCodePointMapData8_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  void ICU4XCodePointMapData8_destroy(
    ffi.Pointer<ICU4XCodePointMapData8> self,
  ) {
    return _ICU4XCodePointMapData8_destroy(
      self,
    );
  }

  late final _ICU4XCodePointMapData8_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCodePointMapData8>)>>(
      'ICU4XCodePointMapData8_destroy');
  late final _ICU4XCodePointMapData8_destroy =
      _ICU4XCodePointMapData8_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCodePointMapData8>)>();

  void ICU4XFixedDecimalGroupingStrategy_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XFixedDecimalGroupingStrategy_destroy(
      self,
    );
  }

  late final _ICU4XFixedDecimalGroupingStrategy_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XFixedDecimalGroupingStrategy_destroy');
  late final _ICU4XFixedDecimalGroupingStrategy_destroy =
      _ICU4XFixedDecimalGroupingStrategy_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XFixedDecimalSign_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XFixedDecimalSign_destroy(
      self,
    );
  }

  late final _ICU4XFixedDecimalSign_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XFixedDecimalSign_destroy');
  late final _ICU4XFixedDecimalSign_destroy = _ICU4XFixedDecimalSign_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void ICU4XFixedDecimalSignDisplay_destroy(
    ffi.Pointer<ffi.Int32> self,
  ) {
    return _ICU4XFixedDecimalSignDisplay_destroy(
      self,
    );
  }

  late final _ICU4XFixedDecimalSignDisplay_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'ICU4XFixedDecimalSignDisplay_destroy');
  late final _ICU4XFixedDecimalSignDisplay_destroy =
      _ICU4XFixedDecimalSignDisplay_destroyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ICU4XFixedDecimal> ICU4XFixedDecimal_create_from_i32(
    int v,
  ) {
    return _ICU4XFixedDecimal_create_from_i32(
      v,
    );
  }

  late final _ICU4XFixedDecimal_create_from_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XFixedDecimal> Function(
              ffi.Int32)>>('ICU4XFixedDecimal_create_from_i32');
  late final _ICU4XFixedDecimal_create_from_i32 =
      _ICU4XFixedDecimal_create_from_i32Ptr.asFunction<
          ffi.Pointer<ICU4XFixedDecimal> Function(int)>();

  ffi.Pointer<ICU4XFixedDecimal> ICU4XFixedDecimal_create_from_u32(
    int v,
  ) {
    return _ICU4XFixedDecimal_create_from_u32(
      v,
    );
  }

  late final _ICU4XFixedDecimal_create_from_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XFixedDecimal> Function(
              ffi.Uint32)>>('ICU4XFixedDecimal_create_from_u32');
  late final _ICU4XFixedDecimal_create_from_u32 =
      _ICU4XFixedDecimal_create_from_u32Ptr.asFunction<
          ffi.Pointer<ICU4XFixedDecimal> Function(int)>();

  ffi.Pointer<ICU4XFixedDecimal> ICU4XFixedDecimal_create_from_i64(
    int v,
  ) {
    return _ICU4XFixedDecimal_create_from_i64(
      v,
    );
  }

  late final _ICU4XFixedDecimal_create_from_i64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XFixedDecimal> Function(
              ffi.Int64)>>('ICU4XFixedDecimal_create_from_i64');
  late final _ICU4XFixedDecimal_create_from_i64 =
      _ICU4XFixedDecimal_create_from_i64Ptr.asFunction<
          ffi.Pointer<ICU4XFixedDecimal> Function(int)>();

  ffi.Pointer<ICU4XFixedDecimal> ICU4XFixedDecimal_create_from_u64(
    int v,
  ) {
    return _ICU4XFixedDecimal_create_from_u64(
      v,
    );
  }

  late final _ICU4XFixedDecimal_create_from_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XFixedDecimal> Function(
              ffi.Uint64)>>('ICU4XFixedDecimal_create_from_u64');
  late final _ICU4XFixedDecimal_create_from_u64 =
      _ICU4XFixedDecimal_create_from_u64Ptr.asFunction<
          ffi.Pointer<ICU4XFixedDecimal> Function(int)>();

  diplomat_result_box_ICU4XFixedDecimal_ICU4XError
      ICU4XFixedDecimal_create_from_f64_with_integer_precision(
    double f,
  ) {
    return _ICU4XFixedDecimal_create_from_f64_with_integer_precision(
      f,
    );
  }

  late final _ICU4XFixedDecimal_create_from_f64_with_integer_precisionPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(
                      ffi.Double)>>(
          'ICU4XFixedDecimal_create_from_f64_with_integer_precision');
  late final _ICU4XFixedDecimal_create_from_f64_with_integer_precision =
      _ICU4XFixedDecimal_create_from_f64_with_integer_precisionPtr.asFunction<
          diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(double)>();

  diplomat_result_box_ICU4XFixedDecimal_ICU4XError
      ICU4XFixedDecimal_create_from_f64_with_lower_magnitude(
    double f,
    int magnitude,
  ) {
    return _ICU4XFixedDecimal_create_from_f64_with_lower_magnitude(
      f,
      magnitude,
    );
  }

  late final _ICU4XFixedDecimal_create_from_f64_with_lower_magnitudePtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(
                      ffi.Double, ffi.Int16)>>(
          'ICU4XFixedDecimal_create_from_f64_with_lower_magnitude');
  late final _ICU4XFixedDecimal_create_from_f64_with_lower_magnitude =
      _ICU4XFixedDecimal_create_from_f64_with_lower_magnitudePtr.asFunction<
          diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(
              double, int)>();

  diplomat_result_box_ICU4XFixedDecimal_ICU4XError
      ICU4XFixedDecimal_create_from_f64_with_significant_digits(
    double f,
    int digits,
  ) {
    return _ICU4XFixedDecimal_create_from_f64_with_significant_digits(
      f,
      digits,
    );
  }

  late final _ICU4XFixedDecimal_create_from_f64_with_significant_digitsPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(
                      ffi.Double, ffi.Uint8)>>(
          'ICU4XFixedDecimal_create_from_f64_with_significant_digits');
  late final _ICU4XFixedDecimal_create_from_f64_with_significant_digits =
      _ICU4XFixedDecimal_create_from_f64_with_significant_digitsPtr.asFunction<
          diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(
              double, int)>();

  diplomat_result_box_ICU4XFixedDecimal_ICU4XError
      ICU4XFixedDecimal_create_from_f64_with_floating_precision(
    double f,
  ) {
    return _ICU4XFixedDecimal_create_from_f64_with_floating_precision(
      f,
    );
  }

  late final _ICU4XFixedDecimal_create_from_f64_with_floating_precisionPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(
                      ffi.Double)>>(
          'ICU4XFixedDecimal_create_from_f64_with_floating_precision');
  late final _ICU4XFixedDecimal_create_from_f64_with_floating_precision =
      _ICU4XFixedDecimal_create_from_f64_with_floating_precisionPtr.asFunction<
          diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(double)>();

  diplomat_result_box_ICU4XFixedDecimal_ICU4XError
      ICU4XFixedDecimal_create_from_string(
    ffi.Pointer<ffi.Char> v_data,
    int v_len,
  ) {
    return _ICU4XFixedDecimal_create_from_string(
      v_data,
      v_len,
    );
  }

  late final _ICU4XFixedDecimal_create_from_stringPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XFixedDecimal_create_from_string');
  late final _ICU4XFixedDecimal_create_from_string =
      _ICU4XFixedDecimal_create_from_stringPtr.asFunction<
          diplomat_result_box_ICU4XFixedDecimal_ICU4XError Function(
              ffi.Pointer<ffi.Char>, int)>();

  int ICU4XFixedDecimal_digit_at(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int magnitude,
  ) {
    return _ICU4XFixedDecimal_digit_at(
      self,
      magnitude,
    );
  }

  late final _ICU4XFixedDecimal_digit_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_digit_at');
  late final _ICU4XFixedDecimal_digit_at = _ICU4XFixedDecimal_digit_atPtr
      .asFunction<int Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  int ICU4XFixedDecimal_magnitude_start(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_magnitude_start(
      self,
    );
  }

  late final _ICU4XFixedDecimal_magnitude_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int16 Function(ffi.Pointer<ICU4XFixedDecimal>)>>(
      'ICU4XFixedDecimal_magnitude_start');
  late final _ICU4XFixedDecimal_magnitude_start =
      _ICU4XFixedDecimal_magnitude_startPtr.asFunction<
          int Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  int ICU4XFixedDecimal_magnitude_end(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_magnitude_end(
      self,
    );
  }

  late final _ICU4XFixedDecimal_magnitude_endPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int16 Function(ffi.Pointer<ICU4XFixedDecimal>)>>(
      'ICU4XFixedDecimal_magnitude_end');
  late final _ICU4XFixedDecimal_magnitude_end =
      _ICU4XFixedDecimal_magnitude_endPtr.asFunction<
          int Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  int ICU4XFixedDecimal_nonzero_magnitude_start(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_nonzero_magnitude_start(
      self,
    );
  }

  late final _ICU4XFixedDecimal_nonzero_magnitude_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int16 Function(ffi.Pointer<ICU4XFixedDecimal>)>>(
      'ICU4XFixedDecimal_nonzero_magnitude_start');
  late final _ICU4XFixedDecimal_nonzero_magnitude_start =
      _ICU4XFixedDecimal_nonzero_magnitude_startPtr.asFunction<
          int Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  int ICU4XFixedDecimal_nonzero_magnitude_end(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_nonzero_magnitude_end(
      self,
    );
  }

  late final _ICU4XFixedDecimal_nonzero_magnitude_endPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int16 Function(ffi.Pointer<ICU4XFixedDecimal>)>>(
      'ICU4XFixedDecimal_nonzero_magnitude_end');
  late final _ICU4XFixedDecimal_nonzero_magnitude_end =
      _ICU4XFixedDecimal_nonzero_magnitude_endPtr.asFunction<
          int Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  bool ICU4XFixedDecimal_is_zero(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_is_zero(
      self,
    );
  }

  late final _ICU4XFixedDecimal_is_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ICU4XFixedDecimal>)>>('ICU4XFixedDecimal_is_zero');
  late final _ICU4XFixedDecimal_is_zero = _ICU4XFixedDecimal_is_zeroPtr
      .asFunction<bool Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  void ICU4XFixedDecimal_multiply_pow10(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int power,
  ) {
    return _ICU4XFixedDecimal_multiply_pow10(
      self,
      power,
    );
  }

  late final _ICU4XFixedDecimal_multiply_pow10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_multiply_pow10');
  late final _ICU4XFixedDecimal_multiply_pow10 =
      _ICU4XFixedDecimal_multiply_pow10Ptr.asFunction<
          void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  int ICU4XFixedDecimal_sign(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_sign(
      self,
    );
  }

  late final _ICU4XFixedDecimal_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ICU4XFixedDecimal>)>>('ICU4XFixedDecimal_sign');
  late final _ICU4XFixedDecimal_sign = _ICU4XFixedDecimal_signPtr.asFunction<
      int Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  void ICU4XFixedDecimal_set_sign(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int sign,
  ) {
    return _ICU4XFixedDecimal_set_sign(
      self,
      sign,
    );
  }

  late final _ICU4XFixedDecimal_set_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int32)>>('ICU4XFixedDecimal_set_sign');
  late final _ICU4XFixedDecimal_set_sign = _ICU4XFixedDecimal_set_signPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_apply_sign_display(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int sign_display,
  ) {
    return _ICU4XFixedDecimal_apply_sign_display(
      self,
      sign_display,
    );
  }

  late final _ICU4XFixedDecimal_apply_sign_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int32)>>('ICU4XFixedDecimal_apply_sign_display');
  late final _ICU4XFixedDecimal_apply_sign_display =
      _ICU4XFixedDecimal_apply_sign_displayPtr.asFunction<
          void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_trim_start(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_trim_start(
      self,
    );
  }

  late final _ICU4XFixedDecimal_trim_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XFixedDecimal>)>>('ICU4XFixedDecimal_trim_start');
  late final _ICU4XFixedDecimal_trim_start = _ICU4XFixedDecimal_trim_startPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  void ICU4XFixedDecimal_trim_end(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_trim_end(
      self,
    );
  }

  late final _ICU4XFixedDecimal_trim_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XFixedDecimal>)>>('ICU4XFixedDecimal_trim_end');
  late final _ICU4XFixedDecimal_trim_end = _ICU4XFixedDecimal_trim_endPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  void ICU4XFixedDecimal_pad_start(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_pad_start(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_pad_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_pad_start');
  late final _ICU4XFixedDecimal_pad_start = _ICU4XFixedDecimal_pad_startPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_pad_end(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_pad_end(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_pad_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_pad_end');
  late final _ICU4XFixedDecimal_pad_end = _ICU4XFixedDecimal_pad_endPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_set_max_position(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_set_max_position(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_set_max_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_set_max_position');
  late final _ICU4XFixedDecimal_set_max_position =
      _ICU4XFixedDecimal_set_max_positionPtr.asFunction<
          void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_trunc(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_trunc(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_truncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_trunc');
  late final _ICU4XFixedDecimal_trunc = _ICU4XFixedDecimal_truncPtr.asFunction<
      void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_half_trunc(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_half_trunc(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_half_truncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_half_trunc');
  late final _ICU4XFixedDecimal_half_trunc = _ICU4XFixedDecimal_half_truncPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_expand(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_expand(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_expand');
  late final _ICU4XFixedDecimal_expand = _ICU4XFixedDecimal_expandPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_half_expand(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_half_expand(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_half_expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_half_expand');
  late final _ICU4XFixedDecimal_half_expand = _ICU4XFixedDecimal_half_expandPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_ceil(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_ceil(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_ceilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_ceil');
  late final _ICU4XFixedDecimal_ceil = _ICU4XFixedDecimal_ceilPtr.asFunction<
      void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_half_ceil(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_half_ceil(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_half_ceilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_half_ceil');
  late final _ICU4XFixedDecimal_half_ceil = _ICU4XFixedDecimal_half_ceilPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_floor(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_floor(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_floorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_floor');
  late final _ICU4XFixedDecimal_floor = _ICU4XFixedDecimal_floorPtr.asFunction<
      void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_half_floor(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_half_floor(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_half_floorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_half_floor');
  late final _ICU4XFixedDecimal_half_floor = _ICU4XFixedDecimal_half_floorPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  void ICU4XFixedDecimal_half_even(
    ffi.Pointer<ICU4XFixedDecimal> self,
    int position,
  ) {
    return _ICU4XFixedDecimal_half_even(
      self,
      position,
    );
  }

  late final _ICU4XFixedDecimal_half_evenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Int16)>>('ICU4XFixedDecimal_half_even');
  late final _ICU4XFixedDecimal_half_even = _ICU4XFixedDecimal_half_evenPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>, int)>();

  diplomat_result_void_void ICU4XFixedDecimal_concatenate_end(
    ffi.Pointer<ICU4XFixedDecimal> self,
    ffi.Pointer<ICU4XFixedDecimal> other,
  ) {
    return _ICU4XFixedDecimal_concatenate_end(
      self,
      other,
    );
  }

  late final _ICU4XFixedDecimal_concatenate_endPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_void Function(ffi.Pointer<ICU4XFixedDecimal>,
                  ffi.Pointer<ICU4XFixedDecimal>)>>(
      'ICU4XFixedDecimal_concatenate_end');
  late final _ICU4XFixedDecimal_concatenate_end =
      _ICU4XFixedDecimal_concatenate_endPtr.asFunction<
          diplomat_result_void_void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Pointer<ICU4XFixedDecimal>)>();

  void ICU4XFixedDecimal_to_string(
    ffi.Pointer<ICU4XFixedDecimal> self,
    ffi.Pointer<DiplomatWriteable> to,
  ) {
    return _ICU4XFixedDecimal_to_string(
      self,
      to,
    );
  }

  late final _ICU4XFixedDecimal_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XFixedDecimal_to_string');
  late final _ICU4XFixedDecimal_to_string =
      _ICU4XFixedDecimal_to_stringPtr.asFunction<
          void Function(ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XFixedDecimal_destroy(
    ffi.Pointer<ICU4XFixedDecimal> self,
  ) {
    return _ICU4XFixedDecimal_destroy(
      self,
    );
  }

  late final _ICU4XFixedDecimal_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XFixedDecimal>)>>('ICU4XFixedDecimal_destroy');
  late final _ICU4XFixedDecimal_destroy = _ICU4XFixedDecimal_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XFixedDecimal>)>();

  diplomat_result_box_ICU4XFixedDecimalFormatter_ICU4XError
      ICU4XFixedDecimalFormatter_create_with_grouping_strategy(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int grouping_strategy,
  ) {
    return _ICU4XFixedDecimalFormatter_create_with_grouping_strategy(
      provider,
      locale,
      grouping_strategy,
    );
  }

  late final _ICU4XFixedDecimalFormatter_create_with_grouping_strategyPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XFixedDecimalFormatter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XLocale>,
                  ffi.Int32)>>(
      'ICU4XFixedDecimalFormatter_create_with_grouping_strategy');
  late final _ICU4XFixedDecimalFormatter_create_with_grouping_strategy =
      _ICU4XFixedDecimalFormatter_create_with_grouping_strategyPtr.asFunction<
          diplomat_result_box_ICU4XFixedDecimalFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>, int)>();

  diplomat_result_box_ICU4XFixedDecimalFormatter_ICU4XError
      ICU4XFixedDecimalFormatter_create_with_decimal_symbols_v1(
    ffi.Pointer<ICU4XDataStruct> data_struct,
    int grouping_strategy,
  ) {
    return _ICU4XFixedDecimalFormatter_create_with_decimal_symbols_v1(
      data_struct,
      grouping_strategy,
    );
  }

  late final _ICU4XFixedDecimalFormatter_create_with_decimal_symbols_v1Ptr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XFixedDecimalFormatter_ICU4XError
                      Function(ffi.Pointer<ICU4XDataStruct>, ffi.Int32)>>(
          'ICU4XFixedDecimalFormatter_create_with_decimal_symbols_v1');
  late final _ICU4XFixedDecimalFormatter_create_with_decimal_symbols_v1 =
      _ICU4XFixedDecimalFormatter_create_with_decimal_symbols_v1Ptr.asFunction<
          diplomat_result_box_ICU4XFixedDecimalFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataStruct>, int)>();

  diplomat_result_void_ICU4XError ICU4XFixedDecimalFormatter_format(
    ffi.Pointer<ICU4XFixedDecimalFormatter> self,
    ffi.Pointer<ICU4XFixedDecimal> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XFixedDecimalFormatter_format(
      self,
      value,
      write,
    );
  }

  late final _ICU4XFixedDecimalFormatter_formatPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XFixedDecimalFormatter>,
                  ffi.Pointer<ICU4XFixedDecimal>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XFixedDecimalFormatter_format');
  late final _ICU4XFixedDecimalFormatter_format =
      _ICU4XFixedDecimalFormatter_formatPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XFixedDecimalFormatter>,
              ffi.Pointer<ICU4XFixedDecimal>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XFixedDecimalFormatter_destroy(
    ffi.Pointer<ICU4XFixedDecimalFormatter> self,
  ) {
    return _ICU4XFixedDecimalFormatter_destroy(
      self,
    );
  }

  late final _ICU4XFixedDecimalFormatter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XFixedDecimalFormatter>)>>(
      'ICU4XFixedDecimalFormatter_destroy');
  late final _ICU4XFixedDecimalFormatter_destroy =
      _ICU4XFixedDecimalFormatter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XFixedDecimalFormatter>)>();

  diplomat_result_box_ICU4XCanonicalDecomposition_ICU4XError
      ICU4XCanonicalDecomposition_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCanonicalDecomposition_create(
      provider,
    );
  }

  late final _ICU4XCanonicalDecomposition_createPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCanonicalDecomposition_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCanonicalDecomposition_create');
  late final _ICU4XCanonicalDecomposition_create =
      _ICU4XCanonicalDecomposition_createPtr.asFunction<
          diplomat_result_box_ICU4XCanonicalDecomposition_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  ICU4XDecomposed ICU4XCanonicalDecomposition_decompose(
    ffi.Pointer<ICU4XCanonicalDecomposition> self,
    int c,
  ) {
    return _ICU4XCanonicalDecomposition_decompose(
      self,
      c,
    );
  }

  late final _ICU4XCanonicalDecomposition_decomposePtr = _lookup<
      ffi.NativeFunction<
          ICU4XDecomposed Function(ffi.Pointer<ICU4XCanonicalDecomposition>,
              char32_t)>>('ICU4XCanonicalDecomposition_decompose');
  late final _ICU4XCanonicalDecomposition_decompose =
      _ICU4XCanonicalDecomposition_decomposePtr.asFunction<
          ICU4XDecomposed Function(
              ffi.Pointer<ICU4XCanonicalDecomposition>, int)>();

  void ICU4XCanonicalDecomposition_destroy(
    ffi.Pointer<ICU4XCanonicalDecomposition> self,
  ) {
    return _ICU4XCanonicalDecomposition_destroy(
      self,
    );
  }

  late final _ICU4XCanonicalDecomposition_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCanonicalDecomposition>)>>(
      'ICU4XCanonicalDecomposition_destroy');
  late final _ICU4XCanonicalDecomposition_destroy =
      _ICU4XCanonicalDecomposition_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCanonicalDecomposition>)>();

  diplomat_result_box_ICU4XLocaleDisplayNamesFormatter_ICU4XError
      ICU4XLocaleDisplayNamesFormatter_try_new_unstable(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    ICU4XDisplayNamesOptionsV1 options,
  ) {
    return _ICU4XLocaleDisplayNamesFormatter_try_new_unstable(
      provider,
      locale,
      options,
    );
  }

  late final _ICU4XLocaleDisplayNamesFormatter_try_new_unstablePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLocaleDisplayNamesFormatter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XLocale>,
                  ICU4XDisplayNamesOptionsV1)>>(
      'ICU4XLocaleDisplayNamesFormatter_try_new_unstable');
  late final _ICU4XLocaleDisplayNamesFormatter_try_new_unstable =
      _ICU4XLocaleDisplayNamesFormatter_try_new_unstablePtr.asFunction<
          diplomat_result_box_ICU4XLocaleDisplayNamesFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ICU4XDisplayNamesOptionsV1)>();

  diplomat_result_void_ICU4XError ICU4XLocaleDisplayNamesFormatter_of(
    ffi.Pointer<ICU4XLocaleDisplayNamesFormatter> self,
    ffi.Pointer<ICU4XLocale> locale,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XLocaleDisplayNamesFormatter_of(
      self,
      locale,
      write,
    );
  }

  late final _ICU4XLocaleDisplayNamesFormatter_ofPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XLocaleDisplayNamesFormatter>,
                  ffi.Pointer<ICU4XLocale>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XLocaleDisplayNamesFormatter_of');
  late final _ICU4XLocaleDisplayNamesFormatter_of =
      _ICU4XLocaleDisplayNamesFormatter_ofPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XLocaleDisplayNamesFormatter>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XLocaleDisplayNamesFormatter_destroy(
    ffi.Pointer<ICU4XLocaleDisplayNamesFormatter> self,
  ) {
    return _ICU4XLocaleDisplayNamesFormatter_destroy(
      self,
    );
  }

  late final _ICU4XLocaleDisplayNamesFormatter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XLocaleDisplayNamesFormatter>)>>(
      'ICU4XLocaleDisplayNamesFormatter_destroy');
  late final _ICU4XLocaleDisplayNamesFormatter_destroy =
      _ICU4XLocaleDisplayNamesFormatter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLocaleDisplayNamesFormatter>)>();

  DiplomatUsizeView ICU4XReorderedIndexMap_as_slice(
    ffi.Pointer<ICU4XReorderedIndexMap> self,
  ) {
    return _ICU4XReorderedIndexMap_as_slice(
      self,
    );
  }

  late final _ICU4XReorderedIndexMap_as_slicePtr = _lookup<
          ffi.NativeFunction<
              DiplomatUsizeView Function(ffi.Pointer<ICU4XReorderedIndexMap>)>>(
      'ICU4XReorderedIndexMap_as_slice');
  late final _ICU4XReorderedIndexMap_as_slice =
      _ICU4XReorderedIndexMap_as_slicePtr.asFunction<
          DiplomatUsizeView Function(ffi.Pointer<ICU4XReorderedIndexMap>)>();

  int ICU4XReorderedIndexMap_len(
    ffi.Pointer<ICU4XReorderedIndexMap> self,
  ) {
    return _ICU4XReorderedIndexMap_len(
      self,
    );
  }

  late final _ICU4XReorderedIndexMap_lenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ICU4XReorderedIndexMap>)>>(
      'ICU4XReorderedIndexMap_len');
  late final _ICU4XReorderedIndexMap_len = _ICU4XReorderedIndexMap_lenPtr
      .asFunction<int Function(ffi.Pointer<ICU4XReorderedIndexMap>)>();

  int ICU4XReorderedIndexMap_get(
    ffi.Pointer<ICU4XReorderedIndexMap> self,
    int index,
  ) {
    return _ICU4XReorderedIndexMap_get(
      self,
      index,
    );
  }

  late final _ICU4XReorderedIndexMap_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ICU4XReorderedIndexMap>,
              ffi.Size)>>('ICU4XReorderedIndexMap_get');
  late final _ICU4XReorderedIndexMap_get = _ICU4XReorderedIndexMap_getPtr
      .asFunction<int Function(ffi.Pointer<ICU4XReorderedIndexMap>, int)>();

  void ICU4XReorderedIndexMap_destroy(
    ffi.Pointer<ICU4XReorderedIndexMap> self,
  ) {
    return _ICU4XReorderedIndexMap_destroy(
      self,
    );
  }

  late final _ICU4XReorderedIndexMap_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XReorderedIndexMap>)>>(
      'ICU4XReorderedIndexMap_destroy');
  late final _ICU4XReorderedIndexMap_destroy =
      _ICU4XReorderedIndexMap_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XReorderedIndexMap>)>();

  ffi.Pointer<ICU4XList> ICU4XList_create() {
    return _ICU4XList_create();
  }

  late final _ICU4XList_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XList> Function()>>(
          'ICU4XList_create');
  late final _ICU4XList_create =
      _ICU4XList_createPtr.asFunction<ffi.Pointer<ICU4XList> Function()>();

  ffi.Pointer<ICU4XList> ICU4XList_create_with_capacity(
    int capacity,
  ) {
    return _ICU4XList_create_with_capacity(
      capacity,
    );
  }

  late final _ICU4XList_create_with_capacityPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ICU4XList> Function(ffi.Size)>>(
          'ICU4XList_create_with_capacity');
  late final _ICU4XList_create_with_capacity =
      _ICU4XList_create_with_capacityPtr.asFunction<
          ffi.Pointer<ICU4XList> Function(int)>();

  void ICU4XList_push(
    ffi.Pointer<ICU4XList> self,
    ffi.Pointer<ffi.Char> val_data,
    int val_len,
  ) {
    return _ICU4XList_push(
      self,
      val_data,
      val_len,
    );
  }

  late final _ICU4XList_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ICU4XList>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XList_push');
  late final _ICU4XList_push = _ICU4XList_pushPtr.asFunction<
      void Function(ffi.Pointer<ICU4XList>, ffi.Pointer<ffi.Char>, int)>();

  int ICU4XList_len(
    ffi.Pointer<ICU4XList> self,
  ) {
    return _ICU4XList_len(
      self,
    );
  }

  late final _ICU4XList_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ICU4XList>)>>(
          'ICU4XList_len');
  late final _ICU4XList_len =
      _ICU4XList_lenPtr.asFunction<int Function(ffi.Pointer<ICU4XList>)>();

  void ICU4XList_destroy(
    ffi.Pointer<ICU4XList> self,
  ) {
    return _ICU4XList_destroy(
      self,
    );
  }

  late final _ICU4XList_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XList>)>>(
          'ICU4XList_destroy');
  late final _ICU4XList_destroy =
      _ICU4XList_destroyPtr.asFunction<void Function(ffi.Pointer<ICU4XList>)>();

  diplomat_result_box_ICU4XListFormatter_ICU4XError
      ICU4XListFormatter_create_and_with_length(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int length,
  ) {
    return _ICU4XListFormatter_create_and_with_length(
      provider,
      locale,
      length,
    );
  }

  late final _ICU4XListFormatter_create_and_with_lengthPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XListFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32)>>('ICU4XListFormatter_create_and_with_length');
  late final _ICU4XListFormatter_create_and_with_length =
      _ICU4XListFormatter_create_and_with_lengthPtr.asFunction<
          diplomat_result_box_ICU4XListFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>, int)>();

  diplomat_result_box_ICU4XListFormatter_ICU4XError
      ICU4XListFormatter_create_or_with_length(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int length,
  ) {
    return _ICU4XListFormatter_create_or_with_length(
      provider,
      locale,
      length,
    );
  }

  late final _ICU4XListFormatter_create_or_with_lengthPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XListFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32)>>('ICU4XListFormatter_create_or_with_length');
  late final _ICU4XListFormatter_create_or_with_length =
      _ICU4XListFormatter_create_or_with_lengthPtr.asFunction<
          diplomat_result_box_ICU4XListFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>, int)>();

  diplomat_result_box_ICU4XListFormatter_ICU4XError
      ICU4XListFormatter_create_unit_with_length(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int length,
  ) {
    return _ICU4XListFormatter_create_unit_with_length(
      provider,
      locale,
      length,
    );
  }

  late final _ICU4XListFormatter_create_unit_with_lengthPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XListFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32)>>('ICU4XListFormatter_create_unit_with_length');
  late final _ICU4XListFormatter_create_unit_with_length =
      _ICU4XListFormatter_create_unit_with_lengthPtr.asFunction<
          diplomat_result_box_ICU4XListFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>, int)>();

  diplomat_result_void_ICU4XError ICU4XListFormatter_format(
    ffi.Pointer<ICU4XListFormatter> self,
    ffi.Pointer<ICU4XList> list,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XListFormatter_format(
      self,
      list,
      write,
    );
  }

  late final _ICU4XListFormatter_formatPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XListFormatter>,
              ffi.Pointer<ICU4XList>,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XListFormatter_format');
  late final _ICU4XListFormatter_format =
      _ICU4XListFormatter_formatPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XListFormatter>,
              ffi.Pointer<ICU4XList>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XListFormatter_destroy(
    ffi.Pointer<ICU4XListFormatter> self,
  ) {
    return _ICU4XListFormatter_destroy(
      self,
    );
  }

  late final _ICU4XListFormatter_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XListFormatter>)>>('ICU4XListFormatter_destroy');
  late final _ICU4XListFormatter_destroy = _ICU4XListFormatter_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XListFormatter>)>();

  ffi.Pointer<ICU4XLocaleFallbackIterator>
      ICU4XLocaleFallbackerWithConfig_fallback_for_locale(
    ffi.Pointer<ICU4XLocaleFallbackerWithConfig> self,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XLocaleFallbackerWithConfig_fallback_for_locale(
      self,
      locale,
    );
  }

  late final _ICU4XLocaleFallbackerWithConfig_fallback_for_localePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ICU4XLocaleFallbackIterator> Function(
                  ffi.Pointer<ICU4XLocaleFallbackerWithConfig>,
                  ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XLocaleFallbackerWithConfig_fallback_for_locale');
  late final _ICU4XLocaleFallbackerWithConfig_fallback_for_locale =
      _ICU4XLocaleFallbackerWithConfig_fallback_for_localePtr.asFunction<
          ffi.Pointer<ICU4XLocaleFallbackIterator> Function(
              ffi.Pointer<ICU4XLocaleFallbackerWithConfig>,
              ffi.Pointer<ICU4XLocale>)>();

  void ICU4XLocaleFallbackerWithConfig_destroy(
    ffi.Pointer<ICU4XLocaleFallbackerWithConfig> self,
  ) {
    return _ICU4XLocaleFallbackerWithConfig_destroy(
      self,
    );
  }

  late final _ICU4XLocaleFallbackerWithConfig_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLocaleFallbackerWithConfig>)>>(
      'ICU4XLocaleFallbackerWithConfig_destroy');
  late final _ICU4XLocaleFallbackerWithConfig_destroy =
      _ICU4XLocaleFallbackerWithConfig_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLocaleFallbackerWithConfig>)>();

  bool ICU4XScriptExtensionsSet_contains(
    ffi.Pointer<ICU4XScriptExtensionsSet> self,
    int script,
  ) {
    return _ICU4XScriptExtensionsSet_contains(
      self,
      script,
    );
  }

  late final _ICU4XScriptExtensionsSet_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ICU4XScriptExtensionsSet>,
              ffi.Uint16)>>('ICU4XScriptExtensionsSet_contains');
  late final _ICU4XScriptExtensionsSet_contains =
      _ICU4XScriptExtensionsSet_containsPtr.asFunction<
          bool Function(ffi.Pointer<ICU4XScriptExtensionsSet>, int)>();

  int ICU4XScriptExtensionsSet_count(
    ffi.Pointer<ICU4XScriptExtensionsSet> self,
  ) {
    return _ICU4XScriptExtensionsSet_count(
      self,
    );
  }

  late final _ICU4XScriptExtensionsSet_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ICU4XScriptExtensionsSet>)>>(
      'ICU4XScriptExtensionsSet_count');
  late final _ICU4XScriptExtensionsSet_count =
      _ICU4XScriptExtensionsSet_countPtr.asFunction<
          int Function(ffi.Pointer<ICU4XScriptExtensionsSet>)>();

  diplomat_result_uint16_t_void ICU4XScriptExtensionsSet_script_at(
    ffi.Pointer<ICU4XScriptExtensionsSet> self,
    int index,
  ) {
    return _ICU4XScriptExtensionsSet_script_at(
      self,
      index,
    );
  }

  late final _ICU4XScriptExtensionsSet_script_atPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_uint16_t_void Function(
              ffi.Pointer<ICU4XScriptExtensionsSet>,
              ffi.Size)>>('ICU4XScriptExtensionsSet_script_at');
  late final _ICU4XScriptExtensionsSet_script_at =
      _ICU4XScriptExtensionsSet_script_atPtr.asFunction<
          diplomat_result_uint16_t_void Function(
              ffi.Pointer<ICU4XScriptExtensionsSet>, int)>();

  void ICU4XScriptExtensionsSet_destroy(
    ffi.Pointer<ICU4XScriptExtensionsSet> self,
  ) {
    return _ICU4XScriptExtensionsSet_destroy(
      self,
    );
  }

  late final _ICU4XScriptExtensionsSet_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XScriptExtensionsSet>)>>(
      'ICU4XScriptExtensionsSet_destroy');
  late final _ICU4XScriptExtensionsSet_destroy =
      _ICU4XScriptExtensionsSet_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XScriptExtensionsSet>)>();

  int ICU4XScriptWithExtensionsBorrowed_get_script_val(
    ffi.Pointer<ICU4XScriptWithExtensionsBorrowed> self,
    int code_point,
  ) {
    return _ICU4XScriptWithExtensionsBorrowed_get_script_val(
      self,
      code_point,
    );
  }

  late final _ICU4XScriptWithExtensionsBorrowed_get_script_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>,
              ffi.Uint32)>>('ICU4XScriptWithExtensionsBorrowed_get_script_val');
  late final _ICU4XScriptWithExtensionsBorrowed_get_script_val =
      _ICU4XScriptWithExtensionsBorrowed_get_script_valPtr.asFunction<
          int Function(ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>, int)>();

  ffi.Pointer<ICU4XScriptExtensionsSet>
      ICU4XScriptWithExtensionsBorrowed_get_script_extensions_val(
    ffi.Pointer<ICU4XScriptWithExtensionsBorrowed> self,
    int code_point,
  ) {
    return _ICU4XScriptWithExtensionsBorrowed_get_script_extensions_val(
      self,
      code_point,
    );
  }

  late final _ICU4XScriptWithExtensionsBorrowed_get_script_extensions_valPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ICU4XScriptExtensionsSet> Function(
                      ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>,
                      ffi.Uint32)>>(
          'ICU4XScriptWithExtensionsBorrowed_get_script_extensions_val');
  late final _ICU4XScriptWithExtensionsBorrowed_get_script_extensions_val =
      _ICU4XScriptWithExtensionsBorrowed_get_script_extensions_valPtr
          .asFunction<
              ffi.Pointer<ICU4XScriptExtensionsSet> Function(
                  ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>, int)>();

  bool ICU4XScriptWithExtensionsBorrowed_has_script(
    ffi.Pointer<ICU4XScriptWithExtensionsBorrowed> self,
    int code_point,
    int script,
  ) {
    return _ICU4XScriptWithExtensionsBorrowed_has_script(
      self,
      code_point,
      script,
    );
  }

  late final _ICU4XScriptWithExtensionsBorrowed_has_scriptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>,
              ffi.Uint32,
              ffi.Uint16)>>('ICU4XScriptWithExtensionsBorrowed_has_script');
  late final _ICU4XScriptWithExtensionsBorrowed_has_script =
      _ICU4XScriptWithExtensionsBorrowed_has_scriptPtr.asFunction<
          bool Function(
              ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>, int, int)>();

  void ICU4XScriptWithExtensionsBorrowed_destroy(
    ffi.Pointer<ICU4XScriptWithExtensionsBorrowed> self,
  ) {
    return _ICU4XScriptWithExtensionsBorrowed_destroy(
      self,
    );
  }

  late final _ICU4XScriptWithExtensionsBorrowed_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>)>>(
      'ICU4XScriptWithExtensionsBorrowed_destroy');
  late final _ICU4XScriptWithExtensionsBorrowed_destroy =
      _ICU4XScriptWithExtensionsBorrowed_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>)>();

  diplomat_result_box_ICU4XScriptWithExtensions_ICU4XError
      ICU4XScriptWithExtensions_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XScriptWithExtensions_create(
      provider,
    );
  }

  late final _ICU4XScriptWithExtensions_createPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XScriptWithExtensions_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XScriptWithExtensions_create');
  late final _ICU4XScriptWithExtensions_create =
      _ICU4XScriptWithExtensions_createPtr.asFunction<
          diplomat_result_box_ICU4XScriptWithExtensions_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  int ICU4XScriptWithExtensions_get_script_val(
    ffi.Pointer<ICU4XScriptWithExtensions> self,
    int code_point,
  ) {
    return _ICU4XScriptWithExtensions_get_script_val(
      self,
      code_point,
    );
  }

  late final _ICU4XScriptWithExtensions_get_script_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ICU4XScriptWithExtensions>,
              ffi.Uint32)>>('ICU4XScriptWithExtensions_get_script_val');
  late final _ICU4XScriptWithExtensions_get_script_val =
      _ICU4XScriptWithExtensions_get_script_valPtr.asFunction<
          int Function(ffi.Pointer<ICU4XScriptWithExtensions>, int)>();

  bool ICU4XScriptWithExtensions_has_script(
    ffi.Pointer<ICU4XScriptWithExtensions> self,
    int code_point,
    int script,
  ) {
    return _ICU4XScriptWithExtensions_has_script(
      self,
      code_point,
      script,
    );
  }

  late final _ICU4XScriptWithExtensions_has_scriptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ICU4XScriptWithExtensions>, ffi.Uint32,
              ffi.Uint16)>>('ICU4XScriptWithExtensions_has_script');
  late final _ICU4XScriptWithExtensions_has_script =
      _ICU4XScriptWithExtensions_has_scriptPtr.asFunction<
          bool Function(ffi.Pointer<ICU4XScriptWithExtensions>, int, int)>();

  ffi.Pointer<ICU4XScriptWithExtensionsBorrowed>
      ICU4XScriptWithExtensions_as_borrowed(
    ffi.Pointer<ICU4XScriptWithExtensions> self,
  ) {
    return _ICU4XScriptWithExtensions_as_borrowed(
      self,
    );
  }

  late final _ICU4XScriptWithExtensions_as_borrowedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ICU4XScriptWithExtensionsBorrowed> Function(
                  ffi.Pointer<ICU4XScriptWithExtensions>)>>(
      'ICU4XScriptWithExtensions_as_borrowed');
  late final _ICU4XScriptWithExtensions_as_borrowed =
      _ICU4XScriptWithExtensions_as_borrowedPtr.asFunction<
          ffi.Pointer<ICU4XScriptWithExtensionsBorrowed> Function(
              ffi.Pointer<ICU4XScriptWithExtensions>)>();

  ffi.Pointer<CodePointRangeIterator>
      ICU4XScriptWithExtensions_iter_ranges_for_script(
    ffi.Pointer<ICU4XScriptWithExtensions> self,
    int script,
  ) {
    return _ICU4XScriptWithExtensions_iter_ranges_for_script(
      self,
      script,
    );
  }

  late final _ICU4XScriptWithExtensions_iter_ranges_for_scriptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XScriptWithExtensions>,
              ffi.Uint16)>>('ICU4XScriptWithExtensions_iter_ranges_for_script');
  late final _ICU4XScriptWithExtensions_iter_ranges_for_script =
      _ICU4XScriptWithExtensions_iter_ranges_for_scriptPtr.asFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XScriptWithExtensions>, int)>();

  void ICU4XScriptWithExtensions_destroy(
    ffi.Pointer<ICU4XScriptWithExtensions> self,
  ) {
    return _ICU4XScriptWithExtensions_destroy(
      self,
    );
  }

  late final _ICU4XScriptWithExtensions_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XScriptWithExtensions>)>>(
      'ICU4XScriptWithExtensions_destroy');
  late final _ICU4XScriptWithExtensions_destroy =
      _ICU4XScriptWithExtensions_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XScriptWithExtensions>)>();

  int ICU4XLineBreakIteratorUtf8_next(
    ffi.Pointer<ICU4XLineBreakIteratorUtf8> self,
  ) {
    return _ICU4XLineBreakIteratorUtf8_next(
      self,
    );
  }

  late final _ICU4XLineBreakIteratorUtf8_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XLineBreakIteratorUtf8>)>>(
      'ICU4XLineBreakIteratorUtf8_next');
  late final _ICU4XLineBreakIteratorUtf8_next =
      _ICU4XLineBreakIteratorUtf8_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XLineBreakIteratorUtf8>)>();

  void ICU4XLineBreakIteratorUtf8_destroy(
    ffi.Pointer<ICU4XLineBreakIteratorUtf8> self,
  ) {
    return _ICU4XLineBreakIteratorUtf8_destroy(
      self,
    );
  }

  late final _ICU4XLineBreakIteratorUtf8_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLineBreakIteratorUtf8>)>>(
      'ICU4XLineBreakIteratorUtf8_destroy');
  late final _ICU4XLineBreakIteratorUtf8_destroy =
      _ICU4XLineBreakIteratorUtf8_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLineBreakIteratorUtf8>)>();

  diplomat_result_box_ICU4XBidi_ICU4XError ICU4XBidi_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XBidi_create(
      provider,
    );
  }

  late final _ICU4XBidi_createPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XBidi_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>>('ICU4XBidi_create');
  late final _ICU4XBidi_create = _ICU4XBidi_createPtr.asFunction<
      diplomat_result_box_ICU4XBidi_ICU4XError Function(
          ffi.Pointer<ICU4XDataProvider>)>();

  ffi.Pointer<ICU4XBidiInfo> ICU4XBidi_for_text(
    ffi.Pointer<ICU4XBidi> self,
    ffi.Pointer<ffi.Char> text_data,
    int text_len,
    int default_level,
  ) {
    return _ICU4XBidi_for_text(
      self,
      text_data,
      text_len,
      default_level,
    );
  }

  late final _ICU4XBidi_for_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XBidiInfo> Function(
              ffi.Pointer<ICU4XBidi>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Uint8)>>('ICU4XBidi_for_text');
  late final _ICU4XBidi_for_text = _ICU4XBidi_for_textPtr.asFunction<
      ffi.Pointer<ICU4XBidiInfo> Function(
          ffi.Pointer<ICU4XBidi>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ICU4XReorderedIndexMap> ICU4XBidi_reorder_visual(
    ffi.Pointer<ICU4XBidi> self,
    ffi.Pointer<ffi.Uint8> levels_data,
    int levels_len,
  ) {
    return _ICU4XBidi_reorder_visual(
      self,
      levels_data,
      levels_len,
    );
  }

  late final _ICU4XBidi_reorder_visualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XReorderedIndexMap> Function(ffi.Pointer<ICU4XBidi>,
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('ICU4XBidi_reorder_visual');
  late final _ICU4XBidi_reorder_visual =
      _ICU4XBidi_reorder_visualPtr.asFunction<
          ffi.Pointer<ICU4XReorderedIndexMap> Function(
              ffi.Pointer<ICU4XBidi>, ffi.Pointer<ffi.Uint8>, int)>();

  bool ICU4XBidi_level_is_rtl(
    int level,
  ) {
    return _ICU4XBidi_level_is_rtl(
      level,
    );
  }

  late final _ICU4XBidi_level_is_rtlPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Uint8)>>(
          'ICU4XBidi_level_is_rtl');
  late final _ICU4XBidi_level_is_rtl =
      _ICU4XBidi_level_is_rtlPtr.asFunction<bool Function(int)>();

  bool ICU4XBidi_level_is_ltr(
    int level,
  ) {
    return _ICU4XBidi_level_is_ltr(
      level,
    );
  }

  late final _ICU4XBidi_level_is_ltrPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Uint8)>>(
          'ICU4XBidi_level_is_ltr');
  late final _ICU4XBidi_level_is_ltr =
      _ICU4XBidi_level_is_ltrPtr.asFunction<bool Function(int)>();

  int ICU4XBidi_level_rtl() {
    return _ICU4XBidi_level_rtl();
  }

  late final _ICU4XBidi_level_rtlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('ICU4XBidi_level_rtl');
  late final _ICU4XBidi_level_rtl =
      _ICU4XBidi_level_rtlPtr.asFunction<int Function()>();

  int ICU4XBidi_level_ltr() {
    return _ICU4XBidi_level_ltr();
  }

  late final _ICU4XBidi_level_ltrPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('ICU4XBidi_level_ltr');
  late final _ICU4XBidi_level_ltr =
      _ICU4XBidi_level_ltrPtr.asFunction<int Function()>();

  void ICU4XBidi_destroy(
    ffi.Pointer<ICU4XBidi> self,
  ) {
    return _ICU4XBidi_destroy(
      self,
    );
  }

  late final _ICU4XBidi_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XBidi>)>>(
          'ICU4XBidi_destroy');
  late final _ICU4XBidi_destroy =
      _ICU4XBidi_destroyPtr.asFunction<void Function(ffi.Pointer<ICU4XBidi>)>();

  diplomat_result_box_ICU4XDateTimeFormatter_ICU4XError
      ICU4XDateTimeFormatter_create_with_lengths(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int date_length,
    int time_length,
  ) {
    return _ICU4XDateTimeFormatter_create_with_lengths(
      provider,
      locale,
      date_length,
      time_length,
    );
  }

  late final _ICU4XDateTimeFormatter_create_with_lengthsPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XDateTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32,
              ffi.Int32)>>('ICU4XDateTimeFormatter_create_with_lengths');
  late final _ICU4XDateTimeFormatter_create_with_lengths =
      _ICU4XDateTimeFormatter_create_with_lengthsPtr.asFunction<
          diplomat_result_box_ICU4XDateTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              int,
              int)>();

  diplomat_result_void_ICU4XError ICU4XDateTimeFormatter_format_datetime(
    ffi.Pointer<ICU4XDateTimeFormatter> self,
    ffi.Pointer<ICU4XDateTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDateTimeFormatter_format_datetime(
      self,
      value,
      write,
    );
  }

  late final _ICU4XDateTimeFormatter_format_datetimePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDateTimeFormatter>,
                  ffi.Pointer<ICU4XDateTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XDateTimeFormatter_format_datetime');
  late final _ICU4XDateTimeFormatter_format_datetime =
      _ICU4XDateTimeFormatter_format_datetimePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDateTimeFormatter>,
              ffi.Pointer<ICU4XDateTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError ICU4XDateTimeFormatter_format_iso_datetime(
    ffi.Pointer<ICU4XDateTimeFormatter> self,
    ffi.Pointer<ICU4XIsoDateTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDateTimeFormatter_format_iso_datetime(
      self,
      value,
      write,
    );
  }

  late final _ICU4XDateTimeFormatter_format_iso_datetimePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDateTimeFormatter>,
                  ffi.Pointer<ICU4XIsoDateTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XDateTimeFormatter_format_iso_datetime');
  late final _ICU4XDateTimeFormatter_format_iso_datetime =
      _ICU4XDateTimeFormatter_format_iso_datetimePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDateTimeFormatter>,
              ffi.Pointer<ICU4XIsoDateTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XDateTimeFormatter_destroy(
    ffi.Pointer<ICU4XDateTimeFormatter> self,
  ) {
    return _ICU4XDateTimeFormatter_destroy(
      self,
    );
  }

  late final _ICU4XDateTimeFormatter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XDateTimeFormatter>)>>(
      'ICU4XDateTimeFormatter_destroy');
  late final _ICU4XDateTimeFormatter_destroy =
      _ICU4XDateTimeFormatter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XDateTimeFormatter>)>();

  diplomat_result_box_ICU4XCollator_ICU4XError ICU4XCollator_create_v1(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    ICU4XCollatorOptionsV1 options,
  ) {
    return _ICU4XCollator_create_v1(
      provider,
      locale,
      options,
    );
  }

  late final _ICU4XCollator_create_v1Ptr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XCollator_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ICU4XCollatorOptionsV1)>>('ICU4XCollator_create_v1');
  late final _ICU4XCollator_create_v1 = _ICU4XCollator_create_v1Ptr.asFunction<
      diplomat_result_box_ICU4XCollator_ICU4XError Function(
          ffi.Pointer<ICU4XDataProvider>,
          ffi.Pointer<ICU4XLocale>,
          ICU4XCollatorOptionsV1)>();

  int ICU4XCollator_compare(
    ffi.Pointer<ICU4XCollator> self,
    ffi.Pointer<ffi.Char> left_data,
    int left_len,
    ffi.Pointer<ffi.Char> right_data,
    int right_len,
  ) {
    return _ICU4XCollator_compare(
      self,
      left_data,
      left_len,
      right_data,
      right_len,
    );
  }

  late final _ICU4XCollator_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ICU4XCollator>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XCollator_compare');
  late final _ICU4XCollator_compare = _ICU4XCollator_comparePtr.asFunction<
      int Function(ffi.Pointer<ICU4XCollator>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  int ICU4XCollator_compare_valid_utf8(
    ffi.Pointer<ICU4XCollator> self,
    ffi.Pointer<ffi.Char> left_data,
    int left_len,
    ffi.Pointer<ffi.Char> right_data,
    int right_len,
  ) {
    return _ICU4XCollator_compare_valid_utf8(
      self,
      left_data,
      left_len,
      right_data,
      right_len,
    );
  }

  late final _ICU4XCollator_compare_valid_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ICU4XCollator>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XCollator_compare_valid_utf8');
  late final _ICU4XCollator_compare_valid_utf8 =
      _ICU4XCollator_compare_valid_utf8Ptr.asFunction<
          int Function(ffi.Pointer<ICU4XCollator>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Char>, int)>();

  int ICU4XCollator_compare_utf16(
    ffi.Pointer<ICU4XCollator> self,
    ffi.Pointer<ffi.Uint16> left_data,
    int left_len,
    ffi.Pointer<ffi.Uint16> right_data,
    int right_len,
  ) {
    return _ICU4XCollator_compare_utf16(
      self,
      left_data,
      left_len,
      right_data,
      right_len,
    );
  }

  late final _ICU4XCollator_compare_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ICU4XCollator>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Size,
              ffi.Pointer<ffi.Uint16>,
              ffi.Size)>>('ICU4XCollator_compare_utf16');
  late final _ICU4XCollator_compare_utf16 =
      _ICU4XCollator_compare_utf16Ptr.asFunction<
          int Function(ffi.Pointer<ICU4XCollator>, ffi.Pointer<ffi.Uint16>, int,
              ffi.Pointer<ffi.Uint16>, int)>();

  void ICU4XCollator_destroy(
    ffi.Pointer<ICU4XCollator> self,
  ) {
    return _ICU4XCollator_destroy(
      self,
    );
  }

  late final _ICU4XCollator_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ICU4XCollator>)>>(
      'ICU4XCollator_destroy');
  late final _ICU4XCollator_destroy = _ICU4XCollator_destroyPtr.asFunction<
      void Function(ffi.Pointer<ICU4XCollator>)>();

  int ICU4XSentenceBreakIteratorUtf8_next(
    ffi.Pointer<ICU4XSentenceBreakIteratorUtf8> self,
  ) {
    return _ICU4XSentenceBreakIteratorUtf8_next(
      self,
    );
  }

  late final _ICU4XSentenceBreakIteratorUtf8_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XSentenceBreakIteratorUtf8>)>>(
      'ICU4XSentenceBreakIteratorUtf8_next');
  late final _ICU4XSentenceBreakIteratorUtf8_next =
      _ICU4XSentenceBreakIteratorUtf8_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XSentenceBreakIteratorUtf8>)>();

  void ICU4XSentenceBreakIteratorUtf8_destroy(
    ffi.Pointer<ICU4XSentenceBreakIteratorUtf8> self,
  ) {
    return _ICU4XSentenceBreakIteratorUtf8_destroy(
      self,
    );
  }

  late final _ICU4XSentenceBreakIteratorUtf8_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XSentenceBreakIteratorUtf8>)>>(
      'ICU4XSentenceBreakIteratorUtf8_destroy');
  late final _ICU4XSentenceBreakIteratorUtf8_destroy =
      _ICU4XSentenceBreakIteratorUtf8_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XSentenceBreakIteratorUtf8>)>();

  diplomat_result_box_ICU4XGregorianDateFormatter_ICU4XError
      ICU4XGregorianDateFormatter_create_with_length(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int length,
  ) {
    return _ICU4XGregorianDateFormatter_create_with_length(
      provider,
      locale,
      length,
    );
  }

  late final _ICU4XGregorianDateFormatter_create_with_lengthPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_box_ICU4XGregorianDateFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              ffi.Int32)>>('ICU4XGregorianDateFormatter_create_with_length');
  late final _ICU4XGregorianDateFormatter_create_with_length =
      _ICU4XGregorianDateFormatter_create_with_lengthPtr.asFunction<
          diplomat_result_box_ICU4XGregorianDateFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>, int)>();

  diplomat_result_void_ICU4XError ICU4XGregorianDateFormatter_format_iso_date(
    ffi.Pointer<ICU4XGregorianDateFormatter> self,
    ffi.Pointer<ICU4XIsoDate> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XGregorianDateFormatter_format_iso_date(
      self,
      value,
      write,
    );
  }

  late final _ICU4XGregorianDateFormatter_format_iso_datePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XGregorianDateFormatter>,
                  ffi.Pointer<ICU4XIsoDate>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XGregorianDateFormatter_format_iso_date');
  late final _ICU4XGregorianDateFormatter_format_iso_date =
      _ICU4XGregorianDateFormatter_format_iso_datePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XGregorianDateFormatter>,
              ffi.Pointer<ICU4XIsoDate>,
              ffi.Pointer<DiplomatWriteable>)>();

  diplomat_result_void_ICU4XError
      ICU4XGregorianDateFormatter_format_iso_datetime(
    ffi.Pointer<ICU4XGregorianDateFormatter> self,
    ffi.Pointer<ICU4XIsoDateTime> value,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XGregorianDateFormatter_format_iso_datetime(
      self,
      value,
      write,
    );
  }

  late final _ICU4XGregorianDateFormatter_format_iso_datetimePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XGregorianDateFormatter>,
                  ffi.Pointer<ICU4XIsoDateTime>,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XGregorianDateFormatter_format_iso_datetime');
  late final _ICU4XGregorianDateFormatter_format_iso_datetime =
      _ICU4XGregorianDateFormatter_format_iso_datetimePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XGregorianDateFormatter>,
              ffi.Pointer<ICU4XIsoDateTime>,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XGregorianDateFormatter_destroy(
    ffi.Pointer<ICU4XGregorianDateFormatter> self,
  ) {
    return _ICU4XGregorianDateFormatter_destroy(
      self,
    );
  }

  late final _ICU4XGregorianDateFormatter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XGregorianDateFormatter>)>>(
      'ICU4XGregorianDateFormatter_destroy');
  late final _ICU4XGregorianDateFormatter_destroy =
      _ICU4XGregorianDateFormatter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XGregorianDateFormatter>)>();

  diplomat_result_box_ICU4XDecomposingNormalizer_ICU4XError
      ICU4XDecomposingNormalizer_create_nfd(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XDecomposingNormalizer_create_nfd(
      provider,
    );
  }

  late final _ICU4XDecomposingNormalizer_create_nfdPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XDecomposingNormalizer_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XDecomposingNormalizer_create_nfd');
  late final _ICU4XDecomposingNormalizer_create_nfd =
      _ICU4XDecomposingNormalizer_create_nfdPtr.asFunction<
          diplomat_result_box_ICU4XDecomposingNormalizer_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XDecomposingNormalizer_ICU4XError
      ICU4XDecomposingNormalizer_create_nfkd(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XDecomposingNormalizer_create_nfkd(
      provider,
    );
  }

  late final _ICU4XDecomposingNormalizer_create_nfkdPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XDecomposingNormalizer_ICU4XError
                  Function(ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XDecomposingNormalizer_create_nfkd');
  late final _ICU4XDecomposingNormalizer_create_nfkd =
      _ICU4XDecomposingNormalizer_create_nfkdPtr.asFunction<
          diplomat_result_box_ICU4XDecomposingNormalizer_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError ICU4XDecomposingNormalizer_normalize(
    ffi.Pointer<ICU4XDecomposingNormalizer> self,
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XDecomposingNormalizer_normalize(
      self,
      s_data,
      s_len,
      write,
    );
  }

  late final _ICU4XDecomposingNormalizer_normalizePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XDecomposingNormalizer>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XDecomposingNormalizer_normalize');
  late final _ICU4XDecomposingNormalizer_normalize =
      _ICU4XDecomposingNormalizer_normalizePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XDecomposingNormalizer>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<DiplomatWriteable>)>();

  bool ICU4XDecomposingNormalizer_is_normalized(
    ffi.Pointer<ICU4XDecomposingNormalizer> self,
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
  ) {
    return _ICU4XDecomposingNormalizer_is_normalized(
      self,
      s_data,
      s_len,
    );
  }

  late final _ICU4XDecomposingNormalizer_is_normalizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ICU4XDecomposingNormalizer>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XDecomposingNormalizer_is_normalized');
  late final _ICU4XDecomposingNormalizer_is_normalized =
      _ICU4XDecomposingNormalizer_is_normalizedPtr.asFunction<
          bool Function(ffi.Pointer<ICU4XDecomposingNormalizer>,
              ffi.Pointer<ffi.Char>, int)>();

  void ICU4XDecomposingNormalizer_destroy(
    ffi.Pointer<ICU4XDecomposingNormalizer> self,
  ) {
    return _ICU4XDecomposingNormalizer_destroy(
      self,
    );
  }

  late final _ICU4XDecomposingNormalizer_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XDecomposingNormalizer>)>>(
      'ICU4XDecomposingNormalizer_destroy');
  late final _ICU4XDecomposingNormalizer_destroy =
      _ICU4XDecomposingNormalizer_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XDecomposingNormalizer>)>();

  diplomat_result_box_ICU4XRegionDisplayNames_ICU4XError
      ICU4XRegionDisplayNames_try_new_unstable(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
  ) {
    return _ICU4XRegionDisplayNames_try_new_unstable(
      provider,
      locale,
    );
  }

  late final _ICU4XRegionDisplayNames_try_new_unstablePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XRegionDisplayNames_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>>(
      'ICU4XRegionDisplayNames_try_new_unstable');
  late final _ICU4XRegionDisplayNames_try_new_unstable =
      _ICU4XRegionDisplayNames_try_new_unstablePtr.asFunction<
          diplomat_result_box_ICU4XRegionDisplayNames_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ffi.Pointer<ICU4XLocale>)>();

  diplomat_result_void_ICU4XError ICU4XRegionDisplayNames_of(
    ffi.Pointer<ICU4XRegionDisplayNames> self,
    ffi.Pointer<ffi.Char> region_data,
    int region_len,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XRegionDisplayNames_of(
      self,
      region_data,
      region_len,
      write,
    );
  }

  late final _ICU4XRegionDisplayNames_ofPtr = _lookup<
      ffi.NativeFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XRegionDisplayNames>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<DiplomatWriteable>)>>('ICU4XRegionDisplayNames_of');
  late final _ICU4XRegionDisplayNames_of =
      _ICU4XRegionDisplayNames_ofPtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XRegionDisplayNames>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XRegionDisplayNames_destroy(
    ffi.Pointer<ICU4XRegionDisplayNames> self,
  ) {
    return _ICU4XRegionDisplayNames_destroy(
      self,
    );
  }

  late final _ICU4XRegionDisplayNames_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XRegionDisplayNames>)>>(
      'ICU4XRegionDisplayNames_destroy');
  late final _ICU4XRegionDisplayNames_destroy =
      _ICU4XRegionDisplayNames_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XRegionDisplayNames>)>();

  int ICU4XCodePointMapData16_get(
    ffi.Pointer<ICU4XCodePointMapData16> self,
    int cp,
  ) {
    return _ICU4XCodePointMapData16_get(
      self,
      cp,
    );
  }

  late final _ICU4XCodePointMapData16_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ICU4XCodePointMapData16>,
              char32_t)>>('ICU4XCodePointMapData16_get');
  late final _ICU4XCodePointMapData16_get = _ICU4XCodePointMapData16_getPtr
      .asFunction<int Function(ffi.Pointer<ICU4XCodePointMapData16>, int)>();

  int ICU4XCodePointMapData16_get32(
    ffi.Pointer<ICU4XCodePointMapData16> self,
    int cp,
  ) {
    return _ICU4XCodePointMapData16_get32(
      self,
      cp,
    );
  }

  late final _ICU4XCodePointMapData16_get32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ICU4XCodePointMapData16>,
              ffi.Uint32)>>('ICU4XCodePointMapData16_get32');
  late final _ICU4XCodePointMapData16_get32 = _ICU4XCodePointMapData16_get32Ptr
      .asFunction<int Function(ffi.Pointer<ICU4XCodePointMapData16>, int)>();

  ffi.Pointer<CodePointRangeIterator>
      ICU4XCodePointMapData16_iter_ranges_for_value(
    ffi.Pointer<ICU4XCodePointMapData16> self,
    int value,
  ) {
    return _ICU4XCodePointMapData16_iter_ranges_for_value(
      self,
      value,
    );
  }

  late final _ICU4XCodePointMapData16_iter_ranges_for_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointMapData16>,
              ffi.Uint16)>>('ICU4XCodePointMapData16_iter_ranges_for_value');
  late final _ICU4XCodePointMapData16_iter_ranges_for_value =
      _ICU4XCodePointMapData16_iter_ranges_for_valuePtr.asFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointMapData16>, int)>();

  ffi.Pointer<CodePointRangeIterator>
      ICU4XCodePointMapData16_iter_ranges_for_value_complemented(
    ffi.Pointer<ICU4XCodePointMapData16> self,
    int value,
  ) {
    return _ICU4XCodePointMapData16_iter_ranges_for_value_complemented(
      self,
      value,
    );
  }

  late final _ICU4XCodePointMapData16_iter_ranges_for_value_complementedPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<CodePointRangeIterator> Function(
                      ffi.Pointer<ICU4XCodePointMapData16>, ffi.Uint16)>>(
          'ICU4XCodePointMapData16_iter_ranges_for_value_complemented');
  late final _ICU4XCodePointMapData16_iter_ranges_for_value_complemented =
      _ICU4XCodePointMapData16_iter_ranges_for_value_complementedPtr.asFunction<
          ffi.Pointer<CodePointRangeIterator> Function(
              ffi.Pointer<ICU4XCodePointMapData16>, int)>();

  ffi.Pointer<ICU4XCodePointSetData> ICU4XCodePointMapData16_get_set_for_value(
    ffi.Pointer<ICU4XCodePointMapData16> self,
    int value,
  ) {
    return _ICU4XCodePointMapData16_get_set_for_value(
      self,
      value,
    );
  }

  late final _ICU4XCodePointMapData16_get_set_for_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XCodePointSetData> Function(
              ffi.Pointer<ICU4XCodePointMapData16>,
              ffi.Uint16)>>('ICU4XCodePointMapData16_get_set_for_value');
  late final _ICU4XCodePointMapData16_get_set_for_value =
      _ICU4XCodePointMapData16_get_set_for_valuePtr.asFunction<
          ffi.Pointer<ICU4XCodePointSetData> Function(
              ffi.Pointer<ICU4XCodePointMapData16>, int)>();

  diplomat_result_box_ICU4XCodePointMapData16_ICU4XError
      ICU4XCodePointMapData16_load_script(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XCodePointMapData16_load_script(
      provider,
    );
  }

  late final _ICU4XCodePointMapData16_load_scriptPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XCodePointMapData16_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XCodePointMapData16_load_script');
  late final _ICU4XCodePointMapData16_load_script =
      _ICU4XCodePointMapData16_load_scriptPtr.asFunction<
          diplomat_result_box_ICU4XCodePointMapData16_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  void ICU4XCodePointMapData16_destroy(
    ffi.Pointer<ICU4XCodePointMapData16> self,
  ) {
    return _ICU4XCodePointMapData16_destroy(
      self,
    );
  }

  late final _ICU4XCodePointMapData16_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XCodePointMapData16>)>>(
      'ICU4XCodePointMapData16_destroy');
  late final _ICU4XCodePointMapData16_destroy =
      _ICU4XCodePointMapData16_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XCodePointMapData16>)>();

  diplomat_result_box_ICU4XGregorianZonedDateTimeFormatter_ICU4XError
      ICU4XGregorianZonedDateTimeFormatter_create_with_lengths(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int date_length,
    int time_length,
  ) {
    return _ICU4XGregorianZonedDateTimeFormatter_create_with_lengths(
      provider,
      locale,
      date_length,
      time_length,
    );
  }

  late final _ICU4XGregorianZonedDateTimeFormatter_create_with_lengthsPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XGregorianZonedDateTimeFormatter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XLocale>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'ICU4XGregorianZonedDateTimeFormatter_create_with_lengths');
  late final _ICU4XGregorianZonedDateTimeFormatter_create_with_lengths =
      _ICU4XGregorianZonedDateTimeFormatter_create_with_lengthsPtr.asFunction<
          diplomat_result_box_ICU4XGregorianZonedDateTimeFormatter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>,
              ffi.Pointer<ICU4XLocale>,
              int,
              int)>();

  diplomat_result_box_ICU4XGregorianZonedDateTimeFormatter_ICU4XError
      ICU4XGregorianZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallback(
    ffi.Pointer<ICU4XDataProvider> provider,
    ffi.Pointer<ICU4XLocale> locale,
    int date_length,
    int time_length,
    ICU4XIsoTimeZoneOptions zone_options,
  ) {
    return _ICU4XGregorianZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallback(
      provider,
      locale,
      date_length,
      time_length,
      zone_options,
    );
  }

  late final _ICU4XGregorianZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallbackPtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_box_ICU4XGregorianZonedDateTimeFormatter_ICU4XError Function(
                      ffi.Pointer<ICU4XDataProvider>,
                      ffi.Pointer<ICU4XLocale>,
                      ffi.Int32,
                      ffi.Int32,
                      ICU4XIsoTimeZoneOptions)>>(
          'ICU4XGregorianZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallback');
  late final _ICU4XGregorianZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallback =
      _ICU4XGregorianZonedDateTimeFormatter_create_with_lengths_and_iso_8601_time_zone_fallbackPtr
          .asFunction<
              diplomat_result_box_ICU4XGregorianZonedDateTimeFormatter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>,
                  ffi.Pointer<ICU4XLocale>,
                  int,
                  int,
                  ICU4XIsoTimeZoneOptions)>();

  diplomat_result_void_ICU4XError
      ICU4XGregorianZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zone(
    ffi.Pointer<ICU4XGregorianZonedDateTimeFormatter> self,
    ffi.Pointer<ICU4XIsoDateTime> datetime,
    ffi.Pointer<ICU4XCustomTimeZone> time_zone,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XGregorianZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zone(
      self,
      datetime,
      time_zone,
      write,
    );
  }

  late final _ICU4XGregorianZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zonePtr =
      _lookup<
              ffi.NativeFunction<
                  diplomat_result_void_ICU4XError Function(
                      ffi.Pointer<ICU4XGregorianZonedDateTimeFormatter>,
                      ffi.Pointer<ICU4XIsoDateTime>,
                      ffi.Pointer<ICU4XCustomTimeZone>,
                      ffi.Pointer<DiplomatWriteable>)>>(
          'ICU4XGregorianZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zone');
  late final _ICU4XGregorianZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zone =
      _ICU4XGregorianZonedDateTimeFormatter_format_iso_datetime_with_custom_time_zonePtr
          .asFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XGregorianZonedDateTimeFormatter>,
                  ffi.Pointer<ICU4XIsoDateTime>,
                  ffi.Pointer<ICU4XCustomTimeZone>,
                  ffi.Pointer<DiplomatWriteable>)>();

  void ICU4XGregorianZonedDateTimeFormatter_destroy(
    ffi.Pointer<ICU4XGregorianZonedDateTimeFormatter> self,
  ) {
    return _ICU4XGregorianZonedDateTimeFormatter_destroy(
      self,
    );
  }

  late final _ICU4XGregorianZonedDateTimeFormatter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ICU4XGregorianZonedDateTimeFormatter>)>>(
      'ICU4XGregorianZonedDateTimeFormatter_destroy');
  late final _ICU4XGregorianZonedDateTimeFormatter_destroy =
      _ICU4XGregorianZonedDateTimeFormatter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XGregorianZonedDateTimeFormatter>)>();

  int ICU4XLineBreakIteratorUtf16_next(
    ffi.Pointer<ICU4XLineBreakIteratorUtf16> self,
  ) {
    return _ICU4XLineBreakIteratorUtf16_next(
      self,
    );
  }

  late final _ICU4XLineBreakIteratorUtf16_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ICU4XLineBreakIteratorUtf16>)>>(
      'ICU4XLineBreakIteratorUtf16_next');
  late final _ICU4XLineBreakIteratorUtf16_next =
      _ICU4XLineBreakIteratorUtf16_nextPtr.asFunction<
          int Function(ffi.Pointer<ICU4XLineBreakIteratorUtf16>)>();

  void ICU4XLineBreakIteratorUtf16_destroy(
    ffi.Pointer<ICU4XLineBreakIteratorUtf16> self,
  ) {
    return _ICU4XLineBreakIteratorUtf16_destroy(
      self,
    );
  }

  late final _ICU4XLineBreakIteratorUtf16_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XLineBreakIteratorUtf16>)>>(
      'ICU4XLineBreakIteratorUtf16_destroy');
  late final _ICU4XLineBreakIteratorUtf16_destroy =
      _ICU4XLineBreakIteratorUtf16_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XLineBreakIteratorUtf16>)>();

  diplomat_result_box_ICU4XLineSegmenter_ICU4XError
      ICU4XLineSegmenter_create_auto(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XLineSegmenter_create_auto(
      provider,
    );
  }

  late final _ICU4XLineSegmenter_create_autoPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XLineSegmenter_create_auto');
  late final _ICU4XLineSegmenter_create_auto =
      _ICU4XLineSegmenter_create_autoPtr.asFunction<
          diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XLineSegmenter_ICU4XError
      ICU4XLineSegmenter_create_lstm(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XLineSegmenter_create_lstm(
      provider,
    );
  }

  late final _ICU4XLineSegmenter_create_lstmPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XLineSegmenter_create_lstm');
  late final _ICU4XLineSegmenter_create_lstm =
      _ICU4XLineSegmenter_create_lstmPtr.asFunction<
          diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XLineSegmenter_ICU4XError
      ICU4XLineSegmenter_create_dictionary(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XLineSegmenter_create_dictionary(
      provider,
    );
  }

  late final _ICU4XLineSegmenter_create_dictionaryPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XLineSegmenter_create_dictionary');
  late final _ICU4XLineSegmenter_create_dictionary =
      _ICU4XLineSegmenter_create_dictionaryPtr.asFunction<
          diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XLineSegmenter_ICU4XError
      ICU4XLineSegmenter_create_auto_with_options_v1(
    ffi.Pointer<ICU4XDataProvider> provider,
    ICU4XLineBreakOptionsV1 options,
  ) {
    return _ICU4XLineSegmenter_create_auto_with_options_v1(
      provider,
      options,
    );
  }

  late final _ICU4XLineSegmenter_create_auto_with_options_v1Ptr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ICU4XLineBreakOptionsV1)>>(
      'ICU4XLineSegmenter_create_auto_with_options_v1');
  late final _ICU4XLineSegmenter_create_auto_with_options_v1 =
      _ICU4XLineSegmenter_create_auto_with_options_v1Ptr.asFunction<
          diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ICU4XLineBreakOptionsV1)>();

  diplomat_result_box_ICU4XLineSegmenter_ICU4XError
      ICU4XLineSegmenter_create_lstm_with_options_v1(
    ffi.Pointer<ICU4XDataProvider> provider,
    ICU4XLineBreakOptionsV1 options,
  ) {
    return _ICU4XLineSegmenter_create_lstm_with_options_v1(
      provider,
      options,
    );
  }

  late final _ICU4XLineSegmenter_create_lstm_with_options_v1Ptr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ICU4XLineBreakOptionsV1)>>(
      'ICU4XLineSegmenter_create_lstm_with_options_v1');
  late final _ICU4XLineSegmenter_create_lstm_with_options_v1 =
      _ICU4XLineSegmenter_create_lstm_with_options_v1Ptr.asFunction<
          diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ICU4XLineBreakOptionsV1)>();

  diplomat_result_box_ICU4XLineSegmenter_ICU4XError
      ICU4XLineSegmenter_create_dictionary_with_options_v1(
    ffi.Pointer<ICU4XDataProvider> provider,
    ICU4XLineBreakOptionsV1 options,
  ) {
    return _ICU4XLineSegmenter_create_dictionary_with_options_v1(
      provider,
      options,
    );
  }

  late final _ICU4XLineSegmenter_create_dictionary_with_options_v1Ptr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>, ICU4XLineBreakOptionsV1)>>(
      'ICU4XLineSegmenter_create_dictionary_with_options_v1');
  late final _ICU4XLineSegmenter_create_dictionary_with_options_v1 =
      _ICU4XLineSegmenter_create_dictionary_with_options_v1Ptr.asFunction<
          diplomat_result_box_ICU4XLineSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>, ICU4XLineBreakOptionsV1)>();

  ffi.Pointer<ICU4XLineBreakIteratorUtf8> ICU4XLineSegmenter_segment_utf8(
    ffi.Pointer<ICU4XLineSegmenter> self,
    ffi.Pointer<ffi.Char> input_data,
    int input_len,
  ) {
    return _ICU4XLineSegmenter_segment_utf8(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XLineSegmenter_segment_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XLineBreakIteratorUtf8> Function(
              ffi.Pointer<ICU4XLineSegmenter>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XLineSegmenter_segment_utf8');
  late final _ICU4XLineSegmenter_segment_utf8 =
      _ICU4XLineSegmenter_segment_utf8Ptr.asFunction<
          ffi.Pointer<ICU4XLineBreakIteratorUtf8> Function(
              ffi.Pointer<ICU4XLineSegmenter>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ICU4XLineBreakIteratorUtf16> ICU4XLineSegmenter_segment_utf16(
    ffi.Pointer<ICU4XLineSegmenter> self,
    ffi.Pointer<ffi.Uint16> input_data,
    int input_len,
  ) {
    return _ICU4XLineSegmenter_segment_utf16(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XLineSegmenter_segment_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XLineBreakIteratorUtf16> Function(
              ffi.Pointer<ICU4XLineSegmenter>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Size)>>('ICU4XLineSegmenter_segment_utf16');
  late final _ICU4XLineSegmenter_segment_utf16 =
      _ICU4XLineSegmenter_segment_utf16Ptr.asFunction<
          ffi.Pointer<ICU4XLineBreakIteratorUtf16> Function(
              ffi.Pointer<ICU4XLineSegmenter>, ffi.Pointer<ffi.Uint16>, int)>();

  ffi.Pointer<ICU4XLineBreakIteratorLatin1> ICU4XLineSegmenter_segment_latin1(
    ffi.Pointer<ICU4XLineSegmenter> self,
    ffi.Pointer<ffi.Uint8> input_data,
    int input_len,
  ) {
    return _ICU4XLineSegmenter_segment_latin1(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XLineSegmenter_segment_latin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XLineBreakIteratorLatin1> Function(
              ffi.Pointer<ICU4XLineSegmenter>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('ICU4XLineSegmenter_segment_latin1');
  late final _ICU4XLineSegmenter_segment_latin1 =
      _ICU4XLineSegmenter_segment_latin1Ptr.asFunction<
          ffi.Pointer<ICU4XLineBreakIteratorLatin1> Function(
              ffi.Pointer<ICU4XLineSegmenter>, ffi.Pointer<ffi.Uint8>, int)>();

  void ICU4XLineSegmenter_destroy(
    ffi.Pointer<ICU4XLineSegmenter> self,
  ) {
    return _ICU4XLineSegmenter_destroy(
      self,
    );
  }

  late final _ICU4XLineSegmenter_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ICU4XLineSegmenter>)>>('ICU4XLineSegmenter_destroy');
  late final _ICU4XLineSegmenter_destroy = _ICU4XLineSegmenter_destroyPtr
      .asFunction<void Function(ffi.Pointer<ICU4XLineSegmenter>)>();

  diplomat_result_box_ICU4XSentenceSegmenter_ICU4XError
      ICU4XSentenceSegmenter_create(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XSentenceSegmenter_create(
      provider,
    );
  }

  late final _ICU4XSentenceSegmenter_createPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XSentenceSegmenter_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XSentenceSegmenter_create');
  late final _ICU4XSentenceSegmenter_create =
      _ICU4XSentenceSegmenter_createPtr.asFunction<
          diplomat_result_box_ICU4XSentenceSegmenter_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  ffi.Pointer<ICU4XSentenceBreakIteratorUtf8>
      ICU4XSentenceSegmenter_segment_utf8(
    ffi.Pointer<ICU4XSentenceSegmenter> self,
    ffi.Pointer<ffi.Char> input_data,
    int input_len,
  ) {
    return _ICU4XSentenceSegmenter_segment_utf8(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XSentenceSegmenter_segment_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XSentenceBreakIteratorUtf8> Function(
              ffi.Pointer<ICU4XSentenceSegmenter>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XSentenceSegmenter_segment_utf8');
  late final _ICU4XSentenceSegmenter_segment_utf8 =
      _ICU4XSentenceSegmenter_segment_utf8Ptr.asFunction<
          ffi.Pointer<ICU4XSentenceBreakIteratorUtf8> Function(
              ffi.Pointer<ICU4XSentenceSegmenter>,
              ffi.Pointer<ffi.Char>,
              int)>();

  ffi.Pointer<ICU4XSentenceBreakIteratorUtf16>
      ICU4XSentenceSegmenter_segment_utf16(
    ffi.Pointer<ICU4XSentenceSegmenter> self,
    ffi.Pointer<ffi.Uint16> input_data,
    int input_len,
  ) {
    return _ICU4XSentenceSegmenter_segment_utf16(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XSentenceSegmenter_segment_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XSentenceBreakIteratorUtf16> Function(
              ffi.Pointer<ICU4XSentenceSegmenter>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Size)>>('ICU4XSentenceSegmenter_segment_utf16');
  late final _ICU4XSentenceSegmenter_segment_utf16 =
      _ICU4XSentenceSegmenter_segment_utf16Ptr.asFunction<
          ffi.Pointer<ICU4XSentenceBreakIteratorUtf16> Function(
              ffi.Pointer<ICU4XSentenceSegmenter>,
              ffi.Pointer<ffi.Uint16>,
              int)>();

  ffi.Pointer<ICU4XSentenceBreakIteratorLatin1>
      ICU4XSentenceSegmenter_segment_latin1(
    ffi.Pointer<ICU4XSentenceSegmenter> self,
    ffi.Pointer<ffi.Uint8> input_data,
    int input_len,
  ) {
    return _ICU4XSentenceSegmenter_segment_latin1(
      self,
      input_data,
      input_len,
    );
  }

  late final _ICU4XSentenceSegmenter_segment_latin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ICU4XSentenceBreakIteratorLatin1> Function(
              ffi.Pointer<ICU4XSentenceSegmenter>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('ICU4XSentenceSegmenter_segment_latin1');
  late final _ICU4XSentenceSegmenter_segment_latin1 =
      _ICU4XSentenceSegmenter_segment_latin1Ptr.asFunction<
          ffi.Pointer<ICU4XSentenceBreakIteratorLatin1> Function(
              ffi.Pointer<ICU4XSentenceSegmenter>,
              ffi.Pointer<ffi.Uint8>,
              int)>();

  void ICU4XSentenceSegmenter_destroy(
    ffi.Pointer<ICU4XSentenceSegmenter> self,
  ) {
    return _ICU4XSentenceSegmenter_destroy(
      self,
    );
  }

  late final _ICU4XSentenceSegmenter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XSentenceSegmenter>)>>(
      'ICU4XSentenceSegmenter_destroy');
  late final _ICU4XSentenceSegmenter_destroy =
      _ICU4XSentenceSegmenter_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XSentenceSegmenter>)>();

  diplomat_result_box_ICU4XComposingNormalizer_ICU4XError
      ICU4XComposingNormalizer_create_nfc(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XComposingNormalizer_create_nfc(
      provider,
    );
  }

  late final _ICU4XComposingNormalizer_create_nfcPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XComposingNormalizer_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XComposingNormalizer_create_nfc');
  late final _ICU4XComposingNormalizer_create_nfc =
      _ICU4XComposingNormalizer_create_nfcPtr.asFunction<
          diplomat_result_box_ICU4XComposingNormalizer_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_box_ICU4XComposingNormalizer_ICU4XError
      ICU4XComposingNormalizer_create_nfkc(
    ffi.Pointer<ICU4XDataProvider> provider,
  ) {
    return _ICU4XComposingNormalizer_create_nfkc(
      provider,
    );
  }

  late final _ICU4XComposingNormalizer_create_nfkcPtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_box_ICU4XComposingNormalizer_ICU4XError Function(
                  ffi.Pointer<ICU4XDataProvider>)>>(
      'ICU4XComposingNormalizer_create_nfkc');
  late final _ICU4XComposingNormalizer_create_nfkc =
      _ICU4XComposingNormalizer_create_nfkcPtr.asFunction<
          diplomat_result_box_ICU4XComposingNormalizer_ICU4XError Function(
              ffi.Pointer<ICU4XDataProvider>)>();

  diplomat_result_void_ICU4XError ICU4XComposingNormalizer_normalize(
    ffi.Pointer<ICU4XComposingNormalizer> self,
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
    ffi.Pointer<DiplomatWriteable> write,
  ) {
    return _ICU4XComposingNormalizer_normalize(
      self,
      s_data,
      s_len,
      write,
    );
  }

  late final _ICU4XComposingNormalizer_normalizePtr = _lookup<
          ffi.NativeFunction<
              diplomat_result_void_ICU4XError Function(
                  ffi.Pointer<ICU4XComposingNormalizer>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<DiplomatWriteable>)>>(
      'ICU4XComposingNormalizer_normalize');
  late final _ICU4XComposingNormalizer_normalize =
      _ICU4XComposingNormalizer_normalizePtr.asFunction<
          diplomat_result_void_ICU4XError Function(
              ffi.Pointer<ICU4XComposingNormalizer>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<DiplomatWriteable>)>();

  bool ICU4XComposingNormalizer_is_normalized(
    ffi.Pointer<ICU4XComposingNormalizer> self,
    ffi.Pointer<ffi.Char> s_data,
    int s_len,
  ) {
    return _ICU4XComposingNormalizer_is_normalized(
      self,
      s_data,
      s_len,
    );
  }

  late final _ICU4XComposingNormalizer_is_normalizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ICU4XComposingNormalizer>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ICU4XComposingNormalizer_is_normalized');
  late final _ICU4XComposingNormalizer_is_normalized =
      _ICU4XComposingNormalizer_is_normalizedPtr.asFunction<
          bool Function(ffi.Pointer<ICU4XComposingNormalizer>,
              ffi.Pointer<ffi.Char>, int)>();

  void ICU4XComposingNormalizer_destroy(
    ffi.Pointer<ICU4XComposingNormalizer> self,
  ) {
    return _ICU4XComposingNormalizer_destroy(
      self,
    );
  }

  late final _ICU4XComposingNormalizer_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ICU4XComposingNormalizer>)>>(
      'ICU4XComposingNormalizer_destroy');
  late final _ICU4XComposingNormalizer_destroy =
      _ICU4XComposingNormalizer_destroyPtr.asFunction<
          void Function(ffi.Pointer<ICU4XComposingNormalizer>)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef FILE = __sFILE;
typedef va_list = __darwin_va_list;
typedef __darwin_va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;

@ffi.Packed(1)
final class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef __int32_t = ffi.Int;

final class DiplomatWriteable extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<ffi.Char> buf;

  @ffi.Size()
  external int len;

  @ffi.Size()
  external int cap;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DiplomatWriteable>)>>
      flush;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<DiplomatWriteable>, ffi.Size)>> grow;
}

final class DiplomatStringView extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  @ffi.Size()
  external int len;
}

final class DiplomatI8View extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> data;

  @ffi.Size()
  external int len;
}

final class DiplomatU8View extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Size()
  external int len;
}

final class DiplomatI16View extends ffi.Struct {
  external ffi.Pointer<ffi.Int16> data;

  @ffi.Size()
  external int len;
}

final class DiplomatU16View extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> data;

  @ffi.Size()
  external int len;
}

final class DiplomatI32View extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> data;

  @ffi.Size()
  external int len;
}

final class DiplomatU32View extends ffi.Struct {
  external ffi.Pointer<ffi.Uint32> data;

  @ffi.Size()
  external int len;
}

final class DiplomatI64View extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> data;

  @ffi.Size()
  external int len;
}

final class DiplomatU64View extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> data;

  @ffi.Size()
  external int len;
}

final class DiplomatIsizeView extends ffi.Struct {
  external ffi.Pointer<ssize_t> data;

  @ffi.Size()
  external int len;
}

final class DiplomatUsizeView extends ffi.Struct {
  external ffi.Pointer<ffi.Size> data;

  @ffi.Size()
  external int len;
}

final class DiplomatF32View extends ffi.Struct {
  external ffi.Pointer<ffi.Float> data;

  @ffi.Size()
  external int len;
}

final class DiplomatF64View extends ffi.Struct {
  external ffi.Pointer<ffi.Double> data;

  @ffi.Size()
  external int len;
}

final class DiplomatBoolView extends ffi.Struct {
  external ffi.Pointer<ffi.Bool> data;

  @ffi.Size()
  external int len;
}

final class DiplomatCharView extends ffi.Struct {
  external ffi.Pointer<char32_t> data;

  @ffi.Size()
  external int len;
}

typedef char32_t = ffi.Uint32;

final class ICU4XCodePointSetData extends ffi.Opaque {}

final class CodePointRangeIterator extends ffi.Opaque {}

final class CodePointRangeIteratorResult extends ffi.Struct {
  @ffi.Uint32()
  external int start;

  @ffi.Uint32()
  external int end;

  @ffi.Bool()
  external bool done;
}

final class ICU4XDataProvider extends ffi.Opaque {}

abstract class ICU4XError {
  static const int ICU4XError_UnknownError = 0;
  static const int ICU4XError_WriteableError = 1;
  static const int ICU4XError_OutOfBoundsError = 2;
  static const int ICU4XError_DataMissingDataKeyError = 256;
  static const int ICU4XError_DataMissingVariantError = 257;
  static const int ICU4XError_DataMissingLocaleError = 258;
  static const int ICU4XError_DataNeedsVariantError = 259;
  static const int ICU4XError_DataNeedsLocaleError = 260;
  static const int ICU4XError_DataExtraneousLocaleError = 261;
  static const int ICU4XError_DataFilteredResourceError = 262;
  static const int ICU4XError_DataMismatchedTypeError = 263;
  static const int ICU4XError_DataMissingPayloadError = 264;
  static const int ICU4XError_DataInvalidStateError = 265;
  static const int ICU4XError_DataCustomError = 266;
  static const int ICU4XError_DataIoError = 267;
  static const int ICU4XError_DataUnavailableBufferFormatError = 268;
  static const int ICU4XError_DataMismatchedAnyBufferError = 269;
  static const int ICU4XError_LocaleUndefinedSubtagError = 512;
  static const int ICU4XError_LocaleParserLanguageError = 513;
  static const int ICU4XError_LocaleParserSubtagError = 514;
  static const int ICU4XError_LocaleParserExtensionError = 515;
  static const int ICU4XError_DataStructValidityError = 768;
  static const int ICU4XError_PropertyUnknownScriptIdError = 1024;
  static const int ICU4XError_PropertyUnknownGeneralCategoryGroupError = 1025;
  static const int ICU4XError_PropertyUnexpectedPropertyNameError = 1026;
  static const int ICU4XError_FixedDecimalLimitError = 1280;
  static const int ICU4XError_FixedDecimalSyntaxError = 1281;
  static const int ICU4XError_PluralsParserError = 1536;
  static const int ICU4XError_CalendarParseError = 1792;
  static const int ICU4XError_CalendarOverflowError = 1793;
  static const int ICU4XError_CalendarUnderflowError = 1794;
  static const int ICU4XError_CalendarOutOfRangeError = 1795;
  static const int ICU4XError_CalendarUnknownEraError = 1796;
  static const int ICU4XError_CalendarUnknownMonthCodeError = 1797;
  static const int ICU4XError_CalendarMissingInputError = 1798;
  static const int ICU4XError_CalendarUnknownKindError = 1799;
  static const int ICU4XError_CalendarMissingError = 1800;
  static const int ICU4XError_DateTimePatternError = 2048;
  static const int ICU4XError_DateTimeMissingInputFieldError = 2049;
  static const int ICU4XError_DateTimeSkeletonError = 2050;
  static const int ICU4XError_DateTimeUnsupportedFieldError = 2051;
  static const int ICU4XError_DateTimeUnsupportedOptionsError = 2052;
  static const int ICU4XError_DateTimeMissingWeekdaySymbolError = 2053;
  static const int ICU4XError_DateTimeMissingMonthSymbolError = 2054;
  static const int ICU4XError_DateTimeFixedDecimalError = 2055;
  static const int ICU4XError_DateTimeMismatchedCalendarError = 2056;
  static const int ICU4XError_TinyStrTooLargeError = 2304;
  static const int ICU4XError_TinyStrContainsNullError = 2305;
  static const int ICU4XError_TinyStrNonAsciiError = 2306;
  static const int ICU4XError_TimeZoneOffsetOutOfBoundsError = 2560;
  static const int ICU4XError_TimeZoneInvalidOffsetError = 2561;
  static const int ICU4XError_TimeZoneMissingInputError = 2562;
  static const int ICU4XError_NormalizerFutureExtensionError = 2816;
  static const int ICU4XError_NormalizerValidationError = 2817;
}

final class diplomat_result_box_ICU4XDataProvider_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion1 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion1 extends ffi.Union {
  external ffi.Pointer<ICU4XDataProvider> ok;

  @ffi.Int32()
  external int err;
}

final class diplomat_result_void_ICU4XError extends ffi.Struct {
  external UnnamedUnion2 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Int32()
  external int err;
}

final class ICU4XLocaleFallbacker extends ffi.Opaque {}

final class diplomat_result_box_ICU4XLocaleFallbacker_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion3 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion3 extends ffi.Union {
  external ffi.Pointer<ICU4XLocaleFallbacker> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XLocaleFallbackPriority {
  static const int ICU4XLocaleFallbackPriority_Language = 0;
  static const int ICU4XLocaleFallbackPriority_Region = 1;
  static const int ICU4XLocaleFallbackPriority_Collation = 2;
}

final class ICU4XLocaleFallbackConfig extends ffi.Struct {
  @ffi.Int32()
  external int priority;

  external DiplomatStringView extension_key;
}

final class ICU4XLocaleFallbackerWithConfig extends ffi.Opaque {}

final class diplomat_result_box_ICU4XLocaleFallbackerWithConfig_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion4 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion4 extends ffi.Union {
  external ffi.Pointer<ICU4XLocaleFallbackerWithConfig> ok;

  @ffi.Int32()
  external int err;
}

final class diplomat_result_box_ICU4XCodePointSetData_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion5 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion5 extends ffi.Union {
  external ffi.Pointer<ICU4XCodePointSetData> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XLocaleCanonicalizer extends ffi.Opaque {}

final class diplomat_result_box_ICU4XLocaleCanonicalizer_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion6 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion6 extends ffi.Union {
  external ffi.Pointer<ICU4XLocaleCanonicalizer> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XLocale extends ffi.Opaque {}

final class diplomat_result_box_ICU4XLocale_ICU4XError extends ffi.Struct {
  external UnnamedUnion7 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion7 extends ffi.Union {
  external ffi.Pointer<ICU4XLocale> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XOrdering {
  static const int ICU4XOrdering_Less = -1;
  static const int ICU4XOrdering_Equal = 0;
  static const int ICU4XOrdering_Greater = 1;
}

abstract class ICU4XTransformResult {
  static const int ICU4XTransformResult_Modified = 0;
  static const int ICU4XTransformResult_Unmodified = 1;
}

final class ICU4XPluralOperands extends ffi.Opaque {}

final class diplomat_result_box_ICU4XPluralOperands_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion8 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion8 extends ffi.Union {
  external ffi.Pointer<ICU4XPluralOperands> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XGraphemeClusterSegmenter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XGraphemeClusterSegmenter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion9 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion9 extends ffi.Union {
  external ffi.Pointer<ICU4XGraphemeClusterSegmenter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XGraphemeClusterBreakIteratorUtf8 extends ffi.Opaque {}

final class ICU4XGraphemeClusterBreakIteratorUtf16 extends ffi.Opaque {}

final class ICU4XGraphemeClusterBreakIteratorLatin1 extends ffi.Opaque {}

final class ICU4XPluralRules extends ffi.Opaque {}

final class diplomat_result_box_ICU4XPluralRules_ICU4XError extends ffi.Struct {
  external UnnamedUnion10 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion10 extends ffi.Union {
  external ffi.Pointer<ICU4XPluralRules> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XPluralCategory {
  static const int ICU4XPluralCategory_Zero = 0;
  static const int ICU4XPluralCategory_One = 1;
  static const int ICU4XPluralCategory_Two = 2;
  static const int ICU4XPluralCategory_Few = 3;
  static const int ICU4XPluralCategory_Many = 4;
  static const int ICU4XPluralCategory_Other = 5;
}

final class diplomat_result_ICU4XPluralCategory_void extends ffi.Struct {
  external UnnamedUnion11 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion11 extends ffi.Union {
  @ffi.Int32()
  external int ok;
}

final class ICU4XPluralCategories extends ffi.Struct {
  @ffi.Bool()
  external bool zero;

  @ffi.Bool()
  external bool one;

  @ffi.Bool()
  external bool two;

  @ffi.Bool()
  external bool few;

  @ffi.Bool()
  external bool many;

  @ffi.Bool()
  external bool other;
}

final class ICU4XDataStruct extends ffi.Opaque {}

final class diplomat_result_box_ICU4XDataStruct_ICU4XError extends ffi.Struct {
  external UnnamedUnion12 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion12 extends ffi.Union {
  external ffi.Pointer<ICU4XDataStruct> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XWeekRelativeUnit {
  static const int ICU4XWeekRelativeUnit_Previous = 0;
  static const int ICU4XWeekRelativeUnit_Current = 1;
  static const int ICU4XWeekRelativeUnit_Next = 2;
}

abstract class ICU4XTimeLength {
  static const int ICU4XTimeLength_Full = 0;
  static const int ICU4XTimeLength_Long = 1;
  static const int ICU4XTimeLength_Medium = 2;
  static const int ICU4XTimeLength_Short = 3;
}

final class ICU4XComposingNormalizer extends ffi.Opaque {}

final class diplomat_result_box_ICU4XComposingNormalizer_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion13 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion13 extends ffi.Union {
  external ffi.Pointer<ICU4XComposingNormalizer> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XDate extends ffi.Opaque {}

final class diplomat_result_box_ICU4XDate_ICU4XError extends ffi.Struct {
  external UnnamedUnion14 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion14 extends ffi.Union {
  external ffi.Pointer<ICU4XDate> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XMetazoneCalculator extends ffi.Opaque {}

final class diplomat_result_box_ICU4XMetazoneCalculator_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion15 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion15 extends ffi.Union {
  external ffi.Pointer<ICU4XMetazoneCalculator> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XCalendar extends ffi.Opaque {}

final class diplomat_result_box_ICU4XCalendar_ICU4XError extends ffi.Struct {
  external UnnamedUnion16 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion16 extends ffi.Union {
  external ffi.Pointer<ICU4XCalendar> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XAnyCalendarKind {
  static const int ICU4XAnyCalendarKind_Iso = 0;
  static const int ICU4XAnyCalendarKind_Gregorian = 1;
  static const int ICU4XAnyCalendarKind_Buddhist = 2;
  static const int ICU4XAnyCalendarKind_Japanese = 3;
  static const int ICU4XAnyCalendarKind_JapaneseExtended = 4;
  static const int ICU4XAnyCalendarKind_Ethiopian = 5;
  static const int ICU4XAnyCalendarKind_EthiopianAmeteAlem = 6;
  static const int ICU4XAnyCalendarKind_Indian = 7;
  static const int ICU4XAnyCalendarKind_Coptic = 8;
}

final class diplomat_result_ICU4XAnyCalendarKind_void extends ffi.Struct {
  external UnnamedUnion17 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion17 extends ffi.Union {
  @ffi.Int32()
  external int ok;
}

final class ICU4XIsoDate extends ffi.Opaque {}

final class diplomat_result_box_ICU4XIsoDate_ICU4XError extends ffi.Struct {
  external UnnamedUnion18 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion18 extends ffi.Union {
  external ffi.Pointer<ICU4XIsoDate> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XIsoWeekday {
  static const int ICU4XIsoWeekday_Monday = 1;
  static const int ICU4XIsoWeekday_Tuesday = 2;
  static const int ICU4XIsoWeekday_Wednesday = 3;
  static const int ICU4XIsoWeekday_Thursday = 4;
  static const int ICU4XIsoWeekday_Friday = 5;
  static const int ICU4XIsoWeekday_Saturday = 6;
  static const int ICU4XIsoWeekday_Sunday = 7;
}

final class ICU4XWeekCalculator extends ffi.Opaque {}

final class diplomat_result_box_ICU4XWeekCalculator_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion19 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion19 extends ffi.Union {
  external ffi.Pointer<ICU4XWeekCalculator> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XWeekOf extends ffi.Struct {
  @ffi.Uint16()
  external int week;

  @ffi.Int32()
  external int unit;
}

final class diplomat_result_ICU4XWeekOf_ICU4XError extends ffi.Struct {
  external UnnamedUnion20 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion20 extends ffi.Union {
  external ICU4XWeekOf ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XSentenceBreakIteratorLatin1 extends ffi.Opaque {}

final class ICU4XDateFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XDateFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion21 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion21 extends ffi.Union {
  external ffi.Pointer<ICU4XDateFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XScriptWithExtensions extends ffi.Opaque {}

final class diplomat_result_box_ICU4XScriptWithExtensions_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion22 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion22 extends ffi.Union {
  external ffi.Pointer<ICU4XScriptWithExtensions> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XSentenceSegmenter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XSentenceSegmenter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion23 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion23 extends ffi.Union {
  external ffi.Pointer<ICU4XSentenceSegmenter> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XDisplayNamesStyle {
  static const int ICU4XDisplayNamesStyle_Auto = 0;
  static const int ICU4XDisplayNamesStyle_Narrow = 1;
  static const int ICU4XDisplayNamesStyle_Short = 2;
  static const int ICU4XDisplayNamesStyle_Long = 3;
  static const int ICU4XDisplayNamesStyle_Menu = 4;
}

abstract class ICU4XDisplayNamesFallback {
  static const int ICU4XDisplayNamesFallback_Code = 0;
  static const int ICU4XDisplayNamesFallback_None = 1;
}

abstract class ICU4XLanguageDisplay {
  static const int ICU4XLanguageDisplay_Dialect = 0;
  static const int ICU4XLanguageDisplay_Standard = 1;
}

final class ICU4XDisplayNamesOptionsV1 extends ffi.Struct {
  @ffi.Int32()
  external int style;

  @ffi.Int32()
  external int fallback;

  @ffi.Int32()
  external int language_display;
}

final class ICU4XLineSegmenter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XLineSegmenter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion24 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion24 extends ffi.Union {
  external ffi.Pointer<ICU4XLineSegmenter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XCanonicalCombiningClassMap extends ffi.Opaque {}

final class diplomat_result_box_ICU4XCanonicalCombiningClassMap_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion25 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion25 extends ffi.Union {
  external ffi.Pointer<ICU4XCanonicalCombiningClassMap> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XGregorianDateTimeFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XGregorianDateTimeFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion26 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion26 extends ffi.Union {
  external ffi.Pointer<ICU4XGregorianDateTimeFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XCustomTimeZone extends ffi.Opaque {}

final class diplomat_result_box_ICU4XCustomTimeZone_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion27 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion27 extends ffi.Union {
  external ffi.Pointer<ICU4XCustomTimeZone> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XDateLength {
  static const int ICU4XDateLength_Full = 0;
  static const int ICU4XDateLength_Long = 1;
  static const int ICU4XDateLength_Medium = 2;
  static const int ICU4XDateLength_Short = 3;
}

final class ICU4XDateTime extends ffi.Opaque {}

final class diplomat_result_box_ICU4XDateTime_ICU4XError extends ffi.Struct {
  external UnnamedUnion28 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion28 extends ffi.Union {
  external ffi.Pointer<ICU4XDateTime> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XTime extends ffi.Opaque {}

final class diplomat_result_box_ICU4XTime_ICU4XError extends ffi.Struct {
  external UnnamedUnion29 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion29 extends ffi.Union {
  external ffi.Pointer<ICU4XTime> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XIsoDateTime extends ffi.Opaque {}

final class diplomat_result_box_ICU4XIsoDateTime_ICU4XError extends ffi.Struct {
  external UnnamedUnion30 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion30 extends ffi.Union {
  external ffi.Pointer<ICU4XIsoDateTime> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XWordSegmenter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XWordSegmenter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion31 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion31 extends ffi.Union {
  external ffi.Pointer<ICU4XWordSegmenter> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XCollatorStrength {
  static const int ICU4XCollatorStrength_Auto = 0;
  static const int ICU4XCollatorStrength_Primary = 1;
  static const int ICU4XCollatorStrength_Secondary = 2;
  static const int ICU4XCollatorStrength_Tertiary = 3;
  static const int ICU4XCollatorStrength_Quaternary = 4;
  static const int ICU4XCollatorStrength_Identical = 5;
}

abstract class ICU4XCollatorAlternateHandling {
  static const int ICU4XCollatorAlternateHandling_Auto = 0;
  static const int ICU4XCollatorAlternateHandling_NonIgnorable = 1;
  static const int ICU4XCollatorAlternateHandling_Shifted = 2;
}

abstract class ICU4XCollatorCaseFirst {
  static const int ICU4XCollatorCaseFirst_Auto = 0;
  static const int ICU4XCollatorCaseFirst_Off = 1;
  static const int ICU4XCollatorCaseFirst_LowerFirst = 2;
  static const int ICU4XCollatorCaseFirst_UpperFirst = 3;
}

abstract class ICU4XCollatorMaxVariable {
  static const int ICU4XCollatorMaxVariable_Auto = 0;
  static const int ICU4XCollatorMaxVariable_Space = 1;
  static const int ICU4XCollatorMaxVariable_Punctuation = 2;
  static const int ICU4XCollatorMaxVariable_Symbol = 3;
  static const int ICU4XCollatorMaxVariable_Currency = 4;
}

abstract class ICU4XCollatorCaseLevel {
  static const int ICU4XCollatorCaseLevel_Auto = 0;
  static const int ICU4XCollatorCaseLevel_Off = 1;
  static const int ICU4XCollatorCaseLevel_On = 2;
}

abstract class ICU4XCollatorNumeric {
  static const int ICU4XCollatorNumeric_Auto = 0;
  static const int ICU4XCollatorNumeric_Off = 1;
  static const int ICU4XCollatorNumeric_On = 2;
}

abstract class ICU4XCollatorBackwardSecondLevel {
  static const int ICU4XCollatorBackwardSecondLevel_Auto = 0;
  static const int ICU4XCollatorBackwardSecondLevel_Off = 1;
  static const int ICU4XCollatorBackwardSecondLevel_On = 2;
}

final class ICU4XCollatorOptionsV1 extends ffi.Struct {
  @ffi.Int32()
  external int strength;

  @ffi.Int32()
  external int alternate_handling;

  @ffi.Int32()
  external int case_first;

  @ffi.Int32()
  external int max_variable;

  @ffi.Int32()
  external int case_level;

  @ffi.Int32()
  external int numeric;

  @ffi.Int32()
  external int backward_second_level;
}

final class ICU4XGeneralCategoryNameToMaskMapper extends ffi.Opaque {}

final class diplomat_result_box_ICU4XGeneralCategoryNameToMaskMapper_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion32 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion32 extends ffi.Union {
  external ffi.Pointer<ICU4XGeneralCategoryNameToMaskMapper> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XCanonicalComposition extends ffi.Opaque {}

final class diplomat_result_box_ICU4XCanonicalComposition_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion33 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion33 extends ffi.Union {
  external ffi.Pointer<ICU4XCanonicalComposition> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XZonedDateTimeFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XZonedDateTimeFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion34 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion34 extends ffi.Union {
  external ffi.Pointer<ICU4XZonedDateTimeFormatter> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XIsoTimeZoneFormat {
  static const int ICU4XIsoTimeZoneFormat_Basic = 0;
  static const int ICU4XIsoTimeZoneFormat_Extended = 1;
  static const int ICU4XIsoTimeZoneFormat_UtcBasic = 2;
  static const int ICU4XIsoTimeZoneFormat_UtcExtended = 3;
}

abstract class ICU4XIsoTimeZoneMinuteDisplay {
  static const int ICU4XIsoTimeZoneMinuteDisplay_Required = 0;
  static const int ICU4XIsoTimeZoneMinuteDisplay_Optional = 1;
}

abstract class ICU4XIsoTimeZoneSecondDisplay {
  static const int ICU4XIsoTimeZoneSecondDisplay_Optional = 0;
  static const int ICU4XIsoTimeZoneSecondDisplay_Never = 1;
}

final class ICU4XIsoTimeZoneOptions extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int minutes;

  @ffi.Int32()
  external int seconds;
}

final class diplomat_result_int32_t_ICU4XError extends ffi.Struct {
  external UnnamedUnion35 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion35 extends ffi.Union {
  @ffi.Int32()
  external int ok;

  @ffi.Int32()
  external int err;
}

final class diplomat_result_bool_ICU4XError extends ffi.Struct {
  external UnnamedUnion36 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion36 extends ffi.Union {
  @ffi.Bool()
  external bool ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XBidiInfo extends ffi.Opaque {}

final class ICU4XBidiParagraph extends ffi.Opaque {}

abstract class ICU4XBidiDirection {
  static const int ICU4XBidiDirection_Ltr = 0;
  static const int ICU4XBidiDirection_Rtl = 1;
  static const int ICU4XBidiDirection_Mixed = 2;
}

abstract class ICU4XListLength {
  static const int ICU4XListLength_Wide = 0;
  static const int ICU4XListLength_Short = 1;
  static const int ICU4XListLength_Narrow = 2;
}

final class ICU4XLineBreakIteratorLatin1 extends ffi.Opaque {}

abstract class ICU4XLineBreakStrictness {
  static const int ICU4XLineBreakStrictness_Loose = 0;
  static const int ICU4XLineBreakStrictness_Normal = 1;
  static const int ICU4XLineBreakStrictness_Strict = 2;
  static const int ICU4XLineBreakStrictness_Anywhere = 3;
}

abstract class ICU4XLineBreakWordOption {
  static const int ICU4XLineBreakWordOption_Normal = 0;
  static const int ICU4XLineBreakWordOption_BreakAll = 1;
  static const int ICU4XLineBreakWordOption_KeepAll = 2;
}

final class ICU4XLineBreakOptionsV1 extends ffi.Struct {
  @ffi.Int32()
  external int strictness;

  @ffi.Int32()
  external int word_option;

  @ffi.Bool()
  external bool ja_zh;
}

final class ICU4XRegionDisplayNames extends ffi.Opaque {}

final class diplomat_result_box_ICU4XRegionDisplayNames_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion37 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion37 extends ffi.Union {
  external ffi.Pointer<ICU4XRegionDisplayNames> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XLogger extends ffi.Opaque {}

final class diplomat_result_void_void extends ffi.Struct {
  @ffi.Bool()
  external bool is_ok;
}

final class ICU4XFixedDecimalFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XFixedDecimalFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion38 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion38 extends ffi.Union {
  external ffi.Pointer<ICU4XFixedDecimalFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XUnicodeSetData extends ffi.Opaque {}

final class diplomat_result_box_ICU4XUnicodeSetData_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion39 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion39 extends ffi.Union {
  external ffi.Pointer<ICU4XUnicodeSetData> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XPropertyValueNameToEnumMapper extends ffi.Opaque {}

final class diplomat_result_box_ICU4XPropertyValueNameToEnumMapper_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion40 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion40 extends ffi.Union {
  external ffi.Pointer<ICU4XPropertyValueNameToEnumMapper> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XSentenceBreakIteratorUtf16 extends ffi.Opaque {}

final class ICU4XLocaleFallbackIterator extends ffi.Opaque {}

final class ICU4XTimeFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XTimeFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion41 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion41 extends ffi.Union {
  external ffi.Pointer<ICU4XTimeFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XTimeZoneFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XTimeZoneFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion42 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion42 extends ffi.Union {
  external ffi.Pointer<ICU4XTimeZoneFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XWordBreakIteratorUtf8 extends ffi.Opaque {}

abstract class ICU4XSegmenterWordType {
  static const int ICU4XSegmenterWordType_None = 0;
  static const int ICU4XSegmenterWordType_Number = 1;
  static const int ICU4XSegmenterWordType_Letter = 2;
}

final class ICU4XWordBreakIteratorUtf16 extends ffi.Opaque {}

final class ICU4XWordBreakIteratorLatin1 extends ffi.Opaque {}

final class ICU4XDecomposed extends ffi.Struct {
  @char32_t()
  external int first;

  @char32_t()
  external int second;
}

final class ICU4XCollator extends ffi.Opaque {}

final class diplomat_result_box_ICU4XCollator_ICU4XError extends ffi.Struct {
  external UnnamedUnion43 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion43 extends ffi.Union {
  external ffi.Pointer<ICU4XCollator> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XFixedDecimal extends ffi.Opaque {}

final class diplomat_result_box_ICU4XFixedDecimal_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion44 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion44 extends ffi.Union {
  external ffi.Pointer<ICU4XFixedDecimal> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XListFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XListFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion45 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion45 extends ffi.Union {
  external ffi.Pointer<ICU4XListFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XCodePointMapData16 extends ffi.Opaque {}

final class diplomat_result_box_ICU4XCodePointMapData16_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion46 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion46 extends ffi.Union {
  external ffi.Pointer<ICU4XCodePointMapData16> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XLocaleExpander extends ffi.Opaque {}

final class diplomat_result_box_ICU4XLocaleExpander_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion47 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion47 extends ffi.Union {
  external ffi.Pointer<ICU4XLocaleExpander> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XCodePointMapData8 extends ffi.Opaque {}

final class diplomat_result_box_ICU4XCodePointMapData8_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion48 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion48 extends ffi.Union {
  external ffi.Pointer<ICU4XCodePointMapData8> ok;

  @ffi.Int32()
  external int err;
}

abstract class ICU4XFixedDecimalGroupingStrategy {
  static const int ICU4XFixedDecimalGroupingStrategy_Auto = 0;
  static const int ICU4XFixedDecimalGroupingStrategy_Never = 1;
  static const int ICU4XFixedDecimalGroupingStrategy_Always = 2;
  static const int ICU4XFixedDecimalGroupingStrategy_Min2 = 3;
}

abstract class ICU4XFixedDecimalSign {
  static const int ICU4XFixedDecimalSign_None = 0;
  static const int ICU4XFixedDecimalSign_Negative = 1;
  static const int ICU4XFixedDecimalSign_Positive = 2;
}

abstract class ICU4XFixedDecimalSignDisplay {
  static const int ICU4XFixedDecimalSignDisplay_Auto = 0;
  static const int ICU4XFixedDecimalSignDisplay_Never = 1;
  static const int ICU4XFixedDecimalSignDisplay_Always = 2;
  static const int ICU4XFixedDecimalSignDisplay_ExceptZero = 3;
  static const int ICU4XFixedDecimalSignDisplay_Negative = 4;
}

final class ICU4XCanonicalDecomposition extends ffi.Opaque {}

final class diplomat_result_box_ICU4XCanonicalDecomposition_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion49 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion49 extends ffi.Union {
  external ffi.Pointer<ICU4XCanonicalDecomposition> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XLocaleDisplayNamesFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XLocaleDisplayNamesFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion50 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion50 extends ffi.Union {
  external ffi.Pointer<ICU4XLocaleDisplayNamesFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XReorderedIndexMap extends ffi.Opaque {}

final class ICU4XList extends ffi.Opaque {}

final class ICU4XScriptExtensionsSet extends ffi.Opaque {}

final class diplomat_result_uint16_t_void extends ffi.Struct {
  external UnnamedUnion51 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion51 extends ffi.Union {
  @ffi.Uint16()
  external int ok;
}

final class ICU4XScriptWithExtensionsBorrowed extends ffi.Opaque {}

final class ICU4XLineBreakIteratorUtf8 extends ffi.Opaque {}

final class ICU4XBidi extends ffi.Opaque {}

final class diplomat_result_box_ICU4XBidi_ICU4XError extends ffi.Struct {
  external UnnamedUnion52 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion52 extends ffi.Union {
  external ffi.Pointer<ICU4XBidi> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XDateTimeFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XDateTimeFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion53 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion53 extends ffi.Union {
  external ffi.Pointer<ICU4XDateTimeFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XSentenceBreakIteratorUtf8 extends ffi.Opaque {}

final class ICU4XGregorianDateFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XGregorianDateFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion54 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion54 extends ffi.Union {
  external ffi.Pointer<ICU4XGregorianDateFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XDecomposingNormalizer extends ffi.Opaque {}

final class diplomat_result_box_ICU4XDecomposingNormalizer_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion55 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion55 extends ffi.Union {
  external ffi.Pointer<ICU4XDecomposingNormalizer> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XGregorianZonedDateTimeFormatter extends ffi.Opaque {}

final class diplomat_result_box_ICU4XGregorianZonedDateTimeFormatter_ICU4XError
    extends ffi.Struct {
  external UnnamedUnion56 unnamed;

  @ffi.Bool()
  external bool is_ok;
}

final class UnnamedUnion56 extends ffi.Union {
  external ffi.Pointer<ICU4XGregorianZonedDateTimeFormatter> ok;

  @ffi.Int32()
  external int err;
}

final class ICU4XLineBreakIteratorUtf16 extends ffi.Opaque {}

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_13_0 = 130000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 130000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 130300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int USER_ADDR_NULL = 0;

const int NULL = 0;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;
