// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Gets the full name for the specified locale.
  /// Note: This has the effect of 'canonicalizing' the string to
  /// a certain extent. Upper and lower case are set as needed,
  /// and if the components were in 'POSIX' format they are changed to
  /// ICU format.  It does NOT map aliased names in any way.
  /// See the top of this header file.
  ///
  /// @param localeID the locale to get the full name with
  /// @param name the full name for localeID
  /// @param nameCapacity the size of the name buffer to store the
  /// full name with
  /// @param err error information if retrieving the full name failed
  /// @return the actual buffer size needed for the full name.  If it's greater
  /// than nameCapacity, the returned full name will be truncated.
  /// @stable ICU 2.8
  int uloc_canonicalize(
    ffi.Pointer<ffi.Uint8> localeID,
    ffi.Pointer<ffi.Uint8> name,
    int nameCapacity,
    ffi.Pointer<ffi.Int32> err,
  ) {
    return _uloc_canonicalize(
      localeID,
      name,
      nameCapacity,
      err,
    );
  }

  late final _uloc_canonicalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Int32, ffi.Pointer<ffi.Int32>)>>('uloc_canonicalize');
  late final _uloc_canonicalize = _uloc_canonicalizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Int32>)>(isLeaf: true);
}

/// Standard ICU4C error code type, a substitute for exceptions.
///
/// Initialize the UErrorCode with U_ZERO_ERROR, and check for success or
/// failure using U_SUCCESS() or U_FAILURE():
///
/// UErrorCode errorCode = U_ZERO_ERROR;
/// // call ICU API that needs an error code parameter.
/// if (U_FAILURE(errorCode)) {
/// // An error occurred. Handle it here.
/// }
///
/// C++ code should use icu::ErrorCode, available in unicode/errorcode.h, or a
/// suitable subclass.
///
/// For more information, see:
/// https://unicode-org.github.io/icu/userguide/dev/codingguidelines#details-about-icu-error-codes
///
/// Note: By convention, ICU functions that take a reference (C++) or a pointer
/// (C) to a UErrorCode first test:
///
/// if (U_FAILURE(errorCode)) { return immediately; }
///
/// so that in a chain of such functions the first one that sets an error code
/// causes the following ones to not perform any operations.
///
/// @stable ICU 2.0
abstract class UErrorCode {
  /// < A resource bundle lookup returned a fallback result (not an error)
  static const int U_USING_FALLBACK_WARNING = -128;

  /// < Start of information results (semantically successful)
  static const int U_ERROR_WARNING_START = -128;

  /// < A resource bundle lookup returned a result from the root locale (not an error)
  static const int U_USING_DEFAULT_WARNING = -127;

  /// < A SafeClone operation required allocating memory (informational only)
  static const int U_SAFECLONE_ALLOCATED_WARNING = -126;

  /// < ICU has to use compatibility layer to construct the service. Expect performance/memory usage degradation. Consider upgrading
  static const int U_STATE_OLD_WARNING = -125;

  /// < An output string could not be NUL-terminated because output length==destCapacity.
  static const int U_STRING_NOT_TERMINATED_WARNING = -124;

  /// < Number of levels requested in getBound is higher than the number of levels in the sort key
  static const int U_SORT_KEY_TOO_SHORT_WARNING = -123;

  /// < This converter alias can go to different converter implementations
  static const int U_AMBIGUOUS_ALIAS_WARNING = -122;

  /// < ucol_open encountered a mismatch between UCA version and collator image version, so the collator was constructed from rules. No impact to further function
  static const int U_DIFFERENT_UCA_VERSION = -121;

  /// < A plugin caused a level change. May not be an error, but later plugins may not load.
  static const int U_PLUGIN_CHANGED_LEVEL_WARNING = -120;

  /// < No error, no warning.
  static const int U_ZERO_ERROR = 0;

  /// < Start of codes indicating failure
  static const int U_ILLEGAL_ARGUMENT_ERROR = 1;

  /// < The requested resource cannot be found
  static const int U_MISSING_RESOURCE_ERROR = 2;

  /// < Data format is not what is expected
  static const int U_INVALID_FORMAT_ERROR = 3;

  /// < The requested file cannot be found
  static const int U_FILE_ACCESS_ERROR = 4;

  /// < Indicates a bug in the library code
  static const int U_INTERNAL_PROGRAM_ERROR = 5;

  /// < Unable to parse a message (message format)
  static const int U_MESSAGE_PARSE_ERROR = 6;

  /// < Memory allocation error
  static const int U_MEMORY_ALLOCATION_ERROR = 7;

  /// < Trying to access the index that is out of bounds
  static const int U_INDEX_OUTOFBOUNDS_ERROR = 8;

  /// < Equivalent to Java ParseException
  static const int U_PARSE_ERROR = 9;

  /// < Character conversion: Unmappable input sequence. In other APIs: Invalid character.
  static const int U_INVALID_CHAR_FOUND = 10;

  /// < Character conversion: Incomplete input sequence.
  static const int U_TRUNCATED_CHAR_FOUND = 11;

  /// < Character conversion: Illegal input sequence/combination of input units.
  static const int U_ILLEGAL_CHAR_FOUND = 12;

  /// < Conversion table file found, but corrupted
  static const int U_INVALID_TABLE_FORMAT = 13;

  /// < Conversion table file not found
  static const int U_INVALID_TABLE_FILE = 14;

  /// < A result would not fit in the supplied buffer
  static const int U_BUFFER_OVERFLOW_ERROR = 15;

  /// < Requested operation not supported in current context
  static const int U_UNSUPPORTED_ERROR = 16;

  /// < an operation is requested over a resource that does not support it
  static const int U_RESOURCE_TYPE_MISMATCH = 17;

  /// < ISO-2022 illegal escape sequence
  static const int U_ILLEGAL_ESCAPE_SEQUENCE = 18;

  /// < ISO-2022 unsupported escape sequence
  static const int U_UNSUPPORTED_ESCAPE_SEQUENCE = 19;

  /// < No space available for in-buffer expansion for Arabic shaping
  static const int U_NO_SPACE_AVAILABLE = 20;

  /// < Currently used only while setting variable top, but can be used generally
  static const int U_CE_NOT_FOUND_ERROR = 21;

  /// < User tried to set variable top to a primary that is longer than two bytes
  static const int U_PRIMARY_TOO_LONG_ERROR = 22;

  /// < ICU cannot construct a service from this state, as it is no longer supported
  static const int U_STATE_TOO_OLD_ERROR = 23;

  /// < There are too many aliases in the path to the requested resource.
  /// It is very possible that a circular alias definition has occurred
  static const int U_TOO_MANY_ALIASES_ERROR = 24;

  /// < UEnumeration out of sync with underlying collection
  static const int U_ENUM_OUT_OF_SYNC_ERROR = 25;

  /// < Unable to convert a UChar* string to char* with the invariant converter.
  static const int U_INVARIANT_CONVERSION_ERROR = 26;

  /// < Requested operation can not be completed with ICU in its current state
  static const int U_INVALID_STATE_ERROR = 27;

  /// < Collator version is not compatible with the base version
  static const int U_COLLATOR_VERSION_MISMATCH = 28;

  /// < Collator is options only and no base is specified
  static const int U_USELESS_COLLATOR_ERROR = 29;

  /// < Attempt to modify read-only or constant data.
  static const int U_NO_WRITE_PERMISSION = 30;

  /// The input is impractically long for an operation.
  /// It is rejected because it may lead to problems such as excessive
  /// processing time, stack depth, or heap memory requirements.
  ///
  /// @stable ICU 68
  static const int U_INPUT_TOO_LONG_ERROR = 31;

  /// < Missing '$' or duplicate variable name
  static const int U_BAD_VARIABLE_DEFINITION = 65536;

  /// < Start of Transliterator errors
  static const int U_PARSE_ERROR_START = 65536;

  /// < Elements of a rule are misplaced
  static const int U_MALFORMED_RULE = 65537;

  /// < A UnicodeSet pattern is invalid
  static const int U_MALFORMED_SET = 65538;

  /// < UNUSED as of ICU 2.4
  static const int U_MALFORMED_SYMBOL_REFERENCE = 65539;

  /// < A Unicode escape pattern is invalid
  static const int U_MALFORMED_UNICODE_ESCAPE = 65540;

  /// < A variable definition is invalid
  static const int U_MALFORMED_VARIABLE_DEFINITION = 65541;

  /// < A variable reference is invalid
  static const int U_MALFORMED_VARIABLE_REFERENCE = 65542;

  /// < UNUSED as of ICU 2.4
  static const int U_MISMATCHED_SEGMENT_DELIMITERS = 65543;

  /// < A start anchor appears at an illegal position
  static const int U_MISPLACED_ANCHOR_START = 65544;

  /// < A cursor offset occurs at an illegal position
  static const int U_MISPLACED_CURSOR_OFFSET = 65545;

  /// < A quantifier appears after a segment close delimiter
  static const int U_MISPLACED_QUANTIFIER = 65546;

  /// < A rule contains no operator
  static const int U_MISSING_OPERATOR = 65547;

  /// < UNUSED as of ICU 2.4
  static const int U_MISSING_SEGMENT_CLOSE = 65548;

  /// < More than one ante context
  static const int U_MULTIPLE_ANTE_CONTEXTS = 65549;

  /// < More than one cursor
  static const int U_MULTIPLE_CURSORS = 65550;

  /// < More than one post context
  static const int U_MULTIPLE_POST_CONTEXTS = 65551;

  /// < A dangling backslash
  static const int U_TRAILING_BACKSLASH = 65552;

  /// < A segment reference does not correspond to a defined segment
  static const int U_UNDEFINED_SEGMENT_REFERENCE = 65553;

  /// < A variable reference does not correspond to a defined variable
  static const int U_UNDEFINED_VARIABLE = 65554;

  /// < A special character was not quoted or escaped
  static const int U_UNQUOTED_SPECIAL = 65555;

  /// < A closing single quote is missing
  static const int U_UNTERMINATED_QUOTE = 65556;

  /// < A rule is hidden by an earlier more general rule
  static const int U_RULE_MASK_ERROR = 65557;

  /// < A compound filter is in an invalid location
  static const int U_MISPLACED_COMPOUND_FILTER = 65558;

  /// < More than one compound filter
  static const int U_MULTIPLE_COMPOUND_FILTERS = 65559;

  /// < A "::id" rule was passed to the RuleBasedTransliterator parser
  static const int U_INVALID_RBT_SYNTAX = 65560;

  /// < UNUSED as of ICU 2.4
  static const int U_INVALID_PROPERTY_PATTERN = 65561;

  /// < A 'use' pragma is invalid
  static const int U_MALFORMED_PRAGMA = 65562;

  /// < A closing ')' is missing
  static const int U_UNCLOSED_SEGMENT = 65563;

  /// < UNUSED as of ICU 2.4
  static const int U_ILLEGAL_CHAR_IN_SEGMENT = 65564;

  /// < Too many stand-ins generated for the given variable range
  static const int U_VARIABLE_RANGE_EXHAUSTED = 65565;

  /// < The variable range overlaps characters used in rules
  static const int U_VARIABLE_RANGE_OVERLAP = 65566;

  /// < A special character is outside its allowed context
  static const int U_ILLEGAL_CHARACTER = 65567;

  /// < Internal transliterator system error
  static const int U_INTERNAL_TRANSLITERATOR_ERROR = 65568;

  /// < A "::id" rule specifies an unknown transliterator
  static const int U_INVALID_ID = 65569;

  /// < A "&fn()" rule specifies an unknown transliterator
  static const int U_INVALID_FUNCTION = 65570;

  /// < Syntax error in format pattern
  static const int U_UNEXPECTED_TOKEN = 65792;

  /// < Start of format library errors
  static const int U_FMT_PARSE_ERROR_START = 65792;

  /// < More than one decimal separator in number pattern
  static const int U_MULTIPLE_DECIMAL_SEPARATORS = 65793;

  /// < Typo: kept for backward compatibility. Use U_MULTIPLE_DECIMAL_SEPARATORS
  static const int U_MULTIPLE_DECIMAL_SEPERATORS = 65793;

  /// < More than one exponent symbol in number pattern
  static const int U_MULTIPLE_EXPONENTIAL_SYMBOLS = 65794;

  /// < Grouping symbol in exponent pattern
  static const int U_MALFORMED_EXPONENTIAL_PATTERN = 65795;

  /// < More than one percent symbol in number pattern
  static const int U_MULTIPLE_PERCENT_SYMBOLS = 65796;

  /// < More than one permill symbol in number pattern
  static const int U_MULTIPLE_PERMILL_SYMBOLS = 65797;

  /// < More than one pad symbol in number pattern
  static const int U_MULTIPLE_PAD_SPECIFIERS = 65798;

  /// < Syntax error in format pattern
  static const int U_PATTERN_SYNTAX_ERROR = 65799;

  /// < Pad symbol misplaced in number pattern
  static const int U_ILLEGAL_PAD_POSITION = 65800;

  /// < Braces do not match in message pattern
  static const int U_UNMATCHED_BRACES = 65801;

  /// < UNUSED as of ICU 2.4
  static const int U_UNSUPPORTED_PROPERTY = 65802;

  /// < UNUSED as of ICU 2.4
  static const int U_UNSUPPORTED_ATTRIBUTE = 65803;

  /// < Argument name and argument index mismatch in MessageFormat functions
  static const int U_ARGUMENT_TYPE_MISMATCH = 65804;

  /// < Duplicate keyword in PluralFormat
  static const int U_DUPLICATE_KEYWORD = 65805;

  /// < Undefined Plural keyword
  static const int U_UNDEFINED_KEYWORD = 65806;

  /// < Missing DEFAULT rule in plural rules
  static const int U_DEFAULT_KEYWORD_MISSING = 65807;

  /// < Decimal number syntax error
  static const int U_DECIMAL_NUMBER_SYNTAX_ERROR = 65808;

  /// < Cannot format a number exactly and rounding mode is ROUND_UNNECESSARY @stable ICU 4.8
  static const int U_FORMAT_INEXACT_ERROR = 65809;

  /// < The argument to a NumberFormatter helper method was out of bounds; the bounds are usually 0 to 999. @stable ICU 61
  static const int U_NUMBER_ARG_OUTOFBOUNDS_ERROR = 65810;

  /// < The number skeleton passed to C++ NumberFormatter or C UNumberFormatter was invalid or contained a syntax error. @stable ICU 62
  static const int U_NUMBER_SKELETON_SYNTAX_ERROR = 65811;

  /// < An internal error (bug) was detected.
  static const int U_BRK_INTERNAL_ERROR = 66048;

  /// < Start of codes indicating Break Iterator failures
  static const int U_BRK_ERROR_START = 66048;

  /// < Hex digits expected as part of a escaped char in a rule.
  static const int U_BRK_HEX_DIGITS_EXPECTED = 66049;

  /// < Missing ';' at the end of a RBBI rule.
  static const int U_BRK_SEMICOLON_EXPECTED = 66050;

  /// < Syntax error in RBBI rule.
  static const int U_BRK_RULE_SYNTAX = 66051;

  /// < UnicodeSet writing an RBBI rule missing a closing ']'.
  static const int U_BRK_UNCLOSED_SET = 66052;

  /// < Syntax error in RBBI rule assignment statement.
  static const int U_BRK_ASSIGN_ERROR = 66053;

  /// < RBBI rule $Variable redefined.
  static const int U_BRK_VARIABLE_REDFINITION = 66054;

  /// < Mis-matched parentheses in an RBBI rule.
  static const int U_BRK_MISMATCHED_PAREN = 66055;

  /// < Missing closing quote in an RBBI rule.
  static const int U_BRK_NEW_LINE_IN_QUOTED_STRING = 66056;

  /// < Use of an undefined $Variable in an RBBI rule.
  static const int U_BRK_UNDEFINED_VARIABLE = 66057;

  /// < Initialization failure.  Probable missing ICU Data.
  static const int U_BRK_INIT_ERROR = 66058;

  /// < Rule contains an empty Unicode Set.
  static const int U_BRK_RULE_EMPTY_SET = 66059;

  /// < !!option in RBBI rules not recognized.
  static const int U_BRK_UNRECOGNIZED_OPTION = 66060;

  /// < The {nnn} tag on a rule is malformed
  static const int U_BRK_MALFORMED_RULE_TAG = 66061;

  /// < An internal error (bug) was detected.
  static const int U_REGEX_INTERNAL_ERROR = 66304;

  /// < Start of codes indicating Regexp failures
  static const int U_REGEX_ERROR_START = 66304;

  /// < Syntax error in regexp pattern.
  static const int U_REGEX_RULE_SYNTAX = 66305;

  /// < RegexMatcher in invalid state for requested operation
  static const int U_REGEX_INVALID_STATE = 66306;

  /// < Unrecognized backslash escape sequence in pattern
  static const int U_REGEX_BAD_ESCAPE_SEQUENCE = 66307;

  /// < Incorrect Unicode property
  static const int U_REGEX_PROPERTY_SYNTAX = 66308;

  /// < Use of regexp feature that is not yet implemented.
  static const int U_REGEX_UNIMPLEMENTED = 66309;

  /// < Incorrectly nested parentheses in regexp pattern.
  static const int U_REGEX_MISMATCHED_PAREN = 66310;

  /// < Decimal number is too large.
  static const int U_REGEX_NUMBER_TOO_BIG = 66311;

  /// < Error in {min,max} interval
  static const int U_REGEX_BAD_INTERVAL = 66312;

  /// < In {min,max}, max is less than min.
  static const int U_REGEX_MAX_LT_MIN = 66313;

  /// < Back-reference to a non-existent capture group.
  static const int U_REGEX_INVALID_BACK_REF = 66314;

  /// < Invalid value for match mode flags.
  static const int U_REGEX_INVALID_FLAG = 66315;

  /// < Look-Behind pattern matches must have a bounded maximum length.
  static const int U_REGEX_LOOK_BEHIND_LIMIT = 66316;

  /// < Regexps cannot have UnicodeSets containing strings.
  static const int U_REGEX_SET_CONTAINS_STRING = 66317;

  /// < Missing closing bracket on a bracket expression.
  static const int U_REGEX_MISSING_CLOSE_BRACKET = 66319;

  /// < In a character range [x-y], x is greater than y.
  static const int U_REGEX_INVALID_RANGE = 66320;

  /// < Regular expression backtrack stack overflow.
  static const int U_REGEX_STACK_OVERFLOW = 66321;

  /// < Maximum allowed match time exceeded
  static const int U_REGEX_TIME_OUT = 66322;

  /// < Matching operation aborted by user callback fn.
  static const int U_REGEX_STOPPED_BY_CALLER = 66323;

  /// < Pattern exceeds limits on size or complexity. @stable ICU 55
  static const int U_REGEX_PATTERN_TOO_BIG = 66324;

  /// < Invalid capture group name. @stable ICU 55
  static const int U_REGEX_INVALID_CAPTURE_GROUP_NAME = 66325;
  static const int U_IDNA_PROHIBITED_ERROR = 66560;
  static const int U_IDNA_ERROR_START = 66560;
  static const int U_IDNA_UNASSIGNED_ERROR = 66561;
  static const int U_IDNA_CHECK_BIDI_ERROR = 66562;
  static const int U_IDNA_STD3_ASCII_RULES_ERROR = 66563;
  static const int U_IDNA_ACE_PREFIX_ERROR = 66564;
  static const int U_IDNA_VERIFICATION_ERROR = 66565;
  static const int U_IDNA_LABEL_TOO_LONG_ERROR = 66566;
  static const int U_IDNA_ZERO_LENGTH_LABEL_ERROR = 66567;
  static const int U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR = 66568;
  static const int U_STRINGPREP_PROHIBITED_ERROR = 66560;
  static const int U_STRINGPREP_UNASSIGNED_ERROR = 66561;
  static const int U_STRINGPREP_CHECK_BIDI_ERROR = 66562;

  /// < Start of codes indicating plugin failures
  static const int U_PLUGIN_ERROR_START = 66816;

  /// < The plugin's level is too high to be loaded right now.
  static const int U_PLUGIN_TOO_HIGH = 66816;

  /// < The plugin didn't call uplug_setPlugLevel in response to a QUERY
  static const int U_PLUGIN_DIDNT_SET_LEVEL = 66817;
}

const int ULOC_FULLNAME_CAPACITY = 157;
